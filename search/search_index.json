{"config":{"indexing":"full","lang":["pt"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"VERSI\u00d3N EN ESPA\u00d1OL Para ver estas p\u00e1ginas en espa\u00f1ol copia y pega su URL en la opci\u00f3n de traducir p\u00e1ginas web del traductor de la CIXUG . Actividades adicionais Actividades adicionais para as pr\u00e1cticas de Computaci\u00f3n na Nube para IoT PR\u00c1CTICA 1: Conexi\u00f3n segura de dispositivos co Device SDK Actividade 1 : Analizar o c\u00f3digo dos scripts usados no curso. Actividade 2 : Probar outras formas de interaxir co servizo AWS IoT Core. Actividade 3 : Executar un exemplo da Device SDK v2. PR\u00c1CTICA 2: Xesti\u00f3n de datos e estados de dispositivos IoT Actividade 1 : Comprobar o funcionamento das regras creadas no curso. Actividade 2 : Crear unha regra para gardar datos en DynamoDB. Actividade 3 : Crear unha regra para enviar notificaci\u00f3ns SNS. Actividade 4 : Executar o exemplo de sombras de dispositivo da Device SDK v2. PR\u00c1CTICA 3: AWS IoT Device Client Actividade 1 : Mensaxer\u00eda MQTT a trav\u00e9s dos ficheiros de publicaci\u00f3n e subscrici\u00f3n. Actividade 2 : Definici\u00f3n dun modelo de documento de traballo personalizado. Actividade 3 : Implementaci\u00f3n dun manipulador de traballos (Job Handler). Actividade 4 : Env\u00edo de datos de telemetr\u00eda de sensores mediante MQTT. PR\u00c1CTICA 4: AWS IoT Greengrass Actividade 1 : Compo\u00f1entes de aprendizaxe m\u00e1quina. Actividade 2 : Compo\u00f1entes personalizados de aprendizaxe m\u00e1quina. PR\u00c1CTICA 5: Procesamento e anal\u00edtica de datos IoT Actividade 1 : Modelo de alarma de tres estados. Actividade 2 : Streaming de datos a Redshift. Licenza Actividades adicionais para as pr\u00e1cticas de Computaci\u00f3n na Nube para IoT de Xo\u00e1n C. Pardo ten unha licenza Creative Commons Reco\u00f1ecemento-Non comercial 4.0 Internacional .","title":"Home"},{"location":"#actividades-adicionais","text":"Actividades adicionais para as pr\u00e1cticas de Computaci\u00f3n na Nube para IoT","title":"Actividades adicionais"},{"location":"#practica-1-conexion-segura-de-dispositivos-co-device-sdk","text":"Actividade 1 : Analizar o c\u00f3digo dos scripts usados no curso. Actividade 2 : Probar outras formas de interaxir co servizo AWS IoT Core. Actividade 3 : Executar un exemplo da Device SDK v2.","title":"PR\u00c1CTICA 1: Conexi\u00f3n segura de dispositivos co Device SDK"},{"location":"#practica-2-xestion-de-datos-e-estados-de-dispositivos-iot","text":"Actividade 1 : Comprobar o funcionamento das regras creadas no curso. Actividade 2 : Crear unha regra para gardar datos en DynamoDB. Actividade 3 : Crear unha regra para enviar notificaci\u00f3ns SNS. Actividade 4 : Executar o exemplo de sombras de dispositivo da Device SDK v2.","title":"PR\u00c1CTICA 2: Xesti\u00f3n de datos e estados de dispositivos IoT"},{"location":"#practica-3-aws-iot-device-client","text":"Actividade 1 : Mensaxer\u00eda MQTT a trav\u00e9s dos ficheiros de publicaci\u00f3n e subscrici\u00f3n. Actividade 2 : Definici\u00f3n dun modelo de documento de traballo personalizado. Actividade 3 : Implementaci\u00f3n dun manipulador de traballos (Job Handler). Actividade 4 : Env\u00edo de datos de telemetr\u00eda de sensores mediante MQTT.","title":"PR\u00c1CTICA 3: AWS IoT Device Client"},{"location":"#practica-4-aws-iot-greengrass","text":"Actividade 1 : Compo\u00f1entes de aprendizaxe m\u00e1quina. Actividade 2 : Compo\u00f1entes personalizados de aprendizaxe m\u00e1quina.","title":"PR\u00c1CTICA 4: AWS IoT Greengrass"},{"location":"#practica-5-procesamento-e-analitica-de-datos-iot","text":"Actividade 1 : Modelo de alarma de tres estados. Actividade 2 : Streaming de datos a Redshift.","title":"PR\u00c1CTICA 5: Procesamento e anal\u00edtica de datos IoT"},{"location":"#licenza","text":"Actividades adicionais para as pr\u00e1cticas de Computaci\u00f3n na Nube para IoT de Xo\u00e1n C. Pardo ten unha licenza Creative Commons Reco\u00f1ecemento-Non comercial 4.0 Internacional .","title":"Licenza"},{"location":"practica_1/actividade_1/","text":"Actividade 1 ANALIZAR O C\u00d3DIGO DOS SCRIPTS USADOS NO CURSO. Obxectivo O obxectivo desta actividade \u00e9 adquirir un co\u00f1ecemento b\u00e1sico sobre o funcionamento dos scripts que se usaron no curso analizando o seu c\u00f3digo. Pasos Fai o seguinte: Abre o script start.sh e analiza o seu c\u00f3digo para comprender o seu funcionamento. Presta atenci\u00f3n en especial a: Como se instala o Device SDK. Como se obt\u00e9n o endpoint do servizo AWS IoT. Os par\u00e1metros que se lle pasan ao script Python ( trucksensor.py ). Abre o script trucksensor.py e analiza o seu c\u00f3digo para comprender o seu funcionamento. Presta atenci\u00f3n en especial a: Como se importa o cliente MQTT do Device SDK. Como se configura o cliente MQTT. Como se abre e pecha unha conexi\u00f3n co cliente MQTT. Como se publica unha mensaxe co cliente MQTT. Nota Consulta aqu\u00ed a documentaci\u00f3n do SDK. Xustificaci\u00f3n da actividade Non \u00e9 preciso entregar nada para xustificar a realizaci\u00f3n desta actividade.","title":"Actividade 1"},{"location":"practica_1/actividade_1/#actividade-1","text":"ANALIZAR O C\u00d3DIGO DOS SCRIPTS USADOS NO CURSO.","title":"Actividade 1"},{"location":"practica_1/actividade_1/#obxectivo","text":"O obxectivo desta actividade \u00e9 adquirir un co\u00f1ecemento b\u00e1sico sobre o funcionamento dos scripts que se usaron no curso analizando o seu c\u00f3digo.","title":"Obxectivo"},{"location":"practica_1/actividade_1/#pasos","text":"Fai o seguinte: Abre o script start.sh e analiza o seu c\u00f3digo para comprender o seu funcionamento. Presta atenci\u00f3n en especial a: Como se instala o Device SDK. Como se obt\u00e9n o endpoint do servizo AWS IoT. Os par\u00e1metros que se lle pasan ao script Python ( trucksensor.py ). Abre o script trucksensor.py e analiza o seu c\u00f3digo para comprender o seu funcionamento. Presta atenci\u00f3n en especial a: Como se importa o cliente MQTT do Device SDK. Como se configura o cliente MQTT. Como se abre e pecha unha conexi\u00f3n co cliente MQTT. Como se publica unha mensaxe co cliente MQTT. Nota Consulta aqu\u00ed a documentaci\u00f3n do SDK.","title":"Pasos"},{"location":"practica_1/actividade_1/#xustificacion-da-actividade","text":"Non \u00e9 preciso entregar nada para xustificar a realizaci\u00f3n desta actividade.","title":"Xustificaci\u00f3n da actividade"},{"location":"practica_1/actividade_2/","text":"Actividade 2 PROBAR OUTRAS FORMAS DE INTERAXIR CO SERVIZO AWS IOT CORE. Obxectivo O obxectivo desta actividade \u00e9 co\u00f1ecer d\u00faas maneiras adicionais de interaxir co servizo AWS IoT Core: A AWS Toolkit \u00e9 unha extensi\u00f3n que permite acceder e traballar con varios servizos AWS, inclu\u00eddo o AWS IoT Core, directamente desde o ambiente Cloud9. A AWS CLI \u00e9 unha interface de li\u00f1a de comandos para os servizos AWS que, entre outras posibilidades, pode usarse desde un terminal no ambiente Cloud9 onde xa est\u00e1 instalada por defecto. AWS Toolkit Para probar a AWS Toolkit fai o seguinte: No ambiente Cloud9, accede ao AWS Explorer e desprega os elementos baixo o servizo IoT. Imaxe: AWS Toolkit para IoT aberto no AWS Explorer do ambiente Cloud9. Aviso A\u00ednda que no exemplo aparecen m\u00e1is elementos, no teu caso s\u00f3 aparecer\u00e1n os que se usaron no curso. Desde o men\u00fa de contexto de cada elemento (bot\u00f3n dereito do rato) pode accederse \u00e1s diferentes acci\u00f3ns que poden realizarse con el. Podes curiosear tendo coidado de non modificar nada. Nota Consulta aqu\u00ed todas as operaci\u00f3ns que soporta o toolkit para IoT. AWS CLI Para probar a AWS CLI fai o seguinte: Nun terminal do ambiente Cloud9 executa os comandos que podes ver no seguinte exemplo: Nomenclatura Lembra usar o teu prefixo no nome da cousa. Imaxe: comandos da AWS CLI executados nun terminal do ambiente Cloud9. Pregunta Lembras en que script da actividade 1 se usou o comando describe_endpoint e para que? Nota Podes consultar aqu\u00ed todas as operaci\u00f3ns que soporta a CLI para IoT ou tam\u00e9n executando o comando: aws iot help Xustificaci\u00f3n da actividade Non \u00e9 preciso entregar nada para xustificar a realizaci\u00f3n desta actividade.","title":"Actividade 2"},{"location":"practica_1/actividade_2/#actividade-2","text":"PROBAR OUTRAS FORMAS DE INTERAXIR CO SERVIZO AWS IOT CORE.","title":"Actividade 2"},{"location":"practica_1/actividade_2/#obxectivo","text":"O obxectivo desta actividade \u00e9 co\u00f1ecer d\u00faas maneiras adicionais de interaxir co servizo AWS IoT Core: A AWS Toolkit \u00e9 unha extensi\u00f3n que permite acceder e traballar con varios servizos AWS, inclu\u00eddo o AWS IoT Core, directamente desde o ambiente Cloud9. A AWS CLI \u00e9 unha interface de li\u00f1a de comandos para os servizos AWS que, entre outras posibilidades, pode usarse desde un terminal no ambiente Cloud9 onde xa est\u00e1 instalada por defecto.","title":"Obxectivo"},{"location":"practica_1/actividade_2/#aws-toolkit","text":"Para probar a AWS Toolkit fai o seguinte: No ambiente Cloud9, accede ao AWS Explorer e desprega os elementos baixo o servizo IoT. Imaxe: AWS Toolkit para IoT aberto no AWS Explorer do ambiente Cloud9. Aviso A\u00ednda que no exemplo aparecen m\u00e1is elementos, no teu caso s\u00f3 aparecer\u00e1n os que se usaron no curso. Desde o men\u00fa de contexto de cada elemento (bot\u00f3n dereito do rato) pode accederse \u00e1s diferentes acci\u00f3ns que poden realizarse con el. Podes curiosear tendo coidado de non modificar nada. Nota Consulta aqu\u00ed todas as operaci\u00f3ns que soporta o toolkit para IoT.","title":"AWS Toolkit"},{"location":"practica_1/actividade_2/#aws-cli","text":"Para probar a AWS CLI fai o seguinte: Nun terminal do ambiente Cloud9 executa os comandos que podes ver no seguinte exemplo: Nomenclatura Lembra usar o teu prefixo no nome da cousa. Imaxe: comandos da AWS CLI executados nun terminal do ambiente Cloud9. Pregunta Lembras en que script da actividade 1 se usou o comando describe_endpoint e para que? Nota Podes consultar aqu\u00ed todas as operaci\u00f3ns que soporta a CLI para IoT ou tam\u00e9n executando o comando: aws iot help","title":"AWS CLI"},{"location":"practica_1/actividade_2/#xustificacion-da-actividade","text":"Non \u00e9 preciso entregar nada para xustificar a realizaci\u00f3n desta actividade.","title":"Xustificaci\u00f3n da actividade"},{"location":"practica_1/actividade_3/","text":"Actividade 3 EXECUTAR UN EXEMPLO DA DEVICE SDK V2. Obxectivo O obxectivo desta actividade \u00e9 probar un dos exemplos que ve\u00f1en coa versi\u00f3n 2 do Device SDK e comparar os scripts cos que vimos na actividade 1. O exemplo que vamos a probar intercambia (publica e recibe) mensaxes co servizo AWS IoT Core de maneira segura usando MQTT5. Nota Podes ver aqu\u00ed a documentaci\u00f3n do exemplo. Pasos Fai o seguinte: Desde un terminal no ambiente Cloud9 instala o Device SDK v2 para Python. Clona o repositorio en ~/environment/scripts $ cd ~/environment/scripts $ git clone -b v1.22.0 \\ https://github.com/aws/aws-iot-device-sdk-python-v2.git \\ --recursive Corrixe a versi\u00f3n no ficheiro __init__.py e instala o Device SDK $ sed -i \"s/__version__ = '1.0.0-dev'/__version__ = '1.22.0'/\" \\ ./aws-iot-device-sdk-python-v2/awsiot/__init__.py $ python3 -m pip install ./aws-iot-device-sdk-python-v2 ... Installing collected packages: awsiotsdk Running setup.py install for awsiotsdk ... done Successfully installed awsiotsdk-1.22.0 $ Para poder usar MQTT5 precisamos conectarnos a un endpoint de AWS IoT que acepte certificados reco\u00f1ecidos pola entidade certificadora de Amazon (ATS, Amazon Trust Services ). Descarga o certificado ra\u00edz de ATS no directorio certs. $ cd ~/environment/certs $ curl https://www.amazontrust.com/repository/AmazonRootCA1.pem > root-CA1.crt Nota Consulta aqu\u00ed o motivo polo que \u00e9 preciso facer este paso. No directorio de scripts , crea un script start_v2.sh para executar o exemplo. Nomenclatura Lembra usar o teu prefixo no nome da cousa. $ cd ~/environment/scripts $ nano start_v2.sh $ cat start_v2.sh #!/usr/bin/env bash # stop script on error set -e # set the device name device=xcpm2425-truckSensor01 # get the MQTT5-compatible AWS IoT endpoint aws iot describe-endpoint \\ --endpoint-type iot:Data-ATS > /tmp/iotendpoint.json iot_endpoint=$(jq -r \".endpointAddress\" /tmp/iotendpoint.json) # run MQTT5 pub/sub sample app printf \"\\nRunning MQTT5 pub/sub sample application...\\n\" python3 ./aws-iot-device-sdk-python-v2/samples/mqtt5_pubsub.py \\ --endpoint $iot_endpoint --ca_file ../certs/root-CA1.crt \\ --cert ../certs/$device.cert.pem --key ../certs/$device.private.key \\ --topic truck/pubsub --count 0 $ Nota Para poder usar MQTT5 obtemos un endpoint compat\u00edbel usando o par\u00e1metro --endpoint-type iot:Data-ATS no comando describe-endpoint e lle pasamos ao script mqtt5_pubsub.py o certificado ra\u00edz do ATS no par\u00e1metro \u2013-ca_file . Edita a pol\u00edtica AWS IoT da cousa para permitir a subscrici\u00f3n ao t\u00f3pico do exemplo e publicar e recibir mensaxes del. OLLO Lembra usar o ID da t\u00faa conta nos ARN ( Amazon Resource Name ) dos recursos. Imaxe: pol\u00edtica AWS IoT modificada. Executa o exemplo no directorio de scripts. $ pwd /home/ec2-user/environment/scripts $ chmod +x start_v2.sh $ ./start_v2.sh No cliente MQTT da consola de AWS IoT subscr\u00edbete ao t\u00f3pico truck/pubsub e comproba que se reciben mensaxes. Podes tam\u00e9n probar a publicar mensaxes no mesmo t\u00f3pico e comprobar se aparecen no terminal no que se estea a executar o script start_v2 . Para parar o script preme Ctrl+C no terminal. Importante Antes de continuar xa podes tomar as capturas que se piden para xustificar a actividade . Os seguintes pasos non \u00e9 preciso xustificalos. Abre o script mqtt5_pubsub.py no directorio samples do Device SDK v2 e analiza o seu c\u00f3digo. Comp\u00e1rao co da actividade 1. Presta atenci\u00f3n en especial a: Como se importan as compo\u00f1entes de MQTT5. Como se crea un cliente MQTT5. Como se abre e pecha unha conexi\u00f3n co cliente MQTT5. Como se realiza unha subscrici\u00f3n a un t\u00f3pico MQTT5 e como se anula. Como se publican e reciben mensaxes co cliente MQTT5. Nota Consulta a documentaci\u00f3n do SDK v2 para MQTT5 aqu\u00ed e aqu\u00ed . Este paso \u00e9 opcional . O script pubsub.py no directorio samples do Device SDK v2 \u00e9 unha implementaci\u00f3n do mesmo exemplo que acabamos de ver pero usando MQTT311. Modifica o script start_v2.sh para executar este exemplo. Deber\u00eda funcionar tanto co endpoint e certificado de ATS como cos que se usaron no curso. Nota Podes consultar a documentaci\u00f3n deste exemplo aqu\u00ed e a do SDK v2 para MQTT311 aqu\u00ed e aqu\u00ed . Xustificaci\u00f3n da actividade Toma as seguintes capturas para a memoria de xustificaci\u00f3n da pr\u00e1ctica: Ambiente Cloud9 co Device SDK v2 instalado e o c\u00f3digo do script start_v2.sh aberto nun terminal. Propiedades da pol\u00edtica AWS IoT modificada. Ambiente Cloud9 coa sa\u00edda do terminal na que se executou o exemplo. Consola IoT coas mensaxes MQTT recibidas nas que poida verse o payload . Importante As capturas te\u00f1en que asemellarse \u00e1s que se tomaron nas secci\u00f3ns 10 e 11 do curso de AWS Skill Builder. As capturas tomadas na consola AWS te\u00f1en que inclu\u00edr o men\u00fa superior no que poida verse o nome de usuario da conta.","title":"Actividade 3"},{"location":"practica_1/actividade_3/#actividade-3","text":"EXECUTAR UN EXEMPLO DA DEVICE SDK V2.","title":"Actividade 3"},{"location":"practica_1/actividade_3/#obxectivo","text":"O obxectivo desta actividade \u00e9 probar un dos exemplos que ve\u00f1en coa versi\u00f3n 2 do Device SDK e comparar os scripts cos que vimos na actividade 1. O exemplo que vamos a probar intercambia (publica e recibe) mensaxes co servizo AWS IoT Core de maneira segura usando MQTT5. Nota Podes ver aqu\u00ed a documentaci\u00f3n do exemplo.","title":"Obxectivo"},{"location":"practica_1/actividade_3/#pasos","text":"Fai o seguinte: Desde un terminal no ambiente Cloud9 instala o Device SDK v2 para Python. Clona o repositorio en ~/environment/scripts $ cd ~/environment/scripts $ git clone -b v1.22.0 \\ https://github.com/aws/aws-iot-device-sdk-python-v2.git \\ --recursive Corrixe a versi\u00f3n no ficheiro __init__.py e instala o Device SDK $ sed -i \"s/__version__ = '1.0.0-dev'/__version__ = '1.22.0'/\" \\ ./aws-iot-device-sdk-python-v2/awsiot/__init__.py $ python3 -m pip install ./aws-iot-device-sdk-python-v2 ... Installing collected packages: awsiotsdk Running setup.py install for awsiotsdk ... done Successfully installed awsiotsdk-1.22.0 $ Para poder usar MQTT5 precisamos conectarnos a un endpoint de AWS IoT que acepte certificados reco\u00f1ecidos pola entidade certificadora de Amazon (ATS, Amazon Trust Services ). Descarga o certificado ra\u00edz de ATS no directorio certs. $ cd ~/environment/certs $ curl https://www.amazontrust.com/repository/AmazonRootCA1.pem > root-CA1.crt Nota Consulta aqu\u00ed o motivo polo que \u00e9 preciso facer este paso. No directorio de scripts , crea un script start_v2.sh para executar o exemplo. Nomenclatura Lembra usar o teu prefixo no nome da cousa. $ cd ~/environment/scripts $ nano start_v2.sh $ cat start_v2.sh #!/usr/bin/env bash # stop script on error set -e # set the device name device=xcpm2425-truckSensor01 # get the MQTT5-compatible AWS IoT endpoint aws iot describe-endpoint \\ --endpoint-type iot:Data-ATS > /tmp/iotendpoint.json iot_endpoint=$(jq -r \".endpointAddress\" /tmp/iotendpoint.json) # run MQTT5 pub/sub sample app printf \"\\nRunning MQTT5 pub/sub sample application...\\n\" python3 ./aws-iot-device-sdk-python-v2/samples/mqtt5_pubsub.py \\ --endpoint $iot_endpoint --ca_file ../certs/root-CA1.crt \\ --cert ../certs/$device.cert.pem --key ../certs/$device.private.key \\ --topic truck/pubsub --count 0 $ Nota Para poder usar MQTT5 obtemos un endpoint compat\u00edbel usando o par\u00e1metro --endpoint-type iot:Data-ATS no comando describe-endpoint e lle pasamos ao script mqtt5_pubsub.py o certificado ra\u00edz do ATS no par\u00e1metro \u2013-ca_file . Edita a pol\u00edtica AWS IoT da cousa para permitir a subscrici\u00f3n ao t\u00f3pico do exemplo e publicar e recibir mensaxes del. OLLO Lembra usar o ID da t\u00faa conta nos ARN ( Amazon Resource Name ) dos recursos. Imaxe: pol\u00edtica AWS IoT modificada. Executa o exemplo no directorio de scripts. $ pwd /home/ec2-user/environment/scripts $ chmod +x start_v2.sh $ ./start_v2.sh No cliente MQTT da consola de AWS IoT subscr\u00edbete ao t\u00f3pico truck/pubsub e comproba que se reciben mensaxes. Podes tam\u00e9n probar a publicar mensaxes no mesmo t\u00f3pico e comprobar se aparecen no terminal no que se estea a executar o script start_v2 . Para parar o script preme Ctrl+C no terminal. Importante Antes de continuar xa podes tomar as capturas que se piden para xustificar a actividade . Os seguintes pasos non \u00e9 preciso xustificalos. Abre o script mqtt5_pubsub.py no directorio samples do Device SDK v2 e analiza o seu c\u00f3digo. Comp\u00e1rao co da actividade 1. Presta atenci\u00f3n en especial a: Como se importan as compo\u00f1entes de MQTT5. Como se crea un cliente MQTT5. Como se abre e pecha unha conexi\u00f3n co cliente MQTT5. Como se realiza unha subscrici\u00f3n a un t\u00f3pico MQTT5 e como se anula. Como se publican e reciben mensaxes co cliente MQTT5. Nota Consulta a documentaci\u00f3n do SDK v2 para MQTT5 aqu\u00ed e aqu\u00ed . Este paso \u00e9 opcional . O script pubsub.py no directorio samples do Device SDK v2 \u00e9 unha implementaci\u00f3n do mesmo exemplo que acabamos de ver pero usando MQTT311. Modifica o script start_v2.sh para executar este exemplo. Deber\u00eda funcionar tanto co endpoint e certificado de ATS como cos que se usaron no curso. Nota Podes consultar a documentaci\u00f3n deste exemplo aqu\u00ed e a do SDK v2 para MQTT311 aqu\u00ed e aqu\u00ed .","title":"Pasos"},{"location":"practica_1/actividade_3/#xustificacion-da-actividade","text":"Toma as seguintes capturas para a memoria de xustificaci\u00f3n da pr\u00e1ctica: Ambiente Cloud9 co Device SDK v2 instalado e o c\u00f3digo do script start_v2.sh aberto nun terminal. Propiedades da pol\u00edtica AWS IoT modificada. Ambiente Cloud9 coa sa\u00edda do terminal na que se executou o exemplo. Consola IoT coas mensaxes MQTT recibidas nas que poida verse o payload . Importante As capturas te\u00f1en que asemellarse \u00e1s que se tomaron nas secci\u00f3ns 10 e 11 do curso de AWS Skill Builder. As capturas tomadas na consola AWS te\u00f1en que inclu\u00edr o men\u00fa superior no que poida verse o nome de usuario da conta.","title":"Xustificaci\u00f3n da actividade"},{"location":"practica_2/actividade_1/","text":"Actividade 1 COMPROBAR O FUNCIONAMENTO DAS REGRAS CREADAS NO CURSO. Obxectivo O obxectivo desta actividade \u00e9 comprobar o funcionamento das regras IoT definidas no curso do AWS Skill Builder. Pasos Fai o seguinte: Nun terminal do ambiente Cloud9 executa o script start.sh . No cliente MQTT da consola de AWS IoT subscr\u00edbete aos t\u00f3picos truck/freezer e truck/analyze e comproba que se reciben mensaxes desde o dispositivo IoT. Nota A acci\u00f3n da regra truckAnalyze que volve publicar as mensaxes recibidas, por cada mensaxe recibida no t\u00f3pico truck/freezer vai publicar unha mensaxe no t\u00f3pico truck/analyze coa informaci\u00f3n escollida pola sentenza SQL da regra. Comproba no AWS Explorer do ambiente Cloud9 que AWS IoT Analytics est\u00e1 gardando os datos de telemetr\u00eda en bruto no bucket S3 que se configurou. Ter\u00e1s que refrescar a vista do AWS Explorer (a opci\u00f3n est\u00e1 no men\u00fa de contexto) para poder ver os \u00faltimos obxectos gardados en S3 a medida que vaian actualiz\u00e1ndose. Nota A segunda acci\u00f3n que se configurou na regra truckAnalyze env\u00eda as mensaxes recibidas no t\u00f3pico truck/freezer a IoT Analytics, que as almacena no bucket S3 como datos en bruto. Estes datos poder\u00e1n posteriormente reutilizarse desde IoT Analytics. Para o script premendo Ctrl+C no terminal do ambiente Cloud9 no que estexa execut\u00e1ndose. Xustificaci\u00f3n da actividade Toma as seguintes capturas para a memoria de xustificaci\u00f3n da pr\u00e1ctica: Ambiente Cloud9 no que se vexan no AWS Explorer os obxectos que almacenan os datos en bruto no bucket S3 e a sa\u00edda do terminal na que se executou o script . Consola IoT coas mensaxes MQTT recibidas no t\u00f3pico truck/freezer nas que poida verse o payload . Idem \u00e1 captura anterior para o t\u00f3pico truck/analyze . Importante As capturas te\u00f1en que asemellarse \u00e1s que se tomaron no curso e na pr\u00e1ctica 1. As capturas tomadas na consola AWS te\u00f1en que inclu\u00edr o men\u00fa superior no que poida verse o nome de usuario da conta.","title":"Actividade 1"},{"location":"practica_2/actividade_1/#actividade-1","text":"COMPROBAR O FUNCIONAMENTO DAS REGRAS CREADAS NO CURSO.","title":"Actividade 1"},{"location":"practica_2/actividade_1/#obxectivo","text":"O obxectivo desta actividade \u00e9 comprobar o funcionamento das regras IoT definidas no curso do AWS Skill Builder.","title":"Obxectivo"},{"location":"practica_2/actividade_1/#pasos","text":"Fai o seguinte: Nun terminal do ambiente Cloud9 executa o script start.sh . No cliente MQTT da consola de AWS IoT subscr\u00edbete aos t\u00f3picos truck/freezer e truck/analyze e comproba que se reciben mensaxes desde o dispositivo IoT. Nota A acci\u00f3n da regra truckAnalyze que volve publicar as mensaxes recibidas, por cada mensaxe recibida no t\u00f3pico truck/freezer vai publicar unha mensaxe no t\u00f3pico truck/analyze coa informaci\u00f3n escollida pola sentenza SQL da regra. Comproba no AWS Explorer do ambiente Cloud9 que AWS IoT Analytics est\u00e1 gardando os datos de telemetr\u00eda en bruto no bucket S3 que se configurou. Ter\u00e1s que refrescar a vista do AWS Explorer (a opci\u00f3n est\u00e1 no men\u00fa de contexto) para poder ver os \u00faltimos obxectos gardados en S3 a medida que vaian actualiz\u00e1ndose. Nota A segunda acci\u00f3n que se configurou na regra truckAnalyze env\u00eda as mensaxes recibidas no t\u00f3pico truck/freezer a IoT Analytics, que as almacena no bucket S3 como datos en bruto. Estes datos poder\u00e1n posteriormente reutilizarse desde IoT Analytics. Para o script premendo Ctrl+C no terminal do ambiente Cloud9 no que estexa execut\u00e1ndose.","title":"Pasos"},{"location":"practica_2/actividade_1/#xustificacion-da-actividade","text":"Toma as seguintes capturas para a memoria de xustificaci\u00f3n da pr\u00e1ctica: Ambiente Cloud9 no que se vexan no AWS Explorer os obxectos que almacenan os datos en bruto no bucket S3 e a sa\u00edda do terminal na que se executou o script . Consola IoT coas mensaxes MQTT recibidas no t\u00f3pico truck/freezer nas que poida verse o payload . Idem \u00e1 captura anterior para o t\u00f3pico truck/analyze . Importante As capturas te\u00f1en que asemellarse \u00e1s que se tomaron no curso e na pr\u00e1ctica 1. As capturas tomadas na consola AWS te\u00f1en que inclu\u00edr o men\u00fa superior no que poida verse o nome de usuario da conta.","title":"Xustificaci\u00f3n da actividade"},{"location":"practica_2/actividade_2/","text":"Actividade 2 CREAR UNHA REGRA PARA GARDAR DATOS EN DYNAMODB. Obxectivo O obxectivo desta actividade \u00e9 crear unha regra AWS IoT que env\u00ede os datos das mensaxes de telemetr\u00eda recibidas desde o dispositivo IoT (o cami\u00f3n) a unha t\u00e1boa DynamoDB. Creaci\u00f3n da t\u00e1boa DynamoDB A t\u00e1boa vai conter os seguintes atributos: sample_time a hora en que a mensaxe foi rexistrada. device_id identificador do cami\u00f3n que transmitiu a mensaxe. device_data contido da mensaxe formatado pola instrucci\u00f3n SQL da regra. Para crear a t\u00e1boa fai o seguinte: Abre a consola de DynamoDB e escolle a opci\u00f3n Crear t\u00e1boa . No asistente de creaci\u00f3n da t\u00e1boa indica as opci\u00f3ns seguintes: Nome da t\u00e1boa: trucks-data . Lembra po\u00f1er o teu prefixo diante, p.ex. xcpm2425-trucks-data . Chave de partici\u00f3n: sample_time de tipo N\u00famero . Chave de clasificaci\u00f3n: device_id de tipo N\u00famero . Nota device_data definirase posteriormente, cando se configure a acci\u00f3n da regra AWS IoT. Imaxe: configuraci\u00f3n da t\u00e1boa DynamoDB. Creaci\u00f3n da regra AWS IoT A regra vai filtrar e formatar os datos das mensaxes de telemetr\u00eda recibidas desde o cami\u00f3n e os vai gravar na t\u00e1boa de DynamoDB. A carga \u00fatil ( payload ) dunha mensaxe cont\u00e9n a seguinte informaci\u00f3n: { \"uptime\": \"43\", \"volts\": \"12.08\", \"temp\": \"15.18\", \"door\": \"0\", \"i\": \"1\", \"n\": \"15\", \"timestamp\": 1721929699.2319772 } A regra vaina converter ao formato seguinte que ser\u00e1 o gravado na t\u00e1boa: { \"temperature\": \"15.18\", \"door\": \"0\" } Na regra vamos usar modelos de substituci\u00f3n , que son expresi\u00f3ns que permiten inserir valores din\u00e1micos de funci\u00f3ns e datos de mensaxes. Para criar a regra AWS IoT fai o seguinte: Abre a consola AWS IoT e dentro do submen\u00fa Roteamento de mensaxes escolle a opci\u00f3n Regras . Crea unha nova regra escollendo Crear regra e indicando as opci\u00f3ns seguintes: Nome da regra: truck2ddb . Lembra po\u00f1er o teu prefixo diante. Usa o caracter de subli\u00f1ado para separalo do nome, xa que non se permiten gui\u00f3ns, p.ex. xcpm2425_truck2ddb . Descrici\u00f3n: pon unha descrici\u00f3n para a regra. Instrucci\u00f3n SQL: SELECT cast(temp AS DECIMAL) AS temperature, cast(door AS BOOLEAN) AS door FROM 'truck/freezer' Nota Esta instrucci\u00f3n selecciona os atributos temp e door das mensaxes recibidas no t\u00f3pico truck/freezer , interpreta os seus valores co tipo de dato que lles corresponde e renomea temp como temperature e door deixao co mesmo nome. Acci\u00f3ns da regra: na acci\u00f3n 1 escolhe DynamoDB . Nos campos que aparecen indica o seguinte: Nome da t\u00e1boa: escolle trucks-data . Chave de partici\u00f3n: insire sample_time . Tipo de chave de partici\u00f3n: escolle N\u00daMERO . Valor da chave de partici\u00f3n: insire ${timestamp()} . Esta expresi\u00f3n usa un modelo de substituci\u00f3n para obt\u00e9r o tempo act\u00faal usando a funci\u00f3n timestamp . Chave de clasificaci\u00f3n: insire device_id . Tipo de chave de clasificaci\u00f3n: escolle N\u00daMERO . Valor da chave de clasificaci\u00f3n: insire ${i} . Note Esta expresi\u00f3n usa un modelo de substituci\u00f3n para tomar o valor do campo i da mensaxe como ID do dispositivo. Unha alternativa com\u00fan \u00e9 que os ID dos dispositivos se incl\u00faan nos nomes dos t\u00f3picos MQTT, p.ex. truck/id/freezer . Nese caso a expresi\u00f3n a usar ser\u00eda: ${cast(topic(2) as DECIMAL)} , que toma o valor do nivel 2 no nome do t\u00f3pico e o convirte a un valor num\u00e9rico. Gravar os datos da mensaxe nesta columna: insire device_data . Iso crear\u00e1 unha columna device_data na t\u00e1boa do DynamoDB para almacenar a mensaxe unha vez procesada pola regra. Rol do IAM: escolle o rol predefinido LabRole . Este rol xa ten os permisos precisos para que a regra env\u00ede os datos \u00e1 t\u00e1boa DynamoDB. Imaxe: configuraci\u00f3n da acci\u00f3n. Proba da regra AWS IoT Para probar o funcionamento da regra fai o seguinte: Nun terminal do ambiente Cloud9 executa o script start.sh . No cliente MQTT da consola de AWS IoT subscr\u00edbete ao t\u00f3pico truck/freezer e comproba que se reciben mensaxes desde o dispositivo IoT. Nunha xanela diferente \u00e1 do cliente MQTT, abre a consola de DynamoDB, e fai o seguinte: Escolle a opci\u00f3n Explorar Items no men\u00fa lateral e selecciona a t\u00e1boa trucks-data . Coa opci\u00f3n Verificar escollida, preme no bot\u00f3n Executar e comproba as entradas que a acci\u00f3n DynamoDB da regra inseriu na t\u00e1boa. Imaxe: entradas inseridas na t\u00e1boa DynamoDB. Preme no valor do sample_time dunha das entradas para abrila no editor de entradas. Desde o editor \u00e9 pos\u00edbel modificar os valores dos atributos da entrada e dos campos da carga \u00fatil da mensaxe, as\u00ed como engadir e eliminar atributos e campos. Imaxe: entrada da t\u00e1boa DynamoDB no editor de entradas. Preme no bot\u00f3n Ver como JSON que est\u00e1 na parte superior dereita para ver a entrada en formato JSON. Na vista JSON activa/desactiva o conmutador para cambiar entre o formato JSON normal e o de DynamoDB. Comproba as diferenzas. Exemplo Por exemplo, a entrada en JSON { \"sample_time\": 1721983656138, \"device_id\": 1, \"device_data\": { \"door\": false, \"temperature\": 21.82 } } ver\u00edase no formato JSON do DynamoDB como { \"sample_time\": { \"N\": \"1721983656138\" }, \"device_id\": { \"N\": \"1\" }, \"device_data\": { \"M\": { \"door\": { \"BOOL\": false }, \"temperature\": { \"N\": \"21.82\" } } } } onde como pode verse, cada valor \u00e9 precedido dunha chave que indica o seu tipo. Para rematar a proba preme Ctrl+C no terminal do ambiente Cloud9 no que estexa a executarse o script start.sh . Xustificaci\u00f3n da actividade Toma as seguintes capturas para a memoria de xustificaci\u00f3n da pr\u00e1ctica: Na consola do DynamoDB as propiedades da t\u00e1boa trucks-data . Na consola IoT as propiedades da regra truck2ddb e os detalles da acci\u00f3n DynamoDB. Ambiente Cloud9 no que se vexa a sa\u00edda do terminal no que se executou o script start.sh . Na consola do DynamoDB o explorador de items no que se vexan as entradas inseridas na t\u00e1boa trucks-data . Importante As capturas te\u00f1en que asemellarse \u00e1s que se tomaron no curso e na pr\u00e1ctica 1. As capturas tomadas na consola AWS te\u00f1en que inclu\u00edr o men\u00fa superior no que poida verse o nome de usuario da conta.","title":"Actividade 2"},{"location":"practica_2/actividade_2/#actividade-2","text":"CREAR UNHA REGRA PARA GARDAR DATOS EN DYNAMODB.","title":"Actividade 2"},{"location":"practica_2/actividade_2/#obxectivo","text":"O obxectivo desta actividade \u00e9 crear unha regra AWS IoT que env\u00ede os datos das mensaxes de telemetr\u00eda recibidas desde o dispositivo IoT (o cami\u00f3n) a unha t\u00e1boa DynamoDB.","title":"Obxectivo"},{"location":"practica_2/actividade_2/#creacion-da-taboa-dynamodb","text":"A t\u00e1boa vai conter os seguintes atributos: sample_time a hora en que a mensaxe foi rexistrada. device_id identificador do cami\u00f3n que transmitiu a mensaxe. device_data contido da mensaxe formatado pola instrucci\u00f3n SQL da regra. Para crear a t\u00e1boa fai o seguinte: Abre a consola de DynamoDB e escolle a opci\u00f3n Crear t\u00e1boa . No asistente de creaci\u00f3n da t\u00e1boa indica as opci\u00f3ns seguintes: Nome da t\u00e1boa: trucks-data . Lembra po\u00f1er o teu prefixo diante, p.ex. xcpm2425-trucks-data . Chave de partici\u00f3n: sample_time de tipo N\u00famero . Chave de clasificaci\u00f3n: device_id de tipo N\u00famero . Nota device_data definirase posteriormente, cando se configure a acci\u00f3n da regra AWS IoT. Imaxe: configuraci\u00f3n da t\u00e1boa DynamoDB.","title":"Creaci\u00f3n da t\u00e1boa DynamoDB"},{"location":"practica_2/actividade_2/#creacion-da-regra-aws-iot","text":"A regra vai filtrar e formatar os datos das mensaxes de telemetr\u00eda recibidas desde o cami\u00f3n e os vai gravar na t\u00e1boa de DynamoDB. A carga \u00fatil ( payload ) dunha mensaxe cont\u00e9n a seguinte informaci\u00f3n: { \"uptime\": \"43\", \"volts\": \"12.08\", \"temp\": \"15.18\", \"door\": \"0\", \"i\": \"1\", \"n\": \"15\", \"timestamp\": 1721929699.2319772 } A regra vaina converter ao formato seguinte que ser\u00e1 o gravado na t\u00e1boa: { \"temperature\": \"15.18\", \"door\": \"0\" } Na regra vamos usar modelos de substituci\u00f3n , que son expresi\u00f3ns que permiten inserir valores din\u00e1micos de funci\u00f3ns e datos de mensaxes. Para criar a regra AWS IoT fai o seguinte: Abre a consola AWS IoT e dentro do submen\u00fa Roteamento de mensaxes escolle a opci\u00f3n Regras . Crea unha nova regra escollendo Crear regra e indicando as opci\u00f3ns seguintes: Nome da regra: truck2ddb . Lembra po\u00f1er o teu prefixo diante. Usa o caracter de subli\u00f1ado para separalo do nome, xa que non se permiten gui\u00f3ns, p.ex. xcpm2425_truck2ddb . Descrici\u00f3n: pon unha descrici\u00f3n para a regra. Instrucci\u00f3n SQL: SELECT cast(temp AS DECIMAL) AS temperature, cast(door AS BOOLEAN) AS door FROM 'truck/freezer' Nota Esta instrucci\u00f3n selecciona os atributos temp e door das mensaxes recibidas no t\u00f3pico truck/freezer , interpreta os seus valores co tipo de dato que lles corresponde e renomea temp como temperature e door deixao co mesmo nome. Acci\u00f3ns da regra: na acci\u00f3n 1 escolhe DynamoDB . Nos campos que aparecen indica o seguinte: Nome da t\u00e1boa: escolle trucks-data . Chave de partici\u00f3n: insire sample_time . Tipo de chave de partici\u00f3n: escolle N\u00daMERO . Valor da chave de partici\u00f3n: insire ${timestamp()} . Esta expresi\u00f3n usa un modelo de substituci\u00f3n para obt\u00e9r o tempo act\u00faal usando a funci\u00f3n timestamp . Chave de clasificaci\u00f3n: insire device_id . Tipo de chave de clasificaci\u00f3n: escolle N\u00daMERO . Valor da chave de clasificaci\u00f3n: insire ${i} . Note Esta expresi\u00f3n usa un modelo de substituci\u00f3n para tomar o valor do campo i da mensaxe como ID do dispositivo. Unha alternativa com\u00fan \u00e9 que os ID dos dispositivos se incl\u00faan nos nomes dos t\u00f3picos MQTT, p.ex. truck/id/freezer . Nese caso a expresi\u00f3n a usar ser\u00eda: ${cast(topic(2) as DECIMAL)} , que toma o valor do nivel 2 no nome do t\u00f3pico e o convirte a un valor num\u00e9rico. Gravar os datos da mensaxe nesta columna: insire device_data . Iso crear\u00e1 unha columna device_data na t\u00e1boa do DynamoDB para almacenar a mensaxe unha vez procesada pola regra. Rol do IAM: escolle o rol predefinido LabRole . Este rol xa ten os permisos precisos para que a regra env\u00ede os datos \u00e1 t\u00e1boa DynamoDB. Imaxe: configuraci\u00f3n da acci\u00f3n.","title":"Creaci\u00f3n da regra AWS IoT"},{"location":"practica_2/actividade_2/#proba-da-regra-aws-iot","text":"Para probar o funcionamento da regra fai o seguinte: Nun terminal do ambiente Cloud9 executa o script start.sh . No cliente MQTT da consola de AWS IoT subscr\u00edbete ao t\u00f3pico truck/freezer e comproba que se reciben mensaxes desde o dispositivo IoT. Nunha xanela diferente \u00e1 do cliente MQTT, abre a consola de DynamoDB, e fai o seguinte: Escolle a opci\u00f3n Explorar Items no men\u00fa lateral e selecciona a t\u00e1boa trucks-data . Coa opci\u00f3n Verificar escollida, preme no bot\u00f3n Executar e comproba as entradas que a acci\u00f3n DynamoDB da regra inseriu na t\u00e1boa. Imaxe: entradas inseridas na t\u00e1boa DynamoDB. Preme no valor do sample_time dunha das entradas para abrila no editor de entradas. Desde o editor \u00e9 pos\u00edbel modificar os valores dos atributos da entrada e dos campos da carga \u00fatil da mensaxe, as\u00ed como engadir e eliminar atributos e campos. Imaxe: entrada da t\u00e1boa DynamoDB no editor de entradas. Preme no bot\u00f3n Ver como JSON que est\u00e1 na parte superior dereita para ver a entrada en formato JSON. Na vista JSON activa/desactiva o conmutador para cambiar entre o formato JSON normal e o de DynamoDB. Comproba as diferenzas. Exemplo Por exemplo, a entrada en JSON { \"sample_time\": 1721983656138, \"device_id\": 1, \"device_data\": { \"door\": false, \"temperature\": 21.82 } } ver\u00edase no formato JSON do DynamoDB como { \"sample_time\": { \"N\": \"1721983656138\" }, \"device_id\": { \"N\": \"1\" }, \"device_data\": { \"M\": { \"door\": { \"BOOL\": false }, \"temperature\": { \"N\": \"21.82\" } } } } onde como pode verse, cada valor \u00e9 precedido dunha chave que indica o seu tipo. Para rematar a proba preme Ctrl+C no terminal do ambiente Cloud9 no que estexa a executarse o script start.sh .","title":"Proba da regra AWS IoT"},{"location":"practica_2/actividade_2/#xustificacion-da-actividade","text":"Toma as seguintes capturas para a memoria de xustificaci\u00f3n da pr\u00e1ctica: Na consola do DynamoDB as propiedades da t\u00e1boa trucks-data . Na consola IoT as propiedades da regra truck2ddb e os detalles da acci\u00f3n DynamoDB. Ambiente Cloud9 no que se vexa a sa\u00edda do terminal no que se executou o script start.sh . Na consola do DynamoDB o explorador de items no que se vexan as entradas inseridas na t\u00e1boa trucks-data . Importante As capturas te\u00f1en que asemellarse \u00e1s que se tomaron no curso e na pr\u00e1ctica 1. As capturas tomadas na consola AWS te\u00f1en que inclu\u00edr o men\u00fa superior no que poida verse o nome de usuario da conta.","title":"Xustificaci\u00f3n da actividade"},{"location":"practica_2/actividade_3/","text":"Actividade 3 CREAR UNHA REGRA PARA ENVIAR NOTIFICACI\u00d3NS SNS. Obxectivo O obxectivo desta actividade \u00e9 crear unha regra AWS IoT que env\u00ede os datos das mensaxes de telemetr\u00eda recibidas desde o dispositivo IoT (o cami\u00f3n) a un t\u00f3pico do SNS para que podan ser enviados como unha mensaxe de correo electr\u00f3nico. Nota SNS pode enviar notificaci\u00f3ns a otros tipos de destinos, como p.ex. notificaci\u00f3ns PUSH ou SMS a m\u00f3beis. Nesta actividade usamos o correo para evitar pos\u00edbeis cargos na factura do tel\u00e9fono. Creaci\u00f3n do t\u00f3pico SNS Para crear un t\u00f3pico do SNS fai o seguinte: Abre a consola de SNS e escolle a opci\u00f3n T\u00f3picos no men\u00fa lateral. Crea un novo t\u00f3pico escollendo Crear t\u00f3pico e indicando as opci\u00f3ns seguintes: Detalles: escolle o tipo Est\u00e1ndar . Nome: high-temp-alert . Lembra po\u00f1er o teu prefixo diante. Crea unha subscrici\u00f3n SNS escollendo Crear subscrici\u00f3n na aba Subscrici\u00f3ns das propiedades do t\u00f3pico high_temp_alert e indicando as opci\u00f3ns seguintes: Protocolo: escolle E-mail . Endpoint: insire o teu enderezo de correo electr\u00f3nico. Imaxe: configuraci\u00f3n da subscrici\u00f3n SNS. Confirma a subscrici\u00f3n premendo na ligaz\u00f3n do correo que recibir\u00e1s no enderezo que indicaches. Imaxe: correo de confirmaci\u00f3n da subscrici\u00f3n SNS. Nota Unha vez confirmes a subscrici\u00f3n, nas propiedades da subscrici\u00f3n o estado aparecer\u00e1 como Confirmado . Para comprobar que a notificaci\u00f3n ao t\u00f3pico SNS funciona, nas propiedades do t\u00f3pico high-temp-alert escolle Publicar mensaxe e publica unha mensaxe indicando as opci\u00f3ns seguintes: Asunto: Probando Corpo da mensaxe: insire a mensaxe que queiras enviar. Comproba que recibes a mensaxe no enderezo de correo que indicaches. Creaci\u00f3n da regra AWS IoT A regra vai filtrar as mensaxes nas que a temperatura non exceda un valor l\u00edmite. Cando a temperatura sexa superior a ese valor, crear\u00e1 unha nova mensaxe cunha carga \u00fatil que s\u00f3 conte\u00f1a o ID do dispositivo, a temperatura e o l\u00edmite que foi excedido e enviaraa ao t\u00f3pico SNS. Por exemplo, se o valor l\u00edmite \u00e9 20 e a carga \u00fatil dunha mensaxe cont\u00e9n a seguinte informaci\u00f3n: { \"uptime\": \"43\", \"volts\": \"12.08\", \"temp\": \"21.18\", \"door\": \"0\", \"i\": \"1\", \"n\": \"15\", \"timestamp\": 1721929699.2319772 } A regra vaina converter ao formato seguinte, que ser\u00e1 o enviado para o t\u00f3pico SNS: { \"device\": \"1\", \"temperature\": \"21.18\", \"temperature_max\": \"20\" } Para criar a regra AWS IoT fai o seguinte: Abre a consola AWS IoT e dentro do submen\u00fa Roteamento de mensaxes escolle a opci\u00f3n Regras . Crea unha nova regra escollendo Crear regra e indicando as opci\u00f3ns seguintes: Nome da regra: truck2sns . Lembra po\u00f1er o teu prefixo diante. Usa o caracter de subli\u00f1ado para separalo do nome, xa que non se permiten gui\u00f3ns, p.ex. xcpm2425_truck2sns . Descrici\u00f3n: pon unha descrici\u00f3n para a regra. Instrucci\u00f3n SQL: SELECT i AS device, temp AS temperature, 20 AS temperature_max FROM 'truck/freezer' WHERE temp > 20 Nota Esta instrucci\u00f3n selecciona os atributos i e temp das mensaxes recibidas no t\u00f3pico truck/freezer que cumpren a condici\u00f3n temp > 20 , engade o atributo temperature_max con valor 20 e renomea i como device e temp como temperature . Acci\u00f3ns da regra: na acci\u00f3n 1 escolhe Simple Notification Service (SNS) . Nos campos que aparecen indica o seguinte: T\u00f3pico do SNS: escolle o ARN ( Amazon Resource Name ) do t\u00f3pico high_temp_alert . Rol do IAM: escolle o rol predefinido LabRole . Este rol xa ten os permisos precisos para que a regra env\u00ede os datos ao t\u00f3pico SNS. Imaxe: configuraci\u00f3n da acci\u00f3n. Proba da regra AWS IoT Nota Podes variar o comportamento da proba editando as temperaturas no ficheiro /home/ec2-user/environment/data/trucksensordata.csv no ambiente Cloud9. Para probar o funcionamento da regra fai o seguinte: Nun terminal do ambiente Cloud9 executa o script start.sh . No cliente MQTT da consola de AWS IoT subscr\u00edbete ao t\u00f3pico truck/freezer e comproba que se reciben mensaxes desde o dispositivo IoT. Comproba que para todas as mensaxes nas que a temperatura supera o l\u00edmite recibes unha notificaci\u00f3n no enderezo de correo que indicaches. Imaxe: exemplo de correo de notificaci\u00f3n. Para rematar a proba preme Ctrl+C no terminal do ambiente Cloud9 no que estexa a executarse o script start.sh . Xustificaci\u00f3n da actividade Toma as seguintes capturas para a memoria de xustificaci\u00f3n da pr\u00e1ctica: Na consola do SNS as propiedades do t\u00f3pico high-temp-alert coa aba Subscrici\u00f3ns escollida na que poida verse a subscrici\u00f3n ao enderezo de correo en estado confirmado. O correo recibido para comprobar que a notificaci\u00f3n ao t\u00f3pico high-temp-alert funciona. Na consola IoT as propiedades da regra truck2sns e os detalles da acci\u00f3n SNS. Un dos correos de notificaci\u00f3n recibidos cando a temperatura supera o l\u00edmite. Importante As capturas te\u00f1en que asemellarse \u00e1s que se tomaron no curso e na pr\u00e1ctica 1. As capturas tomadas na consola AWS te\u00f1en que inclu\u00edr o men\u00fa superior no que poida verse o nome de usuario da conta.","title":"Actividade 3"},{"location":"practica_2/actividade_3/#actividade-3","text":"CREAR UNHA REGRA PARA ENVIAR NOTIFICACI\u00d3NS SNS.","title":"Actividade 3"},{"location":"practica_2/actividade_3/#obxectivo","text":"O obxectivo desta actividade \u00e9 crear unha regra AWS IoT que env\u00ede os datos das mensaxes de telemetr\u00eda recibidas desde o dispositivo IoT (o cami\u00f3n) a un t\u00f3pico do SNS para que podan ser enviados como unha mensaxe de correo electr\u00f3nico. Nota SNS pode enviar notificaci\u00f3ns a otros tipos de destinos, como p.ex. notificaci\u00f3ns PUSH ou SMS a m\u00f3beis. Nesta actividade usamos o correo para evitar pos\u00edbeis cargos na factura do tel\u00e9fono.","title":"Obxectivo"},{"location":"practica_2/actividade_3/#creacion-do-topico-sns","text":"Para crear un t\u00f3pico do SNS fai o seguinte: Abre a consola de SNS e escolle a opci\u00f3n T\u00f3picos no men\u00fa lateral. Crea un novo t\u00f3pico escollendo Crear t\u00f3pico e indicando as opci\u00f3ns seguintes: Detalles: escolle o tipo Est\u00e1ndar . Nome: high-temp-alert . Lembra po\u00f1er o teu prefixo diante. Crea unha subscrici\u00f3n SNS escollendo Crear subscrici\u00f3n na aba Subscrici\u00f3ns das propiedades do t\u00f3pico high_temp_alert e indicando as opci\u00f3ns seguintes: Protocolo: escolle E-mail . Endpoint: insire o teu enderezo de correo electr\u00f3nico. Imaxe: configuraci\u00f3n da subscrici\u00f3n SNS. Confirma a subscrici\u00f3n premendo na ligaz\u00f3n do correo que recibir\u00e1s no enderezo que indicaches. Imaxe: correo de confirmaci\u00f3n da subscrici\u00f3n SNS. Nota Unha vez confirmes a subscrici\u00f3n, nas propiedades da subscrici\u00f3n o estado aparecer\u00e1 como Confirmado . Para comprobar que a notificaci\u00f3n ao t\u00f3pico SNS funciona, nas propiedades do t\u00f3pico high-temp-alert escolle Publicar mensaxe e publica unha mensaxe indicando as opci\u00f3ns seguintes: Asunto: Probando Corpo da mensaxe: insire a mensaxe que queiras enviar. Comproba que recibes a mensaxe no enderezo de correo que indicaches.","title":"Creaci\u00f3n do t\u00f3pico SNS"},{"location":"practica_2/actividade_3/#creacion-da-regra-aws-iot","text":"A regra vai filtrar as mensaxes nas que a temperatura non exceda un valor l\u00edmite. Cando a temperatura sexa superior a ese valor, crear\u00e1 unha nova mensaxe cunha carga \u00fatil que s\u00f3 conte\u00f1a o ID do dispositivo, a temperatura e o l\u00edmite que foi excedido e enviaraa ao t\u00f3pico SNS. Por exemplo, se o valor l\u00edmite \u00e9 20 e a carga \u00fatil dunha mensaxe cont\u00e9n a seguinte informaci\u00f3n: { \"uptime\": \"43\", \"volts\": \"12.08\", \"temp\": \"21.18\", \"door\": \"0\", \"i\": \"1\", \"n\": \"15\", \"timestamp\": 1721929699.2319772 } A regra vaina converter ao formato seguinte, que ser\u00e1 o enviado para o t\u00f3pico SNS: { \"device\": \"1\", \"temperature\": \"21.18\", \"temperature_max\": \"20\" } Para criar a regra AWS IoT fai o seguinte: Abre a consola AWS IoT e dentro do submen\u00fa Roteamento de mensaxes escolle a opci\u00f3n Regras . Crea unha nova regra escollendo Crear regra e indicando as opci\u00f3ns seguintes: Nome da regra: truck2sns . Lembra po\u00f1er o teu prefixo diante. Usa o caracter de subli\u00f1ado para separalo do nome, xa que non se permiten gui\u00f3ns, p.ex. xcpm2425_truck2sns . Descrici\u00f3n: pon unha descrici\u00f3n para a regra. Instrucci\u00f3n SQL: SELECT i AS device, temp AS temperature, 20 AS temperature_max FROM 'truck/freezer' WHERE temp > 20 Nota Esta instrucci\u00f3n selecciona os atributos i e temp das mensaxes recibidas no t\u00f3pico truck/freezer que cumpren a condici\u00f3n temp > 20 , engade o atributo temperature_max con valor 20 e renomea i como device e temp como temperature . Acci\u00f3ns da regra: na acci\u00f3n 1 escolhe Simple Notification Service (SNS) . Nos campos que aparecen indica o seguinte: T\u00f3pico do SNS: escolle o ARN ( Amazon Resource Name ) do t\u00f3pico high_temp_alert . Rol do IAM: escolle o rol predefinido LabRole . Este rol xa ten os permisos precisos para que a regra env\u00ede os datos ao t\u00f3pico SNS. Imaxe: configuraci\u00f3n da acci\u00f3n.","title":"Creaci\u00f3n da regra AWS IoT"},{"location":"practica_2/actividade_3/#proba-da-regra-aws-iot","text":"Nota Podes variar o comportamento da proba editando as temperaturas no ficheiro /home/ec2-user/environment/data/trucksensordata.csv no ambiente Cloud9. Para probar o funcionamento da regra fai o seguinte: Nun terminal do ambiente Cloud9 executa o script start.sh . No cliente MQTT da consola de AWS IoT subscr\u00edbete ao t\u00f3pico truck/freezer e comproba que se reciben mensaxes desde o dispositivo IoT. Comproba que para todas as mensaxes nas que a temperatura supera o l\u00edmite recibes unha notificaci\u00f3n no enderezo de correo que indicaches. Imaxe: exemplo de correo de notificaci\u00f3n. Para rematar a proba preme Ctrl+C no terminal do ambiente Cloud9 no que estexa a executarse o script start.sh .","title":"Proba da regra AWS IoT"},{"location":"practica_2/actividade_3/#xustificacion-da-actividade","text":"Toma as seguintes capturas para a memoria de xustificaci\u00f3n da pr\u00e1ctica: Na consola do SNS as propiedades do t\u00f3pico high-temp-alert coa aba Subscrici\u00f3ns escollida na que poida verse a subscrici\u00f3n ao enderezo de correo en estado confirmado. O correo recibido para comprobar que a notificaci\u00f3n ao t\u00f3pico high-temp-alert funciona. Na consola IoT as propiedades da regra truck2sns e os detalles da acci\u00f3n SNS. Un dos correos de notificaci\u00f3n recibidos cando a temperatura supera o l\u00edmite. Importante As capturas te\u00f1en que asemellarse \u00e1s que se tomaron no curso e na pr\u00e1ctica 1. As capturas tomadas na consola AWS te\u00f1en que inclu\u00edr o men\u00fa superior no que poida verse o nome de usuario da conta.","title":"Xustificaci\u00f3n da actividade"},{"location":"practica_2/actividade_4/","text":"Actividade 4 EXECUTAR O EXEMPLO DE SOMBRAS DE DISPOSITIVO DA DEVICE SDK V2. Obxectivo O obxectivo desta actividade \u00e9 probar un dos exemplos que ve\u00f1en coa versi\u00f3n 2 do Device SDK. O exemplo que vamos a probar utiliza o servizo AWS IoT Device Shadow para manter o valor dunha propiedade sincronizado entre o dispositivo IoT e o servidor. Nota Podes ver aqu\u00ed a documentaci\u00f3n do exemplo. Creaci\u00f3n da sombra de dispositivo Para crear unha sombra de dispositivo fai o seguinte: Abre a consola AWS IoT e no men\u00fa lateral, dentro do submen\u00fa Todos os dispositivos , escolle a opci\u00f3n Cousas . Abre as propiedades da cousa truckSensor01 e na aba Sombras de dispositivo escolle Crear sombra de dispositivo . Escolle o tipo Sombra sen nome (cl\u00e1sico) e acepta para crear a sombra. Imaxe: sombra do dispositivo truckSensor01 . Configuraci\u00f3n do exemplo Para configurar o exemplo fai o seguinte: No directorio de scripts do ambiente Cloud9, crea un script shadow.sh para executar o exemplo. Vamos a controlar a trav\u00e9s da sombra o valor da propiedade door do cami\u00f3n. Nomenclatura Lembra usar o teu prefixo no nome da cousa. $ cd ~/environment/scripts $ nano shadow.sh $ cat shadow.sh #!/usr/bin/env bash # stop script on error set -e # set the thing name thing=xcpm2425-truckSensor01 # get the MQTT5-compatible AWS IoT endpoint aws iot describe-endpoint \\ --endpoint-type iot:Data-ATS > /tmp/iotendpoint.json iot_endpoint=$(jq -r \".endpointAddress\" /tmp/iotendpoint.json) # run shadow MQTT5 sample app printf \"\\nRunning MQTT5 device shadow sample application with $thing thing...\\n\" python3 ./aws-iot-device-sdk-python-v2/samples/shadow_mqtt5.py \\ --endpoint $iot_endpoint \\ --ca_file ../certs/root-CA1.crt \\ --cert ../certs/$thing.cert.pem \\ --key ../certs/$thing.private.key \\ --thing_name $thing \\ --shadow_property door $ Edita a pol\u00edtica AWS IoT da cousa truckSensor01 para permitir a subscrici\u00f3n aos t\u00f3picos da sombra e publicar e recibir mensaxes neles. OLLO Lembra usar o ID da t\u00faa conta nos ARN ( Amazon Resource Name ) dos recursos. Imaxe: pol\u00edtica AWS IoT modificada. Importante Antes de continuar toma as capturas 1 a 3 que se piden para xustificar a actividade . Proba do exemplo Estado inicial da sombra Para configurar o estado inicial da sombra fai o seguinte: Nas propiedades da cousa truckSensor01 , escolle a aba Sombras de dispositivo e abre as propiedades da sombra premendo no seu nome. Na aba Documento da sombra de dispositivo das propiedades da sombra podes consultar o estado inicial da sombra. Imaxe: estado inicial da sombra. Nota Polo dagora a propiedade door non forma parte do estado da sombra. Na aba T\u00f3picos MQTT das propiedades da sombra escolle Cliente de proba MQTT para abrir unha nova xanela do cliente MQTT con subscrici\u00f3ns xa configuradas aos t\u00f3picos da sombra. Imaxe: cliente de proba MQTT con subscrici\u00f3ns aos t\u00f3picos da sombra. Executa o exemplo no directorio de scripts . $ pwd /home/ec2-user/environment/scripts $ chmod +x shadow.sh $ ./shadow.sh O script fai o seguinte: Con\u00e9ctase aos t\u00f3picos da sombra. Consulta o estado da sombra para co\u00f1ecer que valor ten a propiedade door . Como a propiedade non existe, inicializa a propiedade door ao valor por defecto off e solicita a actualizaci\u00f3n do estado da sombra informando do valor actual da propiedade door . Queda agardando a que se insira un novo valor para a propiedade. Imaxe: saida da execuci\u00f3n do script shadow.sh . Comproba no cliente MQTT as mensaxes intercambiadas nos t\u00f3picos da sombra. Haber\u00e1 3 t\u00f3picos que conte\u00f1an mensaxes. Imaxe: t\u00f3picos da sombra nos que se recibiron mensaxes. Comproba as mensaxes en cada t\u00f3pico: $aws/things/truckSensor01/shadow/get/accepted : a consulta inicial do estado da sombra. { \"state\": { \"desired\": { \"welcome\": \"aws-iot\" }, \"reported\": { \"welcome\": \"aws-iot\" } }, \"metadata\": { \"desired\": { \"welcome\": { \"timestamp\": 1722081284 } }, \"reported\": { \"welcome\": { \"timestamp\": 1722081284 } } }, \"version\": 10, \"timestamp\": 1722081623, \"clientToken\": \"8e24e173-99d3-40bc-8613-e86973df4255\" } $aws/things/truckSensor01/shadow/update/accepted : a solicitude de actualizaci\u00f3n do estado da sombra. { \"state\": { \"desired\": { \"door\": \"off\" }, \"reported\": { \"door\": \"off\" } }, \"metadata\": { \"desired\": { \"door\": { \"timestamp\": 1722081623 } }, \"reported\": { \"door\": { \"timestamp\": 1722081623 } } }, \"version\": 11, \"timestamp\": 1722081623, \"clientToken\": \"eebdd795-9d62-46ab-83af-a858527ae0a2\" } $aws/things/truckSensor01/shadow/update/documents : a actualizaci\u00f3n do estado, que agora pasa a conter a propiedade door co valor informado polo dispositivo IoT. { \"previous\": { \"state\": { \"desired\": { \"welcome\": \"aws-iot\" }, \"reported\": { \"welcome\": \"aws-iot\" } }, \"metadata\": { \"desired\": { \"welcome\": { \"timestamp\": 1722081284 } }, \"reported\": { \"welcome\": { \"timestamp\": 1722081284 } } }, \"version\": 10 }, \"current\": { \"state\": { \"desired\": { \"welcome\": \"aws-iot\", \"door\": \"off\" }, \"reported\": { \"welcome\": \"aws-iot\", \"door\": \"off\" } }, \"metadata\": { \"desired\": { \"welcome\": { \"timestamp\": 1722081284 }, \"door\": { \"timestamp\": 1722081623 } }, \"reported\": { \"welcome\": { \"timestamp\": 1722081284 }, \"door\": { \"timestamp\": 1722081623 } } }, \"version\": 11 }, \"timestamp\": 1722081623, \"clientToken\": \"eebdd795-9d62-46ab-83af-a858527ae0a2\" } Nas propiedades da sombra, actualiza as propiedades e comproba como se fixeron efectivos os cambios no documento de estado. Imaxe: estado actualizado da sombra no que xa aparece a propiedade door . Importante Antes de continuar toma as capturas 4 e 5 que se piden para xustificar a actividade . Cambio de estado no dispositivo IoT Para cambiar o estado no dispositivo IoT fai o seguinte: No terminal do ambiente Cloud9 no que est\u00e1 a se executar o script shadow.sh escribe o valor on . Imaxe: cambio do valor no terminal do script shadow.sh . Comproba no cliente MQTT as mensaxes recibidas nos t\u00f3picos da sombra. Haber\u00e1 2 t\u00f3picos que conte\u00f1an mensaxes: $aws/things/truckSensor01/shadow/update/accepted coa solicitude de actualizaci\u00f3n do estado da sombra. $aws/things/truckSensor01/shadow/update/documents coa actualizaci\u00f3n do estado. Nas propiedades da sombra, actualiza as propiedades e comproba como se fixeron efectivos os cambios no documento de estado. Proba agora a volver a escribir o valor on no terminal do ambiente Cloud9 no que est\u00e1 a se executar o script shadow.sh . Comproba que agora non se env\u00eda ningunha mensaxe para solicitar unha actualizaci\u00f3n do estado da sombra. Importante Antes de continuar toma as capturas 6 e 7 que se piden para xustificar a actividade . Cambio de estado na sombra co dispositivo IoT conectado Para cambiar o estado da sombra co dispositivo IoT conectado fai o seguinte: Aseg\u00farate de que o script shadow.sh estexa a se executar no ambiente Cloud9. No cliente MQTT publica no t\u00f3pico $aws/things/truckSensor01/shadow/update a mensaxe seguinte: { \"state\": { \"desired\": { \"door\": \"off\" } } } Imaxe: cliente MQTT configurado para publicar unha mensaxe no t\u00f3pico update da sombra. Comproba no cliente MQTT as mensaxes recibidas nos t\u00f3picos da sombra. Nota Se a actualizaci\u00f3n fallou haber\u00e1 unha mensaxe no t\u00f3pico $aws/things/truckSensor01/shadow/update/rejected indicando a causa. Se a actualizaci\u00f3n se fixo correctamente haber\u00e1 3 t\u00f3picos que conte\u00f1an mensaxes: No t\u00f3pico $aws/things/truckSensor01/shadow/update/accepted publicaronse 2 mensaxes. A pen\u00faltima das mensaxes \u00e9 a solicitude de actualizaci\u00f3n do estado da sombra realizada desde o cliente MQTT. O servizo Device shadow incrementou o n\u00famero de versi\u00f3n e adicionou os valores de timestamp e os metadatos. A procedencia da \u00faltima mensaxe publicada expl\u00edcase m\u00e1is adiante. { \"state\": { \"desired\": { \"door\": \"off\" } }, \"metadata\": { \"desired\": { \"door\": { \"timestamp\": 1722097906 } } }, \"version\": 17, \"timestamp\": 1722097906 } No t\u00f3pico $aws/things/truckSensor01/shadow/update/delta publicouse unha mensaxe coas diferenzas entre os estados desired da solicitude e reported do estado actual. Esta mensaxe ser\u00e1 notificada, como veremos m\u00e1is adiante, ao dispositivo IoT que est\u00e1 subscrito a este t\u00f3pico. { \"version\": 17, \"timestamp\": 1722097906, \"state\": { \"door\": \"off\" }, \"metadata\": { \"door\": { \"timestamp\": 1722097906 } } } No t\u00f3pico $aws/things/truckSensor01/shadow/update/documents publicaronse 2 mensaxes. A pen\u00faltima das mensaxes \u00e9 a actualizaci\u00f3n do estado. A procedencia da \u00faltima mensaxe publicada no t\u00f3pico expl\u00edcase m\u00e1is adiante. { \"previous\": { \"state\": { \"desired\": { \"door\": \"on\" }, \"reported\": { \"welcome\": \"aws-iot\", \"door\": \"on\" } }, \"metadata\": { \"desired\": { \"door\": { \"timestamp\": 1722097793 } }, \"reported\": { \"welcome\": { \"timestamp\": 1722081284 }, \"door\": { \"timestamp\": 1722097793 } } }, \"version\": 16 }, \"current\": { \"state\": { \"desired\": { \"door\": \"off\" }, \"reported\": { \"welcome\": \"aws-iot\", \"door\": \"on\" } }, \"metadata\": { \"desired\": { \"door\": { \"timestamp\": 1722097906 } }, \"reported\": { \"welcome\": { \"timestamp\": 1722081284 }, \"door\": { \"timestamp\": 1722097793 } } }, \"version\": 17 }, \"timestamp\": 1722097906 } Comproba o que aconteceu no terminal do ambiente Cloud9 no que est\u00e1 a se executar o script shadow.sh . Imaxe: resposta no terminal do script shadow.sh ao cambio de estado da sombra. O que podemos ver na sa\u00edda do terminal \u00e9 o seguinte: O dispositivo IoT ignora a mensaxe que se publicou desde o cliente MQTT no t\u00f3pico $aws/.../update/accepted porque non cont\u00e9n un campo clientToken e, polo tanto, non se corresponde con ningunha solicitude feita desde o dispositivo. O dispositivo IoT recibe a notificaci\u00f3n da mensaxe publicada no t\u00f3pico $aws/.../update/delta , e comproba que o valor desexado da propiedade \u00e9 diferente ao valor local. O dispositivo IoT actualiza o valor local da sombra e notifica a actualizaci\u00f3n publicando unha mensaxe no t\u00f3pico $aws/../update . A mensaxe publicada polo dispositivo \u00e9 procesada polo servizo AWS IoT Device shadow que publica unha mensaxe de aceptaci\u00f3n da actualizaci\u00f3n no t\u00f3pico $aws/.../update/accepted e outra co documento de cambio de estado da sombra no t\u00f3pico $aws/.../update/documents . Comproba que esas mensaxes son as \u00faltimas publicadas nos correspondentes t\u00f3picos e que, a diferenza das que vimos no punto anterior publicadas en resposta \u00e1 actualizaci\u00f3n de estado desde o cliente MQTT, estas si que usan o campo clientToken , que permite identificar a(s) resposta(s) que corresponden a unha solicitude. Por exemplo, no t\u00f3pico $aws/.../update/accepted a mensaxe ser\u00eda: { \"state\": { \"desired\": { \"door\": \"off\" }, \"reported\": { \"door\": \"off\" } }, \"metadata\": { \"desired\": { \"door\": { \"timestamp\": 1722097906 } }, \"reported\": { \"door\": { \"timestamp\": 1722097906 } } }, \"version\": 18, \"timestamp\": 1722097906, \"clientToken\": \"3ef97007-db6c-46b6-87ea-1d9cbdf766a1\" } Nas propiedades da sombra, actualiza as propiedades e comproba os cambios no documento de estado. Importante Antes de continuar toma as capturas 8 e 9 que se piden para xustificar a actividade . Cambio de estado na sombra co dispositivo IoT desconectado Para cambiar o estado da sombra co dispositivo IoT desconectado fai o seguinte: No terminal do ambiente Cloud9 no que est\u00e1 a se executar o script shadow.sh escribe exit ou quit para parar a execuci\u00f3n do script . No cliente MQTT publica no t\u00f3pico $aws/things/truckSensor01/shadow/update a mensaxe seguinte: { \"state\": { \"desired\": { \"door\": \"on\" } } } Repite o paso previo varias veces, cambiando o valor de door a on ou off (tam\u00e9n podes repetir valor). Comproba as mensaxes que se publican nos t\u00f3picos $aws/.../update/accepted , $aws/.../update/delta e $aws/.../update/documents cada vez que publiques. Repite o paso 2 co valor de door a on . Nas propiedades da sombra, actualiza as propiedades e comproba os cambios no documento de estado. Comproba que aparece un campo delta no estado que indica a diferenza entre os estados desired e reported . { \"state\": { \"desired\": { \"door\": \"on\" }, \"reported\": { \"welcome\": \"aws-iot\", \"door\": \"off\" }, \"delta\": { \"door\": \"on\" } } } Importante Antes de continuar toma a captura 10 que se pide para xustificar a actividade . Repite o paso 2 co valor de door a off . Nas propiedades da sombra, actualiza as propiedades e comproba os cambios no documento de estado. Comproba que o campo delta xa non aparece no estado. { \"state\": { \"desired\": { \"door\": \"off\" }, \"reported\": { \"welcome\": \"aws-iot\", \"door\": \"off\" } } } No ambiente Cloud9 executa o script shadow.sh . Ao coincidir o estado da sombra co \u00faltimo valor da propiedade no dispositivo este non inicia ningunha actualizaci\u00f3n. Imaxe: saida do script shadow.sh cando o estado da sombra coincide co do dispositivo. Importante Antes de continuar toma a captura 11 que se pide para xustificar a actividade . No terminal escribe exit ou quit para parar a execuci\u00f3n do script . Repite o paso 2 co valor de door a on . Executa de novo o script shadow.sh . O dispositivo solicita o estado actual da sombra publicando unha mensaxe no t\u00f3pico $aws/.../get e comproba que cont\u00e9n un campo delta , o que lle indica que o estado da sombra mudou mentres estivo desconectado. Ao non haber coincidencia entre o estado da sombra e o do dispositivo, este realiza unha actualizaci\u00f3n do estado local e a notifica publicando unha mensaxe no t\u00f3pico $aws/.../update . Imaxe: saida do script shadow.sh cando o estado da sombra \u00e9 diferente ao do dispositivo. Importante Antes de continuar toma a captura 12 que se pide para xustificar a actividade . Comproba no cliente MQTT as mensaxes recibidas nos t\u00f3picos da sombra. Comproba o estado da sombra nas propiedades da sombra na consola AWS IoT. Importante Non esquezas tomar a captura 13, a \u00faltima que se pide para xustificar a actividade . Xustificaci\u00f3n da actividade Resume das capturas que hai que tomar para a memoria de xustificaci\u00f3n da pr\u00e1ctica. Importante As capturas te\u00f1en que asemellarse \u00e1s que se tomaron no curso e na pr\u00e1ctica 1. As capturas tomadas na consola AWS te\u00f1en que inclu\u00edr o men\u00fa superior no que poida verse o nome de usuario da conta. Creaci\u00f3n da sombra de dispositivo Na consola IoT as propiedades da cousa truckSensor01 coa aba Sombras de dispositivo escollida na que poida verse a sombra. Configuraci\u00f3n do exemplo Ambiente Cloud9 co c\u00f3digo do script shadow.sh aberto nun terminal. Propiedades da pol\u00edtica AWS IoT modificada. Proba do exemplo Estado inicial da sombra Ambiente Cloud9 coa sa\u00edda do terminal na que se executou o script shadow.sh . Consola IoT coas propiedades da sombra da cousa truckSensor01 na que poida verse o estado modificado. Cambio de estado no dispositivo IoT Cliente MQTT na consola IoT na que se vexa o contido da mensaxe recibida no t\u00f3pico $aws/things/truckSensor01/shadow/update/documents . Consola IoT coas propiedades da sombra da cousa truckSensor01 na que poida verse o estado modificado. Cambio de estado na sombra co dispositivo IoT conectado Cliente MQTT na consola IoT na que se vexa o contido das d\u00faas \u00faltimas mensaxes recibidas no t\u00f3pico $aws/things/truckSensor01/shadow/update/accepted . Consola IoT coas propiedades da sombra da cousa truckSensor01 na que poida verse o estado modificado. Cambio de estado na sombra co dispositivo IoT desconectado Consola IoT coas propiedades da sombra da cousa truckSensor01 na que poida verse o estado contendo un campo delta . Ambiente Cloud9 coa sa\u00edda do terminal na que se executou o script shadow.sh cando o estado da sombra coincide co do dispositivo. Ambiente Cloud9 coa sa\u00edda do terminal na que se executou o script shadow.sh cando o estado da sombra \u00e9 diferente ao do dispositivo. Cliente MQTT na consola IoT na que se vexa o contido das d\u00faas \u00faltimas mensaxes recibidas no t\u00f3pico $aws/things/truckSensor01/shadow/update/delta .","title":"Actividade 4"},{"location":"practica_2/actividade_4/#actividade-4","text":"EXECUTAR O EXEMPLO DE SOMBRAS DE DISPOSITIVO DA DEVICE SDK V2.","title":"Actividade 4"},{"location":"practica_2/actividade_4/#obxectivo","text":"O obxectivo desta actividade \u00e9 probar un dos exemplos que ve\u00f1en coa versi\u00f3n 2 do Device SDK. O exemplo que vamos a probar utiliza o servizo AWS IoT Device Shadow para manter o valor dunha propiedade sincronizado entre o dispositivo IoT e o servidor. Nota Podes ver aqu\u00ed a documentaci\u00f3n do exemplo.","title":"Obxectivo"},{"location":"practica_2/actividade_4/#creacion-da-sombra-de-dispositivo","text":"Para crear unha sombra de dispositivo fai o seguinte: Abre a consola AWS IoT e no men\u00fa lateral, dentro do submen\u00fa Todos os dispositivos , escolle a opci\u00f3n Cousas . Abre as propiedades da cousa truckSensor01 e na aba Sombras de dispositivo escolle Crear sombra de dispositivo . Escolle o tipo Sombra sen nome (cl\u00e1sico) e acepta para crear a sombra. Imaxe: sombra do dispositivo truckSensor01 .","title":"Creaci\u00f3n da sombra de dispositivo"},{"location":"practica_2/actividade_4/#configuracion-do-exemplo","text":"Para configurar o exemplo fai o seguinte: No directorio de scripts do ambiente Cloud9, crea un script shadow.sh para executar o exemplo. Vamos a controlar a trav\u00e9s da sombra o valor da propiedade door do cami\u00f3n. Nomenclatura Lembra usar o teu prefixo no nome da cousa. $ cd ~/environment/scripts $ nano shadow.sh $ cat shadow.sh #!/usr/bin/env bash # stop script on error set -e # set the thing name thing=xcpm2425-truckSensor01 # get the MQTT5-compatible AWS IoT endpoint aws iot describe-endpoint \\ --endpoint-type iot:Data-ATS > /tmp/iotendpoint.json iot_endpoint=$(jq -r \".endpointAddress\" /tmp/iotendpoint.json) # run shadow MQTT5 sample app printf \"\\nRunning MQTT5 device shadow sample application with $thing thing...\\n\" python3 ./aws-iot-device-sdk-python-v2/samples/shadow_mqtt5.py \\ --endpoint $iot_endpoint \\ --ca_file ../certs/root-CA1.crt \\ --cert ../certs/$thing.cert.pem \\ --key ../certs/$thing.private.key \\ --thing_name $thing \\ --shadow_property door $ Edita a pol\u00edtica AWS IoT da cousa truckSensor01 para permitir a subscrici\u00f3n aos t\u00f3picos da sombra e publicar e recibir mensaxes neles. OLLO Lembra usar o ID da t\u00faa conta nos ARN ( Amazon Resource Name ) dos recursos. Imaxe: pol\u00edtica AWS IoT modificada. Importante Antes de continuar toma as capturas 1 a 3 que se piden para xustificar a actividade .","title":"Configuraci\u00f3n do exemplo"},{"location":"practica_2/actividade_4/#proba-do-exemplo","text":"","title":"Proba do exemplo"},{"location":"practica_2/actividade_4/#estado-inicial-da-sombra","text":"Para configurar o estado inicial da sombra fai o seguinte: Nas propiedades da cousa truckSensor01 , escolle a aba Sombras de dispositivo e abre as propiedades da sombra premendo no seu nome. Na aba Documento da sombra de dispositivo das propiedades da sombra podes consultar o estado inicial da sombra. Imaxe: estado inicial da sombra. Nota Polo dagora a propiedade door non forma parte do estado da sombra. Na aba T\u00f3picos MQTT das propiedades da sombra escolle Cliente de proba MQTT para abrir unha nova xanela do cliente MQTT con subscrici\u00f3ns xa configuradas aos t\u00f3picos da sombra. Imaxe: cliente de proba MQTT con subscrici\u00f3ns aos t\u00f3picos da sombra. Executa o exemplo no directorio de scripts . $ pwd /home/ec2-user/environment/scripts $ chmod +x shadow.sh $ ./shadow.sh O script fai o seguinte: Con\u00e9ctase aos t\u00f3picos da sombra. Consulta o estado da sombra para co\u00f1ecer que valor ten a propiedade door . Como a propiedade non existe, inicializa a propiedade door ao valor por defecto off e solicita a actualizaci\u00f3n do estado da sombra informando do valor actual da propiedade door . Queda agardando a que se insira un novo valor para a propiedade. Imaxe: saida da execuci\u00f3n do script shadow.sh . Comproba no cliente MQTT as mensaxes intercambiadas nos t\u00f3picos da sombra. Haber\u00e1 3 t\u00f3picos que conte\u00f1an mensaxes. Imaxe: t\u00f3picos da sombra nos que se recibiron mensaxes. Comproba as mensaxes en cada t\u00f3pico: $aws/things/truckSensor01/shadow/get/accepted : a consulta inicial do estado da sombra. { \"state\": { \"desired\": { \"welcome\": \"aws-iot\" }, \"reported\": { \"welcome\": \"aws-iot\" } }, \"metadata\": { \"desired\": { \"welcome\": { \"timestamp\": 1722081284 } }, \"reported\": { \"welcome\": { \"timestamp\": 1722081284 } } }, \"version\": 10, \"timestamp\": 1722081623, \"clientToken\": \"8e24e173-99d3-40bc-8613-e86973df4255\" } $aws/things/truckSensor01/shadow/update/accepted : a solicitude de actualizaci\u00f3n do estado da sombra. { \"state\": { \"desired\": { \"door\": \"off\" }, \"reported\": { \"door\": \"off\" } }, \"metadata\": { \"desired\": { \"door\": { \"timestamp\": 1722081623 } }, \"reported\": { \"door\": { \"timestamp\": 1722081623 } } }, \"version\": 11, \"timestamp\": 1722081623, \"clientToken\": \"eebdd795-9d62-46ab-83af-a858527ae0a2\" } $aws/things/truckSensor01/shadow/update/documents : a actualizaci\u00f3n do estado, que agora pasa a conter a propiedade door co valor informado polo dispositivo IoT. { \"previous\": { \"state\": { \"desired\": { \"welcome\": \"aws-iot\" }, \"reported\": { \"welcome\": \"aws-iot\" } }, \"metadata\": { \"desired\": { \"welcome\": { \"timestamp\": 1722081284 } }, \"reported\": { \"welcome\": { \"timestamp\": 1722081284 } } }, \"version\": 10 }, \"current\": { \"state\": { \"desired\": { \"welcome\": \"aws-iot\", \"door\": \"off\" }, \"reported\": { \"welcome\": \"aws-iot\", \"door\": \"off\" } }, \"metadata\": { \"desired\": { \"welcome\": { \"timestamp\": 1722081284 }, \"door\": { \"timestamp\": 1722081623 } }, \"reported\": { \"welcome\": { \"timestamp\": 1722081284 }, \"door\": { \"timestamp\": 1722081623 } } }, \"version\": 11 }, \"timestamp\": 1722081623, \"clientToken\": \"eebdd795-9d62-46ab-83af-a858527ae0a2\" } Nas propiedades da sombra, actualiza as propiedades e comproba como se fixeron efectivos os cambios no documento de estado. Imaxe: estado actualizado da sombra no que xa aparece a propiedade door . Importante Antes de continuar toma as capturas 4 e 5 que se piden para xustificar a actividade .","title":"Estado inicial da sombra"},{"location":"practica_2/actividade_4/#cambio-de-estado-no-dispositivo-iot","text":"Para cambiar o estado no dispositivo IoT fai o seguinte: No terminal do ambiente Cloud9 no que est\u00e1 a se executar o script shadow.sh escribe o valor on . Imaxe: cambio do valor no terminal do script shadow.sh . Comproba no cliente MQTT as mensaxes recibidas nos t\u00f3picos da sombra. Haber\u00e1 2 t\u00f3picos que conte\u00f1an mensaxes: $aws/things/truckSensor01/shadow/update/accepted coa solicitude de actualizaci\u00f3n do estado da sombra. $aws/things/truckSensor01/shadow/update/documents coa actualizaci\u00f3n do estado. Nas propiedades da sombra, actualiza as propiedades e comproba como se fixeron efectivos os cambios no documento de estado. Proba agora a volver a escribir o valor on no terminal do ambiente Cloud9 no que est\u00e1 a se executar o script shadow.sh . Comproba que agora non se env\u00eda ningunha mensaxe para solicitar unha actualizaci\u00f3n do estado da sombra. Importante Antes de continuar toma as capturas 6 e 7 que se piden para xustificar a actividade .","title":"Cambio de estado no dispositivo IoT"},{"location":"practica_2/actividade_4/#cambio-de-estado-na-sombra-co-dispositivo-iot-conectado","text":"Para cambiar o estado da sombra co dispositivo IoT conectado fai o seguinte: Aseg\u00farate de que o script shadow.sh estexa a se executar no ambiente Cloud9. No cliente MQTT publica no t\u00f3pico $aws/things/truckSensor01/shadow/update a mensaxe seguinte: { \"state\": { \"desired\": { \"door\": \"off\" } } } Imaxe: cliente MQTT configurado para publicar unha mensaxe no t\u00f3pico update da sombra. Comproba no cliente MQTT as mensaxes recibidas nos t\u00f3picos da sombra. Nota Se a actualizaci\u00f3n fallou haber\u00e1 unha mensaxe no t\u00f3pico $aws/things/truckSensor01/shadow/update/rejected indicando a causa. Se a actualizaci\u00f3n se fixo correctamente haber\u00e1 3 t\u00f3picos que conte\u00f1an mensaxes: No t\u00f3pico $aws/things/truckSensor01/shadow/update/accepted publicaronse 2 mensaxes. A pen\u00faltima das mensaxes \u00e9 a solicitude de actualizaci\u00f3n do estado da sombra realizada desde o cliente MQTT. O servizo Device shadow incrementou o n\u00famero de versi\u00f3n e adicionou os valores de timestamp e os metadatos. A procedencia da \u00faltima mensaxe publicada expl\u00edcase m\u00e1is adiante. { \"state\": { \"desired\": { \"door\": \"off\" } }, \"metadata\": { \"desired\": { \"door\": { \"timestamp\": 1722097906 } } }, \"version\": 17, \"timestamp\": 1722097906 } No t\u00f3pico $aws/things/truckSensor01/shadow/update/delta publicouse unha mensaxe coas diferenzas entre os estados desired da solicitude e reported do estado actual. Esta mensaxe ser\u00e1 notificada, como veremos m\u00e1is adiante, ao dispositivo IoT que est\u00e1 subscrito a este t\u00f3pico. { \"version\": 17, \"timestamp\": 1722097906, \"state\": { \"door\": \"off\" }, \"metadata\": { \"door\": { \"timestamp\": 1722097906 } } } No t\u00f3pico $aws/things/truckSensor01/shadow/update/documents publicaronse 2 mensaxes. A pen\u00faltima das mensaxes \u00e9 a actualizaci\u00f3n do estado. A procedencia da \u00faltima mensaxe publicada no t\u00f3pico expl\u00edcase m\u00e1is adiante. { \"previous\": { \"state\": { \"desired\": { \"door\": \"on\" }, \"reported\": { \"welcome\": \"aws-iot\", \"door\": \"on\" } }, \"metadata\": { \"desired\": { \"door\": { \"timestamp\": 1722097793 } }, \"reported\": { \"welcome\": { \"timestamp\": 1722081284 }, \"door\": { \"timestamp\": 1722097793 } } }, \"version\": 16 }, \"current\": { \"state\": { \"desired\": { \"door\": \"off\" }, \"reported\": { \"welcome\": \"aws-iot\", \"door\": \"on\" } }, \"metadata\": { \"desired\": { \"door\": { \"timestamp\": 1722097906 } }, \"reported\": { \"welcome\": { \"timestamp\": 1722081284 }, \"door\": { \"timestamp\": 1722097793 } } }, \"version\": 17 }, \"timestamp\": 1722097906 } Comproba o que aconteceu no terminal do ambiente Cloud9 no que est\u00e1 a se executar o script shadow.sh . Imaxe: resposta no terminal do script shadow.sh ao cambio de estado da sombra. O que podemos ver na sa\u00edda do terminal \u00e9 o seguinte: O dispositivo IoT ignora a mensaxe que se publicou desde o cliente MQTT no t\u00f3pico $aws/.../update/accepted porque non cont\u00e9n un campo clientToken e, polo tanto, non se corresponde con ningunha solicitude feita desde o dispositivo. O dispositivo IoT recibe a notificaci\u00f3n da mensaxe publicada no t\u00f3pico $aws/.../update/delta , e comproba que o valor desexado da propiedade \u00e9 diferente ao valor local. O dispositivo IoT actualiza o valor local da sombra e notifica a actualizaci\u00f3n publicando unha mensaxe no t\u00f3pico $aws/../update . A mensaxe publicada polo dispositivo \u00e9 procesada polo servizo AWS IoT Device shadow que publica unha mensaxe de aceptaci\u00f3n da actualizaci\u00f3n no t\u00f3pico $aws/.../update/accepted e outra co documento de cambio de estado da sombra no t\u00f3pico $aws/.../update/documents . Comproba que esas mensaxes son as \u00faltimas publicadas nos correspondentes t\u00f3picos e que, a diferenza das que vimos no punto anterior publicadas en resposta \u00e1 actualizaci\u00f3n de estado desde o cliente MQTT, estas si que usan o campo clientToken , que permite identificar a(s) resposta(s) que corresponden a unha solicitude. Por exemplo, no t\u00f3pico $aws/.../update/accepted a mensaxe ser\u00eda: { \"state\": { \"desired\": { \"door\": \"off\" }, \"reported\": { \"door\": \"off\" } }, \"metadata\": { \"desired\": { \"door\": { \"timestamp\": 1722097906 } }, \"reported\": { \"door\": { \"timestamp\": 1722097906 } } }, \"version\": 18, \"timestamp\": 1722097906, \"clientToken\": \"3ef97007-db6c-46b6-87ea-1d9cbdf766a1\" } Nas propiedades da sombra, actualiza as propiedades e comproba os cambios no documento de estado. Importante Antes de continuar toma as capturas 8 e 9 que se piden para xustificar a actividade .","title":"Cambio de estado na sombra co dispositivo IoT conectado"},{"location":"practica_2/actividade_4/#cambio-de-estado-na-sombra-co-dispositivo-iot-desconectado","text":"Para cambiar o estado da sombra co dispositivo IoT desconectado fai o seguinte: No terminal do ambiente Cloud9 no que est\u00e1 a se executar o script shadow.sh escribe exit ou quit para parar a execuci\u00f3n do script . No cliente MQTT publica no t\u00f3pico $aws/things/truckSensor01/shadow/update a mensaxe seguinte: { \"state\": { \"desired\": { \"door\": \"on\" } } } Repite o paso previo varias veces, cambiando o valor de door a on ou off (tam\u00e9n podes repetir valor). Comproba as mensaxes que se publican nos t\u00f3picos $aws/.../update/accepted , $aws/.../update/delta e $aws/.../update/documents cada vez que publiques. Repite o paso 2 co valor de door a on . Nas propiedades da sombra, actualiza as propiedades e comproba os cambios no documento de estado. Comproba que aparece un campo delta no estado que indica a diferenza entre os estados desired e reported . { \"state\": { \"desired\": { \"door\": \"on\" }, \"reported\": { \"welcome\": \"aws-iot\", \"door\": \"off\" }, \"delta\": { \"door\": \"on\" } } } Importante Antes de continuar toma a captura 10 que se pide para xustificar a actividade . Repite o paso 2 co valor de door a off . Nas propiedades da sombra, actualiza as propiedades e comproba os cambios no documento de estado. Comproba que o campo delta xa non aparece no estado. { \"state\": { \"desired\": { \"door\": \"off\" }, \"reported\": { \"welcome\": \"aws-iot\", \"door\": \"off\" } } } No ambiente Cloud9 executa o script shadow.sh . Ao coincidir o estado da sombra co \u00faltimo valor da propiedade no dispositivo este non inicia ningunha actualizaci\u00f3n. Imaxe: saida do script shadow.sh cando o estado da sombra coincide co do dispositivo. Importante Antes de continuar toma a captura 11 que se pide para xustificar a actividade . No terminal escribe exit ou quit para parar a execuci\u00f3n do script . Repite o paso 2 co valor de door a on . Executa de novo o script shadow.sh . O dispositivo solicita o estado actual da sombra publicando unha mensaxe no t\u00f3pico $aws/.../get e comproba que cont\u00e9n un campo delta , o que lle indica que o estado da sombra mudou mentres estivo desconectado. Ao non haber coincidencia entre o estado da sombra e o do dispositivo, este realiza unha actualizaci\u00f3n do estado local e a notifica publicando unha mensaxe no t\u00f3pico $aws/.../update . Imaxe: saida do script shadow.sh cando o estado da sombra \u00e9 diferente ao do dispositivo. Importante Antes de continuar toma a captura 12 que se pide para xustificar a actividade . Comproba no cliente MQTT as mensaxes recibidas nos t\u00f3picos da sombra. Comproba o estado da sombra nas propiedades da sombra na consola AWS IoT. Importante Non esquezas tomar a captura 13, a \u00faltima que se pide para xustificar a actividade .","title":"Cambio de estado na sombra co dispositivo IoT desconectado"},{"location":"practica_2/actividade_4/#xustificacion-da-actividade","text":"Resume das capturas que hai que tomar para a memoria de xustificaci\u00f3n da pr\u00e1ctica. Importante As capturas te\u00f1en que asemellarse \u00e1s que se tomaron no curso e na pr\u00e1ctica 1. As capturas tomadas na consola AWS te\u00f1en que inclu\u00edr o men\u00fa superior no que poida verse o nome de usuario da conta.","title":"Xustificaci\u00f3n da actividade"},{"location":"practica_2/actividade_4/#creacion-da-sombra-de-dispositivo_1","text":"Na consola IoT as propiedades da cousa truckSensor01 coa aba Sombras de dispositivo escollida na que poida verse a sombra.","title":"Creaci\u00f3n da sombra de dispositivo"},{"location":"practica_2/actividade_4/#configuracion-do-exemplo_1","text":"Ambiente Cloud9 co c\u00f3digo do script shadow.sh aberto nun terminal. Propiedades da pol\u00edtica AWS IoT modificada.","title":"Configuraci\u00f3n do exemplo"},{"location":"practica_2/actividade_4/#proba-do-exemplo_1","text":"","title":"Proba do exemplo"},{"location":"practica_2/actividade_4/#estado-inicial-da-sombra_1","text":"Ambiente Cloud9 coa sa\u00edda do terminal na que se executou o script shadow.sh . Consola IoT coas propiedades da sombra da cousa truckSensor01 na que poida verse o estado modificado.","title":"Estado inicial da sombra"},{"location":"practica_2/actividade_4/#cambio-de-estado-no-dispositivo-iot_1","text":"Cliente MQTT na consola IoT na que se vexa o contido da mensaxe recibida no t\u00f3pico $aws/things/truckSensor01/shadow/update/documents . Consola IoT coas propiedades da sombra da cousa truckSensor01 na que poida verse o estado modificado.","title":"Cambio de estado no dispositivo IoT"},{"location":"practica_2/actividade_4/#cambio-de-estado-na-sombra-co-dispositivo-iot-conectado_1","text":"Cliente MQTT na consola IoT na que se vexa o contido das d\u00faas \u00faltimas mensaxes recibidas no t\u00f3pico $aws/things/truckSensor01/shadow/update/accepted . Consola IoT coas propiedades da sombra da cousa truckSensor01 na que poida verse o estado modificado.","title":"Cambio de estado na sombra co dispositivo IoT conectado"},{"location":"practica_2/actividade_4/#cambio-de-estado-na-sombra-co-dispositivo-iot-desconectado_1","text":"Consola IoT coas propiedades da sombra da cousa truckSensor01 na que poida verse o estado contendo un campo delta . Ambiente Cloud9 coa sa\u00edda do terminal na que se executou o script shadow.sh cando o estado da sombra coincide co do dispositivo. Ambiente Cloud9 coa sa\u00edda do terminal na que se executou o script shadow.sh cando o estado da sombra \u00e9 diferente ao do dispositivo. Cliente MQTT na consola IoT na que se vexa o contido das d\u00faas \u00faltimas mensaxes recibidas no t\u00f3pico $aws/things/truckSensor01/shadow/update/delta .","title":"Cambio de estado na sombra co dispositivo IoT desconectado"},{"location":"practica_3/actividade_1/","text":"Actividade 1 MENSAXER\u00cdA MQTT A TRAV\u00c9S DOS FICHEIROS DE PUBLICACI\u00d3N E SUBSCRICI\u00d3N. Obxectivo O obxectivo desta actividade \u00e9 comprobar o funcionamento da mensaxer\u00eda MQTT do Device Client a trav\u00e9s dos ficheiros de publicaci\u00f3n e subscrici\u00f3n. Nota Podes ver aqu\u00ed a documentaci\u00f3n. Comprobaci\u00f3n do funcionamento da mensaxer\u00eda MQTT Fai o seguinte: Comproba nun terminal do ambiente Cloud9 no que estexa instalado o AWS IoT Device Client a configuraci\u00f3n actual da mensaxer\u00eda MQTT. $ sudo apt install jq $ sudo cat /etc/.aws-iot-device-client/aws-iot-device-client.conf | jq '.samples' { \"pub-sub\": { \"enabled\": true, \"publish-topic\": \"/topic/workshop/dc/pub\", \"publish-file\": \"/etc/.aws-iot-device-client/pubsub/publish-file.txt\", \"subscribe-topic\": \"/topic/workshop/dc/sub\", \"subscribe-file\": \"/home/ubuntu/workshop_dc/subfile.txt\" } } A sa\u00edda mostra que a funcionalidade est\u00e1 activada e os t\u00f3picos MQTT e ficheiros locais que se est\u00e1n a utilizar para o intercambio de mensaxes. Comproba o contido do ficheiro de subscrici\u00f3n. $ cat /home/ubuntu/workshop_dc/subfile.txt { \"message\": \"Sauda\u00e7\u00f5es do console do AWS IoT\" } No cliente MQTT da consola de AWS IoT publica unha mensaxe no t\u00f3pico /topic/workshop/dc/sub . Imaxe: mensaxe publicada no t\u00f3pico MQTT. Comproba que se actualizou o ficheiro de subscrici\u00f3n. $ cat /home/ubuntu/workshop_dc/subfile.txt { \"message\": \"Sauda\u00e7\u00f5es do console do AWS IoT\" } { \"message\": \"Adeus rios, adeus fontes\" } Comproba tam\u00e9n o ficheiro de log. $ sudo grep Message /var/log/aws-iot-device-client/aws-iot-device-client.log 2024-08-02T10:07:22.562Z [DEBUG] {samples/PubSubFeature.cpp}: Message received on subscribe topic, size: 44 bytes Comproba agora o contido do ficheiro de publicaci\u00f3n. $ sudo cat /etc/.aws-iot-device-client/pubsub/publish-file.txt {\"Hello\": \"World!\"} Como xa vimos no curso en li\u00f1a, esta \u00e9 a mensaxe que se env\u00eda ao t\u00f3pico de publicaci\u00f3n configurado cada vez que se reinicia o servizo aws-iot-device-client . Editar o contido dese ficheiro e reiniciar o servizo \u00e9 o procedemento por defecto para publicar unha mensaxe. Publicando mensaxes MQTT cando o ficheiro cambia Outra maneira de publicar mensaxes MQTT no Device Client \u00e9 facelo cada vez que hai un cambio no ficheiro de publicaci\u00f3n, sen necesidade de reiniciar o servizo. Para comprobar este m\u00e9todo de publicaci\u00f3n fai o seguinte: Edita o ficheiro de configuraci\u00f3n do Device Client para activar a publicaci\u00f3n de mensaxes cando haxa cambios no ficheiro. $ sudo nano /etc/.aws-iot-device-client/aws-iot-device-client.conf $ sudo cat /etc/.aws-iot-device-client/aws-iot-device-client.conf | jq '.samples' { \"pub-sub\": { \"enabled\": true, \"publish-topic\": \"/topic/workshop/dc/pub\", \"publish-file\": \"/home/ubuntu/workshop_dc/pubfile.txt\", \"subscribe-topic\": \"/topic/workshop/dc/sub\", \"subscribe-file\": \"/home/ubuntu/workshop_dc/subfile.txt\", \"publish-on-change\": true } } Nota Presta atenci\u00f3n a que tam\u00e9n se cambiou na configuraci\u00f3n o ficheiro que imos usar para publicar. Crea o ficheiro de publicaci\u00f3n e reinicia o servizo. $ touch /home/ubuntu/workshop_dc/pubfile.txt $ sudo systemctl restart aws-iot-device-client Comproba que non houbera ning\u00fan erro ao iniciar o servizo. Imaxe: estado do servizo Device Client. No cliente MQTT da consola de AWS IoT subscr\u00edbete ao t\u00f3pico /topic/workshop/dc/pub . Publica unha mensaxe usando o ficheiro e comproba que aparece no cliente MQTT. $ pwd /home/ubuntu/workshop_dc $ echo '{\"message\":\"Sa\u00fados desde o Device Client\"}' > pubfile.txt Imaxe: mensaxe recibida no t\u00f3pico MQTT. Comproba tam\u00e9n o ficheiro de log. $ sudo grep \"target file\" /var/log/aws-iot-device-client/aws-iot-device-client.log -A 1 2024-08-02T11:38:34.975Z [DEBUG] {samples/PubSubFeature.cpp}: The target file is modified, start updating the shadow 2024-08-02T11:38:34.982Z [DEBUG] {samples/PubSubFeature.cpp}: PublishCompAck: PacketId:(Pub Sub Sample), ErrorCode:0 Xustificaci\u00f3n da actividade Toma as seguintes capturas para a memoria de xustificaci\u00f3n da pr\u00e1ctica: Ambiente Cloud9 mostrando a sa\u00edda da execuci\u00f3n dos comandos seguintes: $ sudo cat /etc/.aws-iot-device-client/aws-iot-device-client.conf | jq '.samples' $ echo '{\"message\":\"Sa\u00fados de <Pon aqu\u00ed o teu nome> desde o Device Client\"}' > /home/ubuntu/workshop_dc/pubfile.txt Consola IoT coa mensaxe MQTT recibida no t\u00f3pico /topic/workshop/dc/pub , na que poida verse o payload , despois de executar os comandos do punto anterior. Importante As capturas te\u00f1en que asemellarse \u00e1s que se tomaron no curso e nas pr\u00e1cticas anteriores. As capturas tomadas na consola AWS te\u00f1en que inclu\u00edr o men\u00fa superior no que poida verse o nome de usuario da conta.","title":"Actividade 1"},{"location":"practica_3/actividade_1/#actividade-1","text":"MENSAXER\u00cdA MQTT A TRAV\u00c9S DOS FICHEIROS DE PUBLICACI\u00d3N E SUBSCRICI\u00d3N.","title":"Actividade 1"},{"location":"practica_3/actividade_1/#obxectivo","text":"O obxectivo desta actividade \u00e9 comprobar o funcionamento da mensaxer\u00eda MQTT do Device Client a trav\u00e9s dos ficheiros de publicaci\u00f3n e subscrici\u00f3n. Nota Podes ver aqu\u00ed a documentaci\u00f3n.","title":"Obxectivo"},{"location":"practica_3/actividade_1/#comprobacion-do-funcionamento-da-mensaxeria-mqtt","text":"Fai o seguinte: Comproba nun terminal do ambiente Cloud9 no que estexa instalado o AWS IoT Device Client a configuraci\u00f3n actual da mensaxer\u00eda MQTT. $ sudo apt install jq $ sudo cat /etc/.aws-iot-device-client/aws-iot-device-client.conf | jq '.samples' { \"pub-sub\": { \"enabled\": true, \"publish-topic\": \"/topic/workshop/dc/pub\", \"publish-file\": \"/etc/.aws-iot-device-client/pubsub/publish-file.txt\", \"subscribe-topic\": \"/topic/workshop/dc/sub\", \"subscribe-file\": \"/home/ubuntu/workshop_dc/subfile.txt\" } } A sa\u00edda mostra que a funcionalidade est\u00e1 activada e os t\u00f3picos MQTT e ficheiros locais que se est\u00e1n a utilizar para o intercambio de mensaxes. Comproba o contido do ficheiro de subscrici\u00f3n. $ cat /home/ubuntu/workshop_dc/subfile.txt { \"message\": \"Sauda\u00e7\u00f5es do console do AWS IoT\" } No cliente MQTT da consola de AWS IoT publica unha mensaxe no t\u00f3pico /topic/workshop/dc/sub . Imaxe: mensaxe publicada no t\u00f3pico MQTT. Comproba que se actualizou o ficheiro de subscrici\u00f3n. $ cat /home/ubuntu/workshop_dc/subfile.txt { \"message\": \"Sauda\u00e7\u00f5es do console do AWS IoT\" } { \"message\": \"Adeus rios, adeus fontes\" } Comproba tam\u00e9n o ficheiro de log. $ sudo grep Message /var/log/aws-iot-device-client/aws-iot-device-client.log 2024-08-02T10:07:22.562Z [DEBUG] {samples/PubSubFeature.cpp}: Message received on subscribe topic, size: 44 bytes Comproba agora o contido do ficheiro de publicaci\u00f3n. $ sudo cat /etc/.aws-iot-device-client/pubsub/publish-file.txt {\"Hello\": \"World!\"} Como xa vimos no curso en li\u00f1a, esta \u00e9 a mensaxe que se env\u00eda ao t\u00f3pico de publicaci\u00f3n configurado cada vez que se reinicia o servizo aws-iot-device-client . Editar o contido dese ficheiro e reiniciar o servizo \u00e9 o procedemento por defecto para publicar unha mensaxe.","title":"Comprobaci\u00f3n do funcionamento da mensaxer\u00eda MQTT"},{"location":"practica_3/actividade_1/#publicando-mensaxes-mqtt-cando-o-ficheiro-cambia","text":"Outra maneira de publicar mensaxes MQTT no Device Client \u00e9 facelo cada vez que hai un cambio no ficheiro de publicaci\u00f3n, sen necesidade de reiniciar o servizo. Para comprobar este m\u00e9todo de publicaci\u00f3n fai o seguinte: Edita o ficheiro de configuraci\u00f3n do Device Client para activar a publicaci\u00f3n de mensaxes cando haxa cambios no ficheiro. $ sudo nano /etc/.aws-iot-device-client/aws-iot-device-client.conf $ sudo cat /etc/.aws-iot-device-client/aws-iot-device-client.conf | jq '.samples' { \"pub-sub\": { \"enabled\": true, \"publish-topic\": \"/topic/workshop/dc/pub\", \"publish-file\": \"/home/ubuntu/workshop_dc/pubfile.txt\", \"subscribe-topic\": \"/topic/workshop/dc/sub\", \"subscribe-file\": \"/home/ubuntu/workshop_dc/subfile.txt\", \"publish-on-change\": true } } Nota Presta atenci\u00f3n a que tam\u00e9n se cambiou na configuraci\u00f3n o ficheiro que imos usar para publicar. Crea o ficheiro de publicaci\u00f3n e reinicia o servizo. $ touch /home/ubuntu/workshop_dc/pubfile.txt $ sudo systemctl restart aws-iot-device-client Comproba que non houbera ning\u00fan erro ao iniciar o servizo. Imaxe: estado do servizo Device Client. No cliente MQTT da consola de AWS IoT subscr\u00edbete ao t\u00f3pico /topic/workshop/dc/pub . Publica unha mensaxe usando o ficheiro e comproba que aparece no cliente MQTT. $ pwd /home/ubuntu/workshop_dc $ echo '{\"message\":\"Sa\u00fados desde o Device Client\"}' > pubfile.txt Imaxe: mensaxe recibida no t\u00f3pico MQTT. Comproba tam\u00e9n o ficheiro de log. $ sudo grep \"target file\" /var/log/aws-iot-device-client/aws-iot-device-client.log -A 1 2024-08-02T11:38:34.975Z [DEBUG] {samples/PubSubFeature.cpp}: The target file is modified, start updating the shadow 2024-08-02T11:38:34.982Z [DEBUG] {samples/PubSubFeature.cpp}: PublishCompAck: PacketId:(Pub Sub Sample), ErrorCode:0","title":"Publicando mensaxes MQTT cando o ficheiro cambia"},{"location":"practica_3/actividade_1/#xustificacion-da-actividade","text":"Toma as seguintes capturas para a memoria de xustificaci\u00f3n da pr\u00e1ctica: Ambiente Cloud9 mostrando a sa\u00edda da execuci\u00f3n dos comandos seguintes: $ sudo cat /etc/.aws-iot-device-client/aws-iot-device-client.conf | jq '.samples' $ echo '{\"message\":\"Sa\u00fados de <Pon aqu\u00ed o teu nome> desde o Device Client\"}' > /home/ubuntu/workshop_dc/pubfile.txt Consola IoT coa mensaxe MQTT recibida no t\u00f3pico /topic/workshop/dc/pub , na que poida verse o payload , despois de executar os comandos do punto anterior. Importante As capturas te\u00f1en que asemellarse \u00e1s que se tomaron no curso e nas pr\u00e1cticas anteriores. As capturas tomadas na consola AWS te\u00f1en que inclu\u00edr o men\u00fa superior no que poida verse o nome de usuario da conta.","title":"Xustificaci\u00f3n da actividade"},{"location":"practica_3/actividade_2/","text":"Actividade 2 DEFINICI\u00d3N DUN MODELO DE DOCUMENTO DE TRABALLO PERSONALIZADO. Obxectivo O obxectivo desta actividade \u00e9 definir un modelo de traballo personalizado. No curso creouse un traballo a partires dun modelo xestionado por AWS (secci\u00f3n 5.2) e un traballo personalizado a partires dun documento de traballo subido a S3 (secci\u00f3n 8.1). Nesta actividade vamos definir un modelo de documento de traballo personalizado que nos permitar\u00e1 crear traballos como o da secci\u00f3n 8.1 ( echo dunha mensaxe no dispositivo IoT). Creaci\u00f3n do modelo de documento de traballo personalizado Para crear o modelo fai o seguinte: No ambiente Cloud9 no que est\u00e1 instalado o AWS IoT Device Client crea un ficheiro JSON co modelo de traballo. $ pwd /home/ubuntu/workshop_dc $ nano customJobTemplate.json $ cat customJobTemplate.json { \"version\": \"1.0\", \"steps\": [ { \"action\": { \"name\": \"Greetings\", \"type\": \"runCommand\", \"runAsUser\": \"ubuntu\", \"input\": { \"command\": \"echo,Hello from Xo\u00e1n C. Pardo\\\\, AWS IoT Device Client Workshop user on 2024.\" } } } ] } Nota Na secci\u00f3n 8.1 do curso, usouse un documento de traballo co seguinte esquema: Para o modelo estamos a usar unha versi\u00f3n m\u00e1is recente do esquema do documento de traballo. Podes ver aqu\u00ed a documentaci\u00f3n de ambos esquemas e aqu\u00ed e aqu\u00ed exemplos de documentos que usan a versi\u00f3n antiga e a m\u00e1is recente respectivamente. Presta especial atenci\u00f3n ao tipo de acci\u00f3n que estamos a usar e ao formato que se usa para o campo command . Sube o modelo ao bucket S3 que se usou no curso. Nomenclatura Usa o teu prefixo no nome do bucket . $ aws s3 cp customJobTemplate.json s3://xcpm2425-workshop-dc-bucket Na consola de AWS IoT escolle a opci\u00f3n Modelos de traballo dentro do men\u00fa Acci\u00f3ns remotas . Coa aba Modelos personalizados escollida, crea un novo modelo de traballo escollendo Crear modelo de traballo e indicando as opci\u00f3ns seguintes: Nome do modelo de traballo: greetingsTemplate . Lembra po\u00f1er o teu prefixo diante, p.ex. xcpm2425-greetingsTemplate . Descrici\u00f3n: pon unha descrici\u00f3n para o modelo. Documento de traballo: preme no bot\u00f3n Navegar no S3 e escolle o documento JSON que subiches a S3. Imaxe: configuraci\u00f3n do modelo de documento de traballo. Creaci\u00f3n dun traballo a partir do modelo No cliente MQTT da consola de AWS IoT subscr\u00edbete aos t\u00f3picos: $aws/events/job/greetings/completed $aws/events/jobExecution/greetings/succeeded Abre unha segunda consola AWS IoT para crear o traballo nunha xanela diferente \u00e1 do cliente MQTT do paso 2. Nesta consola escolle a opci\u00f3n Traballos dentro do men\u00fa Acci\u00f3ns remotas . Crea un novo traballo escollendo Crear traballo e indicando as opci\u00f3ns seguintes: Tipo de traballo: escolle Crear traballo personalizado . Nome do traballo: greetings . Descrici\u00f3n: pon unha descrici\u00f3n para o traballo. Cousas para executar este traballo: escolle deviceCLientThing . Documento de trabalho: escolle Do modelo . Tipo de modelo: escolle Modelos personalizados . Modelo: escolle greetingsTemplate . Tipo de execuci\u00f3n do traballo: escolle Snapshot . Imaxe: configuraci\u00f3n do traballo. Verificaci\u00f3n da execuci\u00f3n do traballo Comproba na consola do AWS IoT que o traballo se executou correctamente. Imaxe: execuci\u00f3n correcta do traballo na consola IoT. Comproba tam\u00e9n que o documento do traballo \u00e9 o que definimos no modelo. Imaxe: documento do traballo. Comproba que se recibiron as mensaxes do traballo nos t\u00f3picos do cliente MQTT. Imaxe: mensaxes recibidas nos t\u00f3picos do cliente MQTT. E finalmente, comproba que apareza a mensaxe na sa\u00edda de log do ambiente Cloud9. Imaxe: mensaxe no log do ambiente Cloud9. Xustificaci\u00f3n da actividade Toma as seguintes capturas para a memoria de xustificaci\u00f3n da pr\u00e1ctica: Ambiente Cloud9 no que se vexa a sa\u00edda da execuci\u00f3n dos comandos seguintes: $ cat customJobTemplate.json $ aws s3 ls s3://xcpm2425-workshop-dc-bucket Na consola IoT as propiedades do modelo de documento de traballo greetingsTemplate (con que se vexa o apartado de detalles \u00e9 dabondo, os das configuraci\u00f3ns non fan falla). Na consola IoT as propiedades do traballo greetings coa execuci\u00f3n finalizada correctamente. Ambiente Cloud9 coa sa\u00edda do traballo no ficheiro de log. Importante As capturas te\u00f1en que asemellarse \u00e1s que se tomaron no curso e nas pr\u00e1cticas anteriores. As capturas tomadas na consola AWS te\u00f1en que inclu\u00edr o men\u00fa superior no que poida verse o nome de usuario da conta.","title":"Actividade 2"},{"location":"practica_3/actividade_2/#actividade-2","text":"DEFINICI\u00d3N DUN MODELO DE DOCUMENTO DE TRABALLO PERSONALIZADO.","title":"Actividade 2"},{"location":"practica_3/actividade_2/#obxectivo","text":"O obxectivo desta actividade \u00e9 definir un modelo de traballo personalizado. No curso creouse un traballo a partires dun modelo xestionado por AWS (secci\u00f3n 5.2) e un traballo personalizado a partires dun documento de traballo subido a S3 (secci\u00f3n 8.1). Nesta actividade vamos definir un modelo de documento de traballo personalizado que nos permitar\u00e1 crear traballos como o da secci\u00f3n 8.1 ( echo dunha mensaxe no dispositivo IoT).","title":"Obxectivo"},{"location":"practica_3/actividade_2/#creacion-do-modelo-de-documento-de-traballo-personalizado","text":"Para crear o modelo fai o seguinte: No ambiente Cloud9 no que est\u00e1 instalado o AWS IoT Device Client crea un ficheiro JSON co modelo de traballo. $ pwd /home/ubuntu/workshop_dc $ nano customJobTemplate.json $ cat customJobTemplate.json { \"version\": \"1.0\", \"steps\": [ { \"action\": { \"name\": \"Greetings\", \"type\": \"runCommand\", \"runAsUser\": \"ubuntu\", \"input\": { \"command\": \"echo,Hello from Xo\u00e1n C. Pardo\\\\, AWS IoT Device Client Workshop user on 2024.\" } } } ] } Nota Na secci\u00f3n 8.1 do curso, usouse un documento de traballo co seguinte esquema: Para o modelo estamos a usar unha versi\u00f3n m\u00e1is recente do esquema do documento de traballo. Podes ver aqu\u00ed a documentaci\u00f3n de ambos esquemas e aqu\u00ed e aqu\u00ed exemplos de documentos que usan a versi\u00f3n antiga e a m\u00e1is recente respectivamente. Presta especial atenci\u00f3n ao tipo de acci\u00f3n que estamos a usar e ao formato que se usa para o campo command . Sube o modelo ao bucket S3 que se usou no curso. Nomenclatura Usa o teu prefixo no nome do bucket . $ aws s3 cp customJobTemplate.json s3://xcpm2425-workshop-dc-bucket Na consola de AWS IoT escolle a opci\u00f3n Modelos de traballo dentro do men\u00fa Acci\u00f3ns remotas . Coa aba Modelos personalizados escollida, crea un novo modelo de traballo escollendo Crear modelo de traballo e indicando as opci\u00f3ns seguintes: Nome do modelo de traballo: greetingsTemplate . Lembra po\u00f1er o teu prefixo diante, p.ex. xcpm2425-greetingsTemplate . Descrici\u00f3n: pon unha descrici\u00f3n para o modelo. Documento de traballo: preme no bot\u00f3n Navegar no S3 e escolle o documento JSON que subiches a S3. Imaxe: configuraci\u00f3n do modelo de documento de traballo.","title":"Creaci\u00f3n do modelo de documento de traballo personalizado"},{"location":"practica_3/actividade_2/#creacion-dun-traballo-a-partir-do-modelo","text":"No cliente MQTT da consola de AWS IoT subscr\u00edbete aos t\u00f3picos: $aws/events/job/greetings/completed $aws/events/jobExecution/greetings/succeeded Abre unha segunda consola AWS IoT para crear o traballo nunha xanela diferente \u00e1 do cliente MQTT do paso 2. Nesta consola escolle a opci\u00f3n Traballos dentro do men\u00fa Acci\u00f3ns remotas . Crea un novo traballo escollendo Crear traballo e indicando as opci\u00f3ns seguintes: Tipo de traballo: escolle Crear traballo personalizado . Nome do traballo: greetings . Descrici\u00f3n: pon unha descrici\u00f3n para o traballo. Cousas para executar este traballo: escolle deviceCLientThing . Documento de trabalho: escolle Do modelo . Tipo de modelo: escolle Modelos personalizados . Modelo: escolle greetingsTemplate . Tipo de execuci\u00f3n do traballo: escolle Snapshot . Imaxe: configuraci\u00f3n do traballo.","title":"Creaci\u00f3n dun traballo a partir do modelo"},{"location":"practica_3/actividade_2/#verificacion-da-execucion-do-traballo","text":"Comproba na consola do AWS IoT que o traballo se executou correctamente. Imaxe: execuci\u00f3n correcta do traballo na consola IoT. Comproba tam\u00e9n que o documento do traballo \u00e9 o que definimos no modelo. Imaxe: documento do traballo. Comproba que se recibiron as mensaxes do traballo nos t\u00f3picos do cliente MQTT. Imaxe: mensaxes recibidas nos t\u00f3picos do cliente MQTT. E finalmente, comproba que apareza a mensaxe na sa\u00edda de log do ambiente Cloud9. Imaxe: mensaxe no log do ambiente Cloud9.","title":"Verificaci\u00f3n da execuci\u00f3n do traballo"},{"location":"practica_3/actividade_2/#xustificacion-da-actividade","text":"Toma as seguintes capturas para a memoria de xustificaci\u00f3n da pr\u00e1ctica: Ambiente Cloud9 no que se vexa a sa\u00edda da execuci\u00f3n dos comandos seguintes: $ cat customJobTemplate.json $ aws s3 ls s3://xcpm2425-workshop-dc-bucket Na consola IoT as propiedades do modelo de documento de traballo greetingsTemplate (con que se vexa o apartado de detalles \u00e9 dabondo, os das configuraci\u00f3ns non fan falla). Na consola IoT as propiedades do traballo greetings coa execuci\u00f3n finalizada correctamente. Ambiente Cloud9 coa sa\u00edda do traballo no ficheiro de log. Importante As capturas te\u00f1en que asemellarse \u00e1s que se tomaron no curso e nas pr\u00e1cticas anteriores. As capturas tomadas na consola AWS te\u00f1en que inclu\u00edr o men\u00fa superior no que poida verse o nome de usuario da conta.","title":"Xustificaci\u00f3n da actividade"},{"location":"practica_3/actividade_3/","text":"Actividade 3 IMPLEMENTACI\u00d3N DUN MANIPULADOR DE TRABALLOS (JOB HANDLER). Obxectivo O obxectivo desta actividade \u00e9 implementar un manipulador de traballos (Job Handler) no dispositivo IoT. O manipulador vai consistir nun script que publique a configuraci\u00f3n do dispositivo nunha mensaxe MQTT usando a funcionalidade de mensaxer\u00eda MQTT do Device Client que vimos nunha actividade anterior. Nota Podes ver aqu\u00ed a documentaci\u00f3n sobre os manipuladores de traballos do AWS IoT Device Client. Creaci\u00f3n do manipulador de traballos Para crear o manipulador de traballos fai o seguinte: No ambiente Cloud9 no que est\u00e1 instalado o AWS IoT Device Client comproba na configuraci\u00f3n dos traballos cal \u00e9 o directorio no que se almacenan os manipuladores. $ sudo cat /etc/.aws-iot-device-client/aws-iot-device-client.conf | jq '.jobs' { \"enabled\": true, \"handler-directory\": \"/etc/.aws-iot-device-client/jobs\" } Comproba cales son os manipuladores dispo\u00f1\u00edbeis. $ HANDLER_DIR=$(sudo cat /etc/.aws-iot-device-client/aws-iot-device-client.conf | jq -r '.jobs.\"handler-directory\"') $ sudo ls $HANDLER_DIR download-file.sh install-packages.sh remove-packages.sh shutdown.sh stop-services.sh verify-packages-removed.sh health-check.sh reboot.sh restart-services.sh start-services.sh verify-packages-installed.sh Na secci\u00f3n 5.1 do curso, o traballo que descargaba un ficheiro no dispositivo IoT creouse a partires do modelo de documento de traballo AWS-Download-File xestionado por AWS. Este modelo \u00e9 de tipo runHandler e executa no dispositivo IoT o manipulador download-file.sh pas\u00e1ndolle como par\u00e1metros a URL do ficheiro e o directorio no que descargalo. { \"version\": \"1.0\", \"steps\": [ { \"action\": { \"name\": \"Download-File\", \"type\": \"runHandler\", \"input\": { \"handler\": \"download-file.sh\", \"args\": [ \"${aws:iot:parameter:downloadUrl}\", \"${aws:iot:parameter:filePath}\" ], \"path\": \"${aws:iot:parameter:pathToHandler}\" }, \"runAsUser\": \"${aws:iot:parameter:runAsUser}\" } } ] } Comproba como \u00e9 a implementaci\u00f3n deste manipulador: $ sudo cat $HANDLER_DIR/download-file.sh #!/usr/bin/env sh set -e echo \"Running download-file.sh\" user=$1 fileUrl=$2 outputFile=$3 echo \"Username: $user\" echo \"File URL: $fileUrl\" echo \"Write documents to file: $outputFile\" if command -v \"wget\" > /dev/null then echo \"Using wget for downloading user specified file\" if id \"$user\" 2>/dev/null && command -v \"sudo\" > /dev/null; then if [ -d \"$outputFile\" ]; then sudo -u \"$user\" -n wget --quiet -P \"$outputFile\" \"$fileUrl\" else sudo -u \"$user\" -n wget --quiet -O \"$outputFile\" \"$fileUrl\" fi else echo \"username or sudo command not found\" if [ -d \"$outputFile\" ]; then wget --quiet -P \"$outputFile\" \"$fileUrl\" else wget --quiet -O \"$outputFile\" \"$fileUrl\" fi fi else >&2 echo \"Wget software package not installed on the device. Use the \\\"install-packages.sh\\\" operation to install the wget software package on this device.\" exit 1 fi Como podes ver tr\u00e1tase dun script que recibe 3 dos par\u00e1metros de entrada definidos no modelo: a conta de usuario que se vai usar para executar o script , a URL do ficheiro e o directorio no que gardalo, e utiliza o comando wget para descargar o ficheiro no directorio que se lle indica. Podes curiosear nas implementaci\u00f3ns dos outros manipuladores. Nota Se o prefires, tam\u00e9n podes ver aqu\u00ed a implementaci\u00f3n dos manipuladores instalados por defecto. No ambiente Cloud9 no que est\u00e1 instalado o AWS IoT Device Client comproba que a mensaxer\u00eda MQTT est\u00e1 activada e cales son o t\u00f3pico e ficheiro de publicaci\u00f3n. $ sudo cat /etc/.aws-iot-device-client/aws-iot-device-client.conf | jq '.samples' { \"pub-sub\": { \"enabled\": true, \"publish-topic\": \"/topic/workshop/dc/pub\", \"publish-file\": \"/home/ubuntu/workshop_dc/pubfile.txt\", \"subscribe-topic\": \"/topic/workshop/dc/sub\", \"subscribe-file\": \"/home/ubuntu/workshop_dc/subfile.txt\", \"publish-on-change\": true } } Crea un manipulador que publique a configuraci\u00f3n do Device Client como mensaxe MQTT. $ sudo nano $HANDLER_DIR/device-client-config.sh $ sudo chmod 700 $HANDLER_DIR/device-client-config.sh $ sudo cat $HANDLER_DIR/device-client-config.sh #!/usr/bin/env sh set -e echo \"Running device-client-config.sh\" USER=$1 echo \"Username: $USER\" if id \"$USER\" 2> /dev/null && command -v \"sudo\" > /dev/null; then # get publish file from configuration PUBFILE=$(cat /etc/.aws-iot-device-client/aws-iot-device-client.conf | jq -e -r '.samples.\"pub-sub\".\"publish-file\"') STATUS=$? # check for publish file if [ $STATUS -eq 0 ] && sudo -u $USER -n test -f \"$PUBFILE\"; then sudo -u $USER -n cat /etc/.aws-iot-device-client/aws-iot-device-client.conf | jq '{\"conf\": .}' > $PUBFILE else echo \"A valid publish file was not found in the configuration\" exit $STATUS fi else echo \"username or sudo command not found\" exit 1 fi Creaci\u00f3n dun modelo de documento de traballo personalizado Vamos agora a crear un modelo de documento de traballo personalizado para usar co manipulador. Fai o seguinte: No ambiente Cloud9 no que est\u00e1 instalado o AWS IoT Device Client crea un ficheiro JSON co modelo de traballo. $ pwd /home/ubuntu/workshop_dc $ nano deviceConfJobTemplate.json $ cat deviceConfJobTemplate.json { \"version\": \"1.0\", \"steps\": [ { \"action\": { \"name\": \"Get-Configuration\", \"type\": \"runHandler\", \"input\": { \"handler\": \"device-client-config.sh\", \"path\": \"default\" }, \"runAsUser\": \"root\" } } ] } Sube o modelo ao bucket S3 que se usou no curso. Nomenclatura Usa o teu prefixo no nome do bucket . $ aws s3 cp deviceConfJobTemplate.json s3://xcpm2425-workshop-dc-bucket Na consola de AWS IoT escolle a opci\u00f3n Modelos de traballo dentro do men\u00fa Acci\u00f3ns remotas . Coa aba Modelos personalizados escollida, crea un novo modelo de traballo escollendo Crear modelo de traballo e indicando as opci\u00f3ns seguintes: Nome do modelo de traballo: deviceConfigTemplate . Lembra po\u00f1er o teu prefixo diante, p.ex. xcpm2425-deviceConfigTemplate . Descrici\u00f3n: pon unha descrici\u00f3n para o modelo. Documento de traballo: preme no bot\u00f3n Navegar no S3 e escolle o documento JSON que subiches a S3. Imaxe: configuraci\u00f3n do modelo de documento de traballo. Creaci\u00f3n dun traballo a partir do modelo No cliente MQTT da consola de AWS IoT subscr\u00edbete aos t\u00f3picos: /topic/workshop/dc/pub $aws/events/job/deviceConfig/completed $aws/events/jobExecution/deviceConfig/succeeded Abre unha segunda consola AWS IoT para crear o traballo nunha xanela diferente \u00e1 do cliente MQTT do paso 2. Nesta consola escolle a opci\u00f3n Modelos de traballo dentro do men\u00fa Acci\u00f3ns remotas e abre as propiedades do modelo deviceConfigTemplate premendo no seu nome. Crea un novo traballo a partires deste modelo premendo en Crear traballo con este modelo e indicando as opci\u00f3ns seguintes: Nome do traballo: deviceConfig . Descrici\u00f3n: pon unha descrici\u00f3n para o traballo. Cousas para executar este traballo: escolle deviceCLientThing . Documento de trabalho: non tes que facer nada. Os datos do modelo deviceConfigTemplate xa est\u00e1n cubertos. Tipo de execuci\u00f3n do traballo: escolle Snapshot . Imaxe: configuraci\u00f3n do traballo. Verificaci\u00f3n da execuci\u00f3n do traballo Comproba na consola do AWS IoT que o traballo se executou correctamente. Imaxe: execuci\u00f3n correcta do traballo na consola IoT. Comproba tam\u00e9n que o documento do traballo \u00e9 o que definimos no modelo. Imaxe: documento do traballo. Comproba que se recibiu a configuraci\u00f3n do dispositivo no t\u00f3pico /topic/workshop/dc/pub . Comproba tam\u00e9n as mensaxes do traballo recibidas nos outros t\u00f3picos do cliente MQTT. Imaxe: mensaxe recibida coa configuraci\u00e7on do dispositivo. E finalmente, comproba que apareza a execuci\u00f3n do traballo no log do ambiente Cloud9. Imaxe: mensaxe no log do ambiente Cloud9. Xustificaci\u00f3n da actividade Toma as seguintes capturas para a memoria de xustificaci\u00f3n da pr\u00e1ctica: Ambiente Cloud9 no que se vexa a sa\u00edda da execuci\u00f3n dos comandos seguintes: $ cat customJobTemplate.json $ aws s3 ls s3://xcpm2425-workshop-dc-bucket $ sudo cat $HANDLER_DIR/device-client-config.sh Na consola IoT as propiedades do modelo de documento de traballo deviceConfigTemplate (con que se vexa o apartado de detalles \u00e9 dabondo, os das configuraci\u00f3ns non fan falla). Na consola IoT as propiedades do traballo deviceConfig coa execuci\u00f3n finalizada correctamente. Cliente MQTT na consola IoT no que poida verse o contido da configuraci\u00f3n recibida no t\u00f3pico /topic/workshop/dc/pub . Importante As capturas te\u00f1en que asemellarse \u00e1s que se tomaron no curso e nas pr\u00e1cticas anteriores. As capturas tomadas na consola AWS te\u00f1en que inclu\u00edr o men\u00fa superior no que poida verse o nome de usuario da conta.","title":"Actividade 3"},{"location":"practica_3/actividade_3/#actividade-3","text":"IMPLEMENTACI\u00d3N DUN MANIPULADOR DE TRABALLOS (JOB HANDLER).","title":"Actividade 3"},{"location":"practica_3/actividade_3/#obxectivo","text":"O obxectivo desta actividade \u00e9 implementar un manipulador de traballos (Job Handler) no dispositivo IoT. O manipulador vai consistir nun script que publique a configuraci\u00f3n do dispositivo nunha mensaxe MQTT usando a funcionalidade de mensaxer\u00eda MQTT do Device Client que vimos nunha actividade anterior. Nota Podes ver aqu\u00ed a documentaci\u00f3n sobre os manipuladores de traballos do AWS IoT Device Client.","title":"Obxectivo"},{"location":"practica_3/actividade_3/#creacion-do-manipulador-de-traballos","text":"Para crear o manipulador de traballos fai o seguinte: No ambiente Cloud9 no que est\u00e1 instalado o AWS IoT Device Client comproba na configuraci\u00f3n dos traballos cal \u00e9 o directorio no que se almacenan os manipuladores. $ sudo cat /etc/.aws-iot-device-client/aws-iot-device-client.conf | jq '.jobs' { \"enabled\": true, \"handler-directory\": \"/etc/.aws-iot-device-client/jobs\" } Comproba cales son os manipuladores dispo\u00f1\u00edbeis. $ HANDLER_DIR=$(sudo cat /etc/.aws-iot-device-client/aws-iot-device-client.conf | jq -r '.jobs.\"handler-directory\"') $ sudo ls $HANDLER_DIR download-file.sh install-packages.sh remove-packages.sh shutdown.sh stop-services.sh verify-packages-removed.sh health-check.sh reboot.sh restart-services.sh start-services.sh verify-packages-installed.sh Na secci\u00f3n 5.1 do curso, o traballo que descargaba un ficheiro no dispositivo IoT creouse a partires do modelo de documento de traballo AWS-Download-File xestionado por AWS. Este modelo \u00e9 de tipo runHandler e executa no dispositivo IoT o manipulador download-file.sh pas\u00e1ndolle como par\u00e1metros a URL do ficheiro e o directorio no que descargalo. { \"version\": \"1.0\", \"steps\": [ { \"action\": { \"name\": \"Download-File\", \"type\": \"runHandler\", \"input\": { \"handler\": \"download-file.sh\", \"args\": [ \"${aws:iot:parameter:downloadUrl}\", \"${aws:iot:parameter:filePath}\" ], \"path\": \"${aws:iot:parameter:pathToHandler}\" }, \"runAsUser\": \"${aws:iot:parameter:runAsUser}\" } } ] } Comproba como \u00e9 a implementaci\u00f3n deste manipulador: $ sudo cat $HANDLER_DIR/download-file.sh #!/usr/bin/env sh set -e echo \"Running download-file.sh\" user=$1 fileUrl=$2 outputFile=$3 echo \"Username: $user\" echo \"File URL: $fileUrl\" echo \"Write documents to file: $outputFile\" if command -v \"wget\" > /dev/null then echo \"Using wget for downloading user specified file\" if id \"$user\" 2>/dev/null && command -v \"sudo\" > /dev/null; then if [ -d \"$outputFile\" ]; then sudo -u \"$user\" -n wget --quiet -P \"$outputFile\" \"$fileUrl\" else sudo -u \"$user\" -n wget --quiet -O \"$outputFile\" \"$fileUrl\" fi else echo \"username or sudo command not found\" if [ -d \"$outputFile\" ]; then wget --quiet -P \"$outputFile\" \"$fileUrl\" else wget --quiet -O \"$outputFile\" \"$fileUrl\" fi fi else >&2 echo \"Wget software package not installed on the device. Use the \\\"install-packages.sh\\\" operation to install the wget software package on this device.\" exit 1 fi Como podes ver tr\u00e1tase dun script que recibe 3 dos par\u00e1metros de entrada definidos no modelo: a conta de usuario que se vai usar para executar o script , a URL do ficheiro e o directorio no que gardalo, e utiliza o comando wget para descargar o ficheiro no directorio que se lle indica. Podes curiosear nas implementaci\u00f3ns dos outros manipuladores. Nota Se o prefires, tam\u00e9n podes ver aqu\u00ed a implementaci\u00f3n dos manipuladores instalados por defecto. No ambiente Cloud9 no que est\u00e1 instalado o AWS IoT Device Client comproba que a mensaxer\u00eda MQTT est\u00e1 activada e cales son o t\u00f3pico e ficheiro de publicaci\u00f3n. $ sudo cat /etc/.aws-iot-device-client/aws-iot-device-client.conf | jq '.samples' { \"pub-sub\": { \"enabled\": true, \"publish-topic\": \"/topic/workshop/dc/pub\", \"publish-file\": \"/home/ubuntu/workshop_dc/pubfile.txt\", \"subscribe-topic\": \"/topic/workshop/dc/sub\", \"subscribe-file\": \"/home/ubuntu/workshop_dc/subfile.txt\", \"publish-on-change\": true } } Crea un manipulador que publique a configuraci\u00f3n do Device Client como mensaxe MQTT. $ sudo nano $HANDLER_DIR/device-client-config.sh $ sudo chmod 700 $HANDLER_DIR/device-client-config.sh $ sudo cat $HANDLER_DIR/device-client-config.sh #!/usr/bin/env sh set -e echo \"Running device-client-config.sh\" USER=$1 echo \"Username: $USER\" if id \"$USER\" 2> /dev/null && command -v \"sudo\" > /dev/null; then # get publish file from configuration PUBFILE=$(cat /etc/.aws-iot-device-client/aws-iot-device-client.conf | jq -e -r '.samples.\"pub-sub\".\"publish-file\"') STATUS=$? # check for publish file if [ $STATUS -eq 0 ] && sudo -u $USER -n test -f \"$PUBFILE\"; then sudo -u $USER -n cat /etc/.aws-iot-device-client/aws-iot-device-client.conf | jq '{\"conf\": .}' > $PUBFILE else echo \"A valid publish file was not found in the configuration\" exit $STATUS fi else echo \"username or sudo command not found\" exit 1 fi","title":"Creaci\u00f3n do manipulador de traballos"},{"location":"practica_3/actividade_3/#creacion-dun-modelo-de-documento-de-traballo-personalizado","text":"Vamos agora a crear un modelo de documento de traballo personalizado para usar co manipulador. Fai o seguinte: No ambiente Cloud9 no que est\u00e1 instalado o AWS IoT Device Client crea un ficheiro JSON co modelo de traballo. $ pwd /home/ubuntu/workshop_dc $ nano deviceConfJobTemplate.json $ cat deviceConfJobTemplate.json { \"version\": \"1.0\", \"steps\": [ { \"action\": { \"name\": \"Get-Configuration\", \"type\": \"runHandler\", \"input\": { \"handler\": \"device-client-config.sh\", \"path\": \"default\" }, \"runAsUser\": \"root\" } } ] } Sube o modelo ao bucket S3 que se usou no curso. Nomenclatura Usa o teu prefixo no nome do bucket . $ aws s3 cp deviceConfJobTemplate.json s3://xcpm2425-workshop-dc-bucket Na consola de AWS IoT escolle a opci\u00f3n Modelos de traballo dentro do men\u00fa Acci\u00f3ns remotas . Coa aba Modelos personalizados escollida, crea un novo modelo de traballo escollendo Crear modelo de traballo e indicando as opci\u00f3ns seguintes: Nome do modelo de traballo: deviceConfigTemplate . Lembra po\u00f1er o teu prefixo diante, p.ex. xcpm2425-deviceConfigTemplate . Descrici\u00f3n: pon unha descrici\u00f3n para o modelo. Documento de traballo: preme no bot\u00f3n Navegar no S3 e escolle o documento JSON que subiches a S3. Imaxe: configuraci\u00f3n do modelo de documento de traballo.","title":"Creaci\u00f3n dun modelo de documento de traballo personalizado"},{"location":"practica_3/actividade_3/#creacion-dun-traballo-a-partir-do-modelo","text":"No cliente MQTT da consola de AWS IoT subscr\u00edbete aos t\u00f3picos: /topic/workshop/dc/pub $aws/events/job/deviceConfig/completed $aws/events/jobExecution/deviceConfig/succeeded Abre unha segunda consola AWS IoT para crear o traballo nunha xanela diferente \u00e1 do cliente MQTT do paso 2. Nesta consola escolle a opci\u00f3n Modelos de traballo dentro do men\u00fa Acci\u00f3ns remotas e abre as propiedades do modelo deviceConfigTemplate premendo no seu nome. Crea un novo traballo a partires deste modelo premendo en Crear traballo con este modelo e indicando as opci\u00f3ns seguintes: Nome do traballo: deviceConfig . Descrici\u00f3n: pon unha descrici\u00f3n para o traballo. Cousas para executar este traballo: escolle deviceCLientThing . Documento de trabalho: non tes que facer nada. Os datos do modelo deviceConfigTemplate xa est\u00e1n cubertos. Tipo de execuci\u00f3n do traballo: escolle Snapshot . Imaxe: configuraci\u00f3n do traballo.","title":"Creaci\u00f3n dun traballo a partir do modelo"},{"location":"practica_3/actividade_3/#verificacion-da-execucion-do-traballo","text":"Comproba na consola do AWS IoT que o traballo se executou correctamente. Imaxe: execuci\u00f3n correcta do traballo na consola IoT. Comproba tam\u00e9n que o documento do traballo \u00e9 o que definimos no modelo. Imaxe: documento do traballo. Comproba que se recibiu a configuraci\u00f3n do dispositivo no t\u00f3pico /topic/workshop/dc/pub . Comproba tam\u00e9n as mensaxes do traballo recibidas nos outros t\u00f3picos do cliente MQTT. Imaxe: mensaxe recibida coa configuraci\u00e7on do dispositivo. E finalmente, comproba que apareza a execuci\u00f3n do traballo no log do ambiente Cloud9. Imaxe: mensaxe no log do ambiente Cloud9.","title":"Verificaci\u00f3n da execuci\u00f3n do traballo"},{"location":"practica_3/actividade_3/#xustificacion-da-actividade","text":"Toma as seguintes capturas para a memoria de xustificaci\u00f3n da pr\u00e1ctica: Ambiente Cloud9 no que se vexa a sa\u00edda da execuci\u00f3n dos comandos seguintes: $ cat customJobTemplate.json $ aws s3 ls s3://xcpm2425-workshop-dc-bucket $ sudo cat $HANDLER_DIR/device-client-config.sh Na consola IoT as propiedades do modelo de documento de traballo deviceConfigTemplate (con que se vexa o apartado de detalles \u00e9 dabondo, os das configuraci\u00f3ns non fan falla). Na consola IoT as propiedades do traballo deviceConfig coa execuci\u00f3n finalizada correctamente. Cliente MQTT na consola IoT no que poida verse o contido da configuraci\u00f3n recibida no t\u00f3pico /topic/workshop/dc/pub . Importante As capturas te\u00f1en que asemellarse \u00e1s que se tomaron no curso e nas pr\u00e1cticas anteriores. As capturas tomadas na consola AWS te\u00f1en que inclu\u00edr o men\u00fa superior no que poida verse o nome de usuario da conta.","title":"Xustificaci\u00f3n da actividade"},{"location":"practica_3/actividade_4/","text":"Actividade 4 ENV\u00cdO DE DATOS DE TELEMETR\u00cdA DE SENSORES MEDIANTE MQTT. Obxectivo O obxectivo desta actividade \u00e9 comprobar o funcionamento da funcionalidade Publicaci\u00f3n de telemetr\u00edas de sensores do AWS IoT Device Client, que permite env\u00edar os datos de telemetr\u00eda dos sensores conectados no dispositivo IoT ao AWS IoT Core mediante MQTT. Nota Podes ver aqu\u00ed a documentaci\u00f3n da funcionalidade Publicaci\u00f3n de telemetr\u00edas de sensores . Configuraci\u00f3n da publicaci\u00f3n de telemetr\u00edas de sensores Edita o ficheiro de configuraci\u00f3n do Device Client para activar a publicaci\u00f3n de telemetr\u00edas de sensores. Nomenclatura Usa o teu prefixo no nome do sensor. $ sudo nano /etc/.aws-iot-device-client/aws-iot-device-client.conf $ sudo tail -13 /etc/.aws-iot-device-client/aws-iot-device-client.conf }, \"sensor-publish\": { \"sensors\": [ { \"name\": \"xcpm2425-sensor01\", \"addr\": \"/tmp/sensors/sensor01-server\", \"eom_delimiter\": \"[\\r\\n]+\", \"mqtt_topic\": \"/topic/workshop/dc/sensors/sensor01-data\", \"mqtt_heartbeat_topic\": \"/topic/workshop/dc/sensors/sensor01-heartbeat\" } ] } } Crea o ficheiro para o socket de dominio UNIX . $ mkdir /tmp/sensors $ touch /tmp/sensors/sensor01-server $ chmod 660 /tmp/sensors/sensor01-server Reinicia o servizo e comproba que non houbera ning\u00fan erro. $ sudo systemctl restart aws-iot-device-client $ sudo systemctl status aws-iot-device-client Compr\u00f3bao tam\u00e9n no ficheiro de log. $ sudo grep \"Sensor.cpp\" /var/log/aws-iot-device-client/aws-iot-device-client.log 2024-08-02T18:27:42.535Z [DEBUG] {Sensor.cpp}: Starting sensor name: xcpm2425-sensor01 2024-08-02T18:27:42.535Z [ERROR] {Sensor.cpp}: Error sensor name: xcpm2425-sensor01 func: aws_socket_connect msg: socket connection refused. De momento indica que se creou o sensor por\u00e9n non puido a\u00ednda conectarse ao socket . No cliente MQTT da consola de AWS IoT subscr\u00edbete aos t\u00f3picos configurados para publicar a telemetr\u00eda e o heartbeat do sensor: /topic/workshop/dc/sensors/sensor01-data /topic/workshop/dc/sensors/sensor01-heartbeat Nota Cando te subscribas ao t\u00f3pico do heartbeat escolle a opci\u00f3n Mostrar a carga \u00fatil como strings na Configuraci\u00f3n adicional . Crea un programa Python que simule o funcionamento dun sensor que agarda por unha conexi\u00f3n ao socket para enviar os seus datos de telemetr\u00eda. Nomenclatura Usa o teu nome no payload da mensaxe. $ pwd /home/ubuntu/workshop_dc $ nano sensor.py $ cat sensor.py # imports import socket import os import time # MQTT message payload message = '{\\\"message\\\":\\\"Datos do sensor01 de <Pon aqu\u00ed o teu nome>\\\"}\\r\\n' # set socket location server_address = '/tmp/sensors/sensor01-server' # check for previous socket and clean up try: os.unlink(server_address) except OSError: if os.path.exists(server_address): print (\"socket already exists\") # create socket with socket.socket(socket.AF_UNIX, socket.SOCK_STREAM) as s: print (\"socket successfully created\") # Avoid bind() exception: OSError: [Errno 48] Address already in use s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1) # bind to the socket s.bind(server_address) print (\"binding complete\") # start listening mode s.listen(5) print (\"socket is listening\") # accept connection conn, addr = s.accept() with conn: print(f\"Connected by {addr}\") while True: print('sending message:') print(message) conn.sendall(message.encode('utf-8')) time.sleep(5) Nota Este simulador \u00e9 moi simple e acepta todas as conexi\u00f3ns sen realizar ningunha autenticaci\u00f3n do cliente. Executa o simulador do sensor. $ python3 sensor.py No terminal aparecer\u00e1 unha mensaxe por cada ocasi\u00f3n na que o Device Client se conecta ao socket , por defecto cada 10 segundos. Imaxe: execuci\u00f3n do simulador de sensor. Comproba no cliente MQTT que as mensaxes se reciben no t\u00f3pico /topic/workshop/dc/sensors/sensor01-data . Imaxe: mensaxe publicada no cliente MQTT. Nota Se agardas o tempo suficiente (por defecto 300 segundos) ver\u00e1s que se reciben tam\u00e9n as mensaxes de heartbeat do sensor no outro t\u00f3pico. O payload destas mensaxes cont\u00e9n unicamente o nome do sensor. Imaxe: mensaxe de heartbeat publicada no cliente MQTT. Comproba tam\u00e9n o ficheiro de log. $sudo tail -F /var/log/aws-iot-device-client/aws-iot-device-client.log 2024-08-02T18:48:23.378Z [DEBUG] {Sensor.cpp}: Nothing to publish sensor name: xcpm2425-sensor01 2024-08-02T18:48:23.378Z [DEBUG] {Sensor.cpp}: Read sensor name: xcpm2425-sensor01 bytes: 51 2024-08-02T18:48:23.378Z [DEBUG] {Sensor.cpp}: Publish sensor name: xcpm2425-sensor01 bytes: 51 2024-08-02T18:48:23.385Z [DEBUG] {Sensor.cpp}: Publish complete sensor name: xcpm2425-sensor01 packetId: 19 2024-08-02T18:48:28.383Z [DEBUG] {Sensor.cpp}: Read sensor name: xcpm2425-sensor01 bytes: 51 2024-08-02T18:48:28.383Z [DEBUG] {Sensor.cpp}: Publish sensor name: xcpm2425-sensor01 bytes: 51 2024-08-02T18:48:28.389Z [DEBUG] {Sensor.cpp}: Publish complete sensor name: xcpm2425-sensor01 packetId: 20 Det\u00e9n o simulador premendo Ctrl+C . Xustificaci\u00f3n da actividade Toma as seguintes capturas para a memoria de xustificaci\u00f3n da pr\u00e1ctica: Ambiente Cloud9 no que se vexa a sa\u00edda do terminal no que se executou sensor.py e a execuci\u00f3n do comando seguinte: $ sudo cat /etc/.aws-iot-device-client/aws-iot-device-client.conf | jq '.\"sensor-publish\"' Consola IoT coas mensaxes MQTT recibidas no t\u00f3pico /topic/workshop/dc/sensors/sensor01-data nas que poida verse o payload . Importante As capturas te\u00f1en que asemellarse \u00e1s que se tomaron no curso e nas pr\u00e1cticas anteriores. As capturas tomadas na consola AWS te\u00f1en que inclu\u00edr o men\u00fa superior no que poida verse o nome de usuario da conta.","title":"Actividade 4"},{"location":"practica_3/actividade_4/#actividade-4","text":"ENV\u00cdO DE DATOS DE TELEMETR\u00cdA DE SENSORES MEDIANTE MQTT.","title":"Actividade 4"},{"location":"practica_3/actividade_4/#obxectivo","text":"O obxectivo desta actividade \u00e9 comprobar o funcionamento da funcionalidade Publicaci\u00f3n de telemetr\u00edas de sensores do AWS IoT Device Client, que permite env\u00edar os datos de telemetr\u00eda dos sensores conectados no dispositivo IoT ao AWS IoT Core mediante MQTT. Nota Podes ver aqu\u00ed a documentaci\u00f3n da funcionalidade Publicaci\u00f3n de telemetr\u00edas de sensores .","title":"Obxectivo"},{"location":"practica_3/actividade_4/#configuracion-da-publicacion-de-telemetrias-de-sensores","text":"Edita o ficheiro de configuraci\u00f3n do Device Client para activar a publicaci\u00f3n de telemetr\u00edas de sensores. Nomenclatura Usa o teu prefixo no nome do sensor. $ sudo nano /etc/.aws-iot-device-client/aws-iot-device-client.conf $ sudo tail -13 /etc/.aws-iot-device-client/aws-iot-device-client.conf }, \"sensor-publish\": { \"sensors\": [ { \"name\": \"xcpm2425-sensor01\", \"addr\": \"/tmp/sensors/sensor01-server\", \"eom_delimiter\": \"[\\r\\n]+\", \"mqtt_topic\": \"/topic/workshop/dc/sensors/sensor01-data\", \"mqtt_heartbeat_topic\": \"/topic/workshop/dc/sensors/sensor01-heartbeat\" } ] } } Crea o ficheiro para o socket de dominio UNIX . $ mkdir /tmp/sensors $ touch /tmp/sensors/sensor01-server $ chmod 660 /tmp/sensors/sensor01-server Reinicia o servizo e comproba que non houbera ning\u00fan erro. $ sudo systemctl restart aws-iot-device-client $ sudo systemctl status aws-iot-device-client Compr\u00f3bao tam\u00e9n no ficheiro de log. $ sudo grep \"Sensor.cpp\" /var/log/aws-iot-device-client/aws-iot-device-client.log 2024-08-02T18:27:42.535Z [DEBUG] {Sensor.cpp}: Starting sensor name: xcpm2425-sensor01 2024-08-02T18:27:42.535Z [ERROR] {Sensor.cpp}: Error sensor name: xcpm2425-sensor01 func: aws_socket_connect msg: socket connection refused. De momento indica que se creou o sensor por\u00e9n non puido a\u00ednda conectarse ao socket . No cliente MQTT da consola de AWS IoT subscr\u00edbete aos t\u00f3picos configurados para publicar a telemetr\u00eda e o heartbeat do sensor: /topic/workshop/dc/sensors/sensor01-data /topic/workshop/dc/sensors/sensor01-heartbeat Nota Cando te subscribas ao t\u00f3pico do heartbeat escolle a opci\u00f3n Mostrar a carga \u00fatil como strings na Configuraci\u00f3n adicional . Crea un programa Python que simule o funcionamento dun sensor que agarda por unha conexi\u00f3n ao socket para enviar os seus datos de telemetr\u00eda. Nomenclatura Usa o teu nome no payload da mensaxe. $ pwd /home/ubuntu/workshop_dc $ nano sensor.py $ cat sensor.py # imports import socket import os import time # MQTT message payload message = '{\\\"message\\\":\\\"Datos do sensor01 de <Pon aqu\u00ed o teu nome>\\\"}\\r\\n' # set socket location server_address = '/tmp/sensors/sensor01-server' # check for previous socket and clean up try: os.unlink(server_address) except OSError: if os.path.exists(server_address): print (\"socket already exists\") # create socket with socket.socket(socket.AF_UNIX, socket.SOCK_STREAM) as s: print (\"socket successfully created\") # Avoid bind() exception: OSError: [Errno 48] Address already in use s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1) # bind to the socket s.bind(server_address) print (\"binding complete\") # start listening mode s.listen(5) print (\"socket is listening\") # accept connection conn, addr = s.accept() with conn: print(f\"Connected by {addr}\") while True: print('sending message:') print(message) conn.sendall(message.encode('utf-8')) time.sleep(5) Nota Este simulador \u00e9 moi simple e acepta todas as conexi\u00f3ns sen realizar ningunha autenticaci\u00f3n do cliente. Executa o simulador do sensor. $ python3 sensor.py No terminal aparecer\u00e1 unha mensaxe por cada ocasi\u00f3n na que o Device Client se conecta ao socket , por defecto cada 10 segundos. Imaxe: execuci\u00f3n do simulador de sensor. Comproba no cliente MQTT que as mensaxes se reciben no t\u00f3pico /topic/workshop/dc/sensors/sensor01-data . Imaxe: mensaxe publicada no cliente MQTT. Nota Se agardas o tempo suficiente (por defecto 300 segundos) ver\u00e1s que se reciben tam\u00e9n as mensaxes de heartbeat do sensor no outro t\u00f3pico. O payload destas mensaxes cont\u00e9n unicamente o nome do sensor. Imaxe: mensaxe de heartbeat publicada no cliente MQTT. Comproba tam\u00e9n o ficheiro de log. $sudo tail -F /var/log/aws-iot-device-client/aws-iot-device-client.log 2024-08-02T18:48:23.378Z [DEBUG] {Sensor.cpp}: Nothing to publish sensor name: xcpm2425-sensor01 2024-08-02T18:48:23.378Z [DEBUG] {Sensor.cpp}: Read sensor name: xcpm2425-sensor01 bytes: 51 2024-08-02T18:48:23.378Z [DEBUG] {Sensor.cpp}: Publish sensor name: xcpm2425-sensor01 bytes: 51 2024-08-02T18:48:23.385Z [DEBUG] {Sensor.cpp}: Publish complete sensor name: xcpm2425-sensor01 packetId: 19 2024-08-02T18:48:28.383Z [DEBUG] {Sensor.cpp}: Read sensor name: xcpm2425-sensor01 bytes: 51 2024-08-02T18:48:28.383Z [DEBUG] {Sensor.cpp}: Publish sensor name: xcpm2425-sensor01 bytes: 51 2024-08-02T18:48:28.389Z [DEBUG] {Sensor.cpp}: Publish complete sensor name: xcpm2425-sensor01 packetId: 20 Det\u00e9n o simulador premendo Ctrl+C .","title":"Configuraci\u00f3n da publicaci\u00f3n de telemetr\u00edas de sensores"},{"location":"practica_3/actividade_4/#xustificacion-da-actividade","text":"Toma as seguintes capturas para a memoria de xustificaci\u00f3n da pr\u00e1ctica: Ambiente Cloud9 no que se vexa a sa\u00edda do terminal no que se executou sensor.py e a execuci\u00f3n do comando seguinte: $ sudo cat /etc/.aws-iot-device-client/aws-iot-device-client.conf | jq '.\"sensor-publish\"' Consola IoT coas mensaxes MQTT recibidas no t\u00f3pico /topic/workshop/dc/sensors/sensor01-data nas que poida verse o payload . Importante As capturas te\u00f1en que asemellarse \u00e1s que se tomaron no curso e nas pr\u00e1cticas anteriores. As capturas tomadas na consola AWS te\u00f1en que inclu\u00edr o men\u00fa superior no que poida verse o nome de usuario da conta.","title":"Xustificaci\u00f3n da actividade"},{"location":"practica_4/actividade_1/","text":"Actividade 1 COMPO\u00d1ENTES DE APRENDIZAXE M\u00c1QUINA Obxectivo O obxectivo desta actividade \u00e9 comprobar o funcionamento dos compo\u00f1entes para a execuci\u00f3n de modelos de aprendizaxe m\u00e1quina en dispositivos Greengrass. Usaremos como exemplo o compo\u00f1ente de clasificaci\u00f3n de imaxes con Deep Learning Runtime (DLR) . Este compo\u00f1ente instala o runtime de DLR e utiliza un modelo ResNet-50 pre-adestrado para realizar a clasificaci\u00f3n de imaxes. Os resultados da clasificaci\u00f3n publ\u00edcanse nun t\u00f3pico MQTT predefinido. Nota Podes ver aqu\u00ed a documentaci\u00f3n sobre a execuci\u00f3n de modelos de Aprendizaxe M\u00e1quina no Greengrass. Preparar a instancia do ambiente Cloud9 Antes de despregar o compo\u00f1ente, temos que aumentar a cantidade de disco dispo\u00f1\u00edbel na instancia EC2 do ambiente Cloud9. Fai o seguinte: Nun terminal do ambiente Cloud9 executa o comando df -h para ver o espazo de disco dispo\u00f1\u00edbel. Imaxe: Espazo de disco dispo\u00f1\u00edbel. Na consola do servizo Cloud9 abre as propiedades do ambiente edgeDevice e na aba Instancia do EC2 preme no bot\u00f3n Administrar instancia do EC2 . Na consola EC2 escolle a instancia para ver as s\u00faas propiedades e na aba Almacenamento preme no identificador do volume EBS. Na consola EBS escolle o volume da instancia e no men\u00fa de Acci\u00f3ns escolle a opci\u00f3n Crear instantanea . Pon unha descrici\u00f3n e acepta para crear a instantanea. Nota Esta instantanea serviranos como copia de respaldo no caso de que haxa alg\u00fan problema durante o redimensionamento do volume. Imaxe: creaci\u00f3n da instantanea do volume. Unha vez creada a instantanea, escolle de novo o volume na consola EBS e no men\u00fa de Acci\u00f3ns escolle a opci\u00f3n Modificar volume . Cambia o tama\u00f1o a 100GiB e acepta para modificar. Imaxe: modificaci\u00f3n do tama\u00f1o do volume. Para poder facer uso do novo espazo adicional hai que agardar a que o volume pase ao estado En uso - optimizando (#%) . Unha vez que iso aconteza fai o seguinte nun terminal do ambiente Cloud9: Executa o comando lsblk /dev/nvme0n1 . O volume aparece co novo tama\u00f1o por\u00e9n o espazo adicional a\u00ednda est\u00e1 sen asignar a ningunha partici\u00f3n. Imaxe: espazo de disco adicional a\u00ednda sen usar. Incrementa o tama\u00f1o da partici\u00f3n 1 executando o comando sudo growpart /dev/nvme0n1 1 . Executa de novo o comando lsblk /dev/nvme0n1 e comproba como agora o espazo adicional aparece xa asignado \u00e1 partici\u00f3n 1. Imaxe: espazo adicional asignado \u00e1 partici\u00f3n 1. Redimensiona o sistema de ficheiros montado nesa partici\u00f3n executando o comando: sudo resize2fs /dev/root . Comproba que se redimensionou o sistema de ficheiros executando o comando df -h . Imaxe: sistema de ficheiros redimensionado. Despregadura do compo\u00f1ente para a clasificaci\u00f3n de imaxes Para despregar o compo\u00f1ente fai o seguinte: No ambiente Cloud9 instala a librar\u00eda GNU C , que \u00e9 un dos requisitos do compo\u00f1ente. $ sudo apt update $ sudo apt install glibc-source -y No cliente MQTT da consola de AWS IoT subscr\u00edbete ao t\u00f3pico predefinido ml/dlr/image-classification . O t\u00f3pico pode cambiarse na configuraci\u00f3n do compo\u00f1ente. Noutra xanela diferente, escolle a opci\u00f3n Compo\u00f1entes dentro do men\u00fa Dispositivos Greengrass da consola de AWS IoT. Escolle a aba Compo\u00f1entes p\u00fablicos e preme no nome do compo\u00f1ente aws.greengrass.DLRImageClassification . Revisa a configuraci\u00f3n por defecto e comproba na documentaci\u00f3n do compo\u00f1ente o significado dos par\u00e1metros configurados. Revisa tam\u00e9n as dependencias do compo\u00f1ente. Desprega o compo\u00f1ente premendo en Despregar e indicando as opci\u00f3ns seguintes: Adicionar \u00e1 despregadura: escolle Adicionar a unha despregadura exitente e a despregadura Deployment for GreengrassQuickStartGroup . Seleccionar compo\u00f1entes: podes desactivar os compo\u00f1entes personalizados que se usaron como exemplo no curso. Deixa todas as demais opci\u00f3ns nos seus valores por defecto . Verificaci\u00f3n da despregadura Na consola IoT comproba que a despregadura remata sen erros. Nota Se hai erros debidos a compo\u00f1entes locais do curso podes reinicialos e reintentar a despregadura ou eliminalos se iso non o soluciona. Mira na secci\u00f3n de Tips&Troubleshoot do curso como facelo. No cliente MQTT da consola do AWS IoT comproba que se recibiu o resultado da inferencia no t\u00f3pico ml/dlr/image-classification . Imaxe: resultado do algoritmo de clasificaci\u00f3n no t\u00f3pico MQTT. Comproba a sa\u00edda no ficheiro de log do compo\u00f1ente. $ sudo tail -2 /greengrass/v2/logs/aws.greengrass.DLRImageClassification.log 2024-08-13T07:42:08.693Z [INFO] (Copier) aws.greengrass.DLRImageClassification: stdout. {\"timestamp\": \"2024-08-13 07:42:08.140244\", \"inference-type\": \"image-classification\", \"inference-description\": \"Top 5 predictions with score 0.3 or above \", \"inference-results\": [{\"Label\": \"tabby, tabby cat\", \"Score\": \"7.7886543\"}, {\"Label\": \"Egyptian cat\", \"Score\": \"6.947347\"}, {\"Label\": \"tiger cat\", \"Score\": \"6.8371673\"}, {\"Label\": \"doormat, welcome mat\", \"Score\": \"5.378184\"}, {\"Label\": \"plastic bag\", \"Score\": \"4.5232644\"}]}. {scriptName=services.aws.greengrass.DLRImageClassification.lifecycle.run.script, serviceName=aws.greengrass.DLRImageClassification, currentState=RUNNING} 2024-08-13T07:42:08.694Z [INFO] (Copier) aws.greengrass.DLRImageClassification: stdout. Publishing results to the IoT core.... {scriptName=services.aws.greengrass.DLRImageClassification.lifecycle.run.script, serviceName=aws.greengrass.DLRImageClassification, currentState=RUNNING} Se os pasos anteriores non dan os resultados agardados, comproba no log do Greengrass se houbo erros durante a despregadura do compo\u00f1ente. Podes consultar aqu\u00ed os erros m\u00e1is com\u00fans. Xustificaci\u00f3n da actividade Toma as seguintes capturas para a memoria de xustificaci\u00f3n da pr\u00e1ctica: Ambiente Cloud9 mostrando a sa\u00edda da execuci\u00f3n dos comandos seguintes: $ sudo /greengrass/v2/bin/greengrass-cli component list | grep -E 'Component Name:.*DLR' -A 3 $ sudo tail -2 /greengrass/v2/logs/aws.greengrass.DLRImageClassification.log Consola IoT coa mensaxe MQTT recibida no t\u00f3pico ml/dlr/image-classification , na que poida verse o payload . Importante As capturas te\u00f1en que asemellarse \u00e1s que se tomaron no curso e nas pr\u00e1cticas anteriores. As capturas tomadas na consola AWS te\u00f1en que inclu\u00edr o men\u00fa superior no que poida verse o nome de usuario da conta.","title":"Actividade 1"},{"location":"practica_4/actividade_1/#actividade-1","text":"COMPO\u00d1ENTES DE APRENDIZAXE M\u00c1QUINA","title":"Actividade 1"},{"location":"practica_4/actividade_1/#obxectivo","text":"O obxectivo desta actividade \u00e9 comprobar o funcionamento dos compo\u00f1entes para a execuci\u00f3n de modelos de aprendizaxe m\u00e1quina en dispositivos Greengrass. Usaremos como exemplo o compo\u00f1ente de clasificaci\u00f3n de imaxes con Deep Learning Runtime (DLR) . Este compo\u00f1ente instala o runtime de DLR e utiliza un modelo ResNet-50 pre-adestrado para realizar a clasificaci\u00f3n de imaxes. Os resultados da clasificaci\u00f3n publ\u00edcanse nun t\u00f3pico MQTT predefinido. Nota Podes ver aqu\u00ed a documentaci\u00f3n sobre a execuci\u00f3n de modelos de Aprendizaxe M\u00e1quina no Greengrass.","title":"Obxectivo"},{"location":"practica_4/actividade_1/#preparar-a-instancia-do-ambiente-cloud9","text":"Antes de despregar o compo\u00f1ente, temos que aumentar a cantidade de disco dispo\u00f1\u00edbel na instancia EC2 do ambiente Cloud9. Fai o seguinte: Nun terminal do ambiente Cloud9 executa o comando df -h para ver o espazo de disco dispo\u00f1\u00edbel. Imaxe: Espazo de disco dispo\u00f1\u00edbel. Na consola do servizo Cloud9 abre as propiedades do ambiente edgeDevice e na aba Instancia do EC2 preme no bot\u00f3n Administrar instancia do EC2 . Na consola EC2 escolle a instancia para ver as s\u00faas propiedades e na aba Almacenamento preme no identificador do volume EBS. Na consola EBS escolle o volume da instancia e no men\u00fa de Acci\u00f3ns escolle a opci\u00f3n Crear instantanea . Pon unha descrici\u00f3n e acepta para crear a instantanea. Nota Esta instantanea serviranos como copia de respaldo no caso de que haxa alg\u00fan problema durante o redimensionamento do volume. Imaxe: creaci\u00f3n da instantanea do volume. Unha vez creada a instantanea, escolle de novo o volume na consola EBS e no men\u00fa de Acci\u00f3ns escolle a opci\u00f3n Modificar volume . Cambia o tama\u00f1o a 100GiB e acepta para modificar. Imaxe: modificaci\u00f3n do tama\u00f1o do volume. Para poder facer uso do novo espazo adicional hai que agardar a que o volume pase ao estado En uso - optimizando (#%) . Unha vez que iso aconteza fai o seguinte nun terminal do ambiente Cloud9: Executa o comando lsblk /dev/nvme0n1 . O volume aparece co novo tama\u00f1o por\u00e9n o espazo adicional a\u00ednda est\u00e1 sen asignar a ningunha partici\u00f3n. Imaxe: espazo de disco adicional a\u00ednda sen usar. Incrementa o tama\u00f1o da partici\u00f3n 1 executando o comando sudo growpart /dev/nvme0n1 1 . Executa de novo o comando lsblk /dev/nvme0n1 e comproba como agora o espazo adicional aparece xa asignado \u00e1 partici\u00f3n 1. Imaxe: espazo adicional asignado \u00e1 partici\u00f3n 1. Redimensiona o sistema de ficheiros montado nesa partici\u00f3n executando o comando: sudo resize2fs /dev/root . Comproba que se redimensionou o sistema de ficheiros executando o comando df -h . Imaxe: sistema de ficheiros redimensionado.","title":"Preparar a instancia do ambiente Cloud9"},{"location":"practica_4/actividade_1/#despregadura-do-componente-para-a-clasificacion-de-imaxes","text":"Para despregar o compo\u00f1ente fai o seguinte: No ambiente Cloud9 instala a librar\u00eda GNU C , que \u00e9 un dos requisitos do compo\u00f1ente. $ sudo apt update $ sudo apt install glibc-source -y No cliente MQTT da consola de AWS IoT subscr\u00edbete ao t\u00f3pico predefinido ml/dlr/image-classification . O t\u00f3pico pode cambiarse na configuraci\u00f3n do compo\u00f1ente. Noutra xanela diferente, escolle a opci\u00f3n Compo\u00f1entes dentro do men\u00fa Dispositivos Greengrass da consola de AWS IoT. Escolle a aba Compo\u00f1entes p\u00fablicos e preme no nome do compo\u00f1ente aws.greengrass.DLRImageClassification . Revisa a configuraci\u00f3n por defecto e comproba na documentaci\u00f3n do compo\u00f1ente o significado dos par\u00e1metros configurados. Revisa tam\u00e9n as dependencias do compo\u00f1ente. Desprega o compo\u00f1ente premendo en Despregar e indicando as opci\u00f3ns seguintes: Adicionar \u00e1 despregadura: escolle Adicionar a unha despregadura exitente e a despregadura Deployment for GreengrassQuickStartGroup . Seleccionar compo\u00f1entes: podes desactivar os compo\u00f1entes personalizados que se usaron como exemplo no curso. Deixa todas as demais opci\u00f3ns nos seus valores por defecto .","title":"Despregadura do compo\u00f1ente para a clasificaci\u00f3n de imaxes"},{"location":"practica_4/actividade_1/#verificacion-da-despregadura","text":"Na consola IoT comproba que a despregadura remata sen erros. Nota Se hai erros debidos a compo\u00f1entes locais do curso podes reinicialos e reintentar a despregadura ou eliminalos se iso non o soluciona. Mira na secci\u00f3n de Tips&Troubleshoot do curso como facelo. No cliente MQTT da consola do AWS IoT comproba que se recibiu o resultado da inferencia no t\u00f3pico ml/dlr/image-classification . Imaxe: resultado do algoritmo de clasificaci\u00f3n no t\u00f3pico MQTT. Comproba a sa\u00edda no ficheiro de log do compo\u00f1ente. $ sudo tail -2 /greengrass/v2/logs/aws.greengrass.DLRImageClassification.log 2024-08-13T07:42:08.693Z [INFO] (Copier) aws.greengrass.DLRImageClassification: stdout. {\"timestamp\": \"2024-08-13 07:42:08.140244\", \"inference-type\": \"image-classification\", \"inference-description\": \"Top 5 predictions with score 0.3 or above \", \"inference-results\": [{\"Label\": \"tabby, tabby cat\", \"Score\": \"7.7886543\"}, {\"Label\": \"Egyptian cat\", \"Score\": \"6.947347\"}, {\"Label\": \"tiger cat\", \"Score\": \"6.8371673\"}, {\"Label\": \"doormat, welcome mat\", \"Score\": \"5.378184\"}, {\"Label\": \"plastic bag\", \"Score\": \"4.5232644\"}]}. {scriptName=services.aws.greengrass.DLRImageClassification.lifecycle.run.script, serviceName=aws.greengrass.DLRImageClassification, currentState=RUNNING} 2024-08-13T07:42:08.694Z [INFO] (Copier) aws.greengrass.DLRImageClassification: stdout. Publishing results to the IoT core.... {scriptName=services.aws.greengrass.DLRImageClassification.lifecycle.run.script, serviceName=aws.greengrass.DLRImageClassification, currentState=RUNNING} Se os pasos anteriores non dan os resultados agardados, comproba no log do Greengrass se houbo erros durante a despregadura do compo\u00f1ente. Podes consultar aqu\u00ed os erros m\u00e1is com\u00fans.","title":"Verificaci\u00f3n da despregadura"},{"location":"practica_4/actividade_1/#xustificacion-da-actividade","text":"Toma as seguintes capturas para a memoria de xustificaci\u00f3n da pr\u00e1ctica: Ambiente Cloud9 mostrando a sa\u00edda da execuci\u00f3n dos comandos seguintes: $ sudo /greengrass/v2/bin/greengrass-cli component list | grep -E 'Component Name:.*DLR' -A 3 $ sudo tail -2 /greengrass/v2/logs/aws.greengrass.DLRImageClassification.log Consola IoT coa mensaxe MQTT recibida no t\u00f3pico ml/dlr/image-classification , na que poida verse o payload . Importante As capturas te\u00f1en que asemellarse \u00e1s que se tomaron no curso e nas pr\u00e1cticas anteriores. As capturas tomadas na consola AWS te\u00f1en que inclu\u00edr o men\u00fa superior no que poida verse o nome de usuario da conta.","title":"Xustificaci\u00f3n da actividade"},{"location":"practica_4/actividade_2/","text":"Actividade 2 COMPO\u00d1ENTES PERSONALIZADOS DE APRENDIZAXE M\u00c1QUINA Obxectivo O obxectivo desta actividade \u00e9 crear un compo\u00f1ente personalizado para a execuci\u00f3n de modelos de aprendizaxe m\u00e1quina (ML). A partires do compo\u00f1ente de inferencia da actividade anterior ( aws.greengrass.DLRImageClassification ) vamos crear unha versi\u00f3n modificada que se subscriba a un t\u00f3pico IPC predefinido no que agarde recibir mensaxes JSON co seguinte esquema: { \"image\": \"<ficheiro_jpeg>\" } Cada vez que reciba unha mensaxe o compo\u00f1ente far\u00e1 unha inferencia coa imaxe indicada do directorio predefinido de imaxes e publicar\u00e1 o resultado no t\u00f3pico MQTT predefinido. Nota Podes ver aqu\u00ed a documentaci\u00f3n sobre a implementaci\u00f3n de compo\u00f1entes ML personalizados. Creaci\u00f3n do compo\u00f1ente de inferencia ML personalizado Para crear o compo\u00f1ente fai o seguinte no ambiente Cloud9: Descarga a receita do compo\u00f1ente no directorio de receitas. $ cd ~/environment/GreengrassCore/recipes $ DLR_INFERENCE_ARN=$(aws greengrassv2 list-components \\ --scope PUBLIC \\ --query 'components[?componentName==`aws.greengrass.DLRImageClassification`]' | jq -r '.[0].arn') $ DLR_INFERENCE_VERSION_ARN=$(aws greengrassv2 list-component-versions \\ --arn $DLR_INFERENCE_ARN \\ --query 'componentVersions[0].arn' \\ --output text) $ aws greengrassv2 get-component \\ --arn $DLR_INFERENCE_VERSION_ARN \\ --recipe-output-format JSON \\ --query recipe \\ --output text | base64 --decode | jq '.' > aws.greengrass.DLRImageClassification-1.0.0.json Descarga a receita modificada que vamos usar para o compo\u00f1ente personalizado. Edita a receita e insire o teu nome no campo ComponentPublisher . $ wget -O com.example.CustomDLRImageClassification-1.0.0.json https://miot-cniot.github.io/practica_4/stuff/CustomDLRImageClassification-1.0.0.json Compara as receitas e comproba os cambios que se fixeron para adaptala ao noso exemplo. Os principais foron: Reduciuse o n\u00famero de plataformas soportadas polo compo\u00f1ente \u00e1 \u00fanica que nos interesa para o exemplo. Engadironse \u00e1 configuraci\u00f3n unha pol\u00edtica de control de acceso para os t\u00f3picos IPC e un par\u00e1metro LocalTopic para configurar o t\u00f3pico IPC a usar. Comproba os artefactos do compo\u00f1ente orixinal. $ sudo ls -l /greengrass/v2/packages/artifacts-unarchived/aws.greengrass.DLRImageClassification/2.1.14/image_classification/ Imaxe: artefactos do compo\u00f1ente DLRImageClassification. Crea o directorio para os artefactos do compo\u00f1ente personalizado. $ mkdir -p ~/environment/GreengrassCore/artifacts/com.example.CustomDLRImageClassification/1.0.0 && cd ~/environment/GreengrassCore/artifacts/com.example.CustomDLRImageClassification/1.0.0 Copia os ficheiros Python ao directorio de artefactos do compo\u00f1ente personalizado e configura os permisos. $ sudo cp /greengrass/v2/packages/artifacts-unarchived/aws.greengrass.DLRImageClassification/2.1.14/image_classification/*.py . $ sudo chown ubuntu:ubuntu *.py $ chmod 664 *.py Descarga o ficheiro inference.py modificado para o compo\u00f1ente personalizado. $ mv inference.py inference.1.py $ wget https://miot-cniot.github.io/practica_4/stuff/inference.py Abre ambos ficheiros inference e comproba os cambios que se fixeron para adaptalo ao noso exemplo. Os principais foron: Engadiuse o c\u00f3digo que realiza a subscrici\u00f3n ao t\u00f3pico IPC. Definiuse un manexador ( InferenceRequestHandler ) para procesar os eventos da subscrici\u00f3n IPC. A parte m\u00e1is relevante do manexador \u00e9 o m\u00e9todo on_stream_event que \u00e9 o que procesa as mensaxes que se reciben no t\u00f3pico e fai unha inferencia se procede. Nota Presta atenci\u00f3n a que o c\u00f3digo engadido en inference.py \u00e9 semellante ao do Subscriber que se viu na secci\u00f3n 5 do curso. Unha vez remates de comprobar as diferenzas, elimina a copia inference.1.py . Crea un directorio para as imaxes e descarga a imaxe de proba. $ mkdir ~/environment/image_classification && cd ~/environment/image_classification $ wget https://raw.githubusercontent.com/awslabs/aws-greengrass-labs-ml-components/main/dlr/aws.greengrass.DLRImageClassification/image_classification/sample_images/cat.jpeg Despregadura do compo\u00f1ente Na consola IoT fai unha nova despregadura no dispositivo Greengrass edgeDevice que NON incl\u00faa o compo\u00f1ente aws.greengrass.DLRImageClassification . Aseg\u00farate de que non quede ningunha dependencia do compo\u00f1ente no dispositivo. $ sudo /greengrass/v2/bin/greengrass-cli component list | grep -E 'Component Name:.*DLR' -A 3 No cliente MQTT da consola de AWS IoT subscr\u00edbete ao t\u00f3pico ml/custom/image-classification , no que o compo\u00f1ente personalizado publicar\u00e1 os resultados das inferencias. Desprega o compo\u00f1ente personalizado. $ sudo /greengrass/v2/bin/greengrass-cli deployment create \\ --recipeDir ~/environment/GreengrassCore/recipes \\ --artifactDir ~/environment/GreengrassCore/artifacts \\ --merge \"com.example.CustomDLRImageClassification=1.0.0\" Comproba que a despregadura se completou correctamente. $ sudo /greengrass/v2/bin/greengrass-cli component list | grep -E 'Component Name:.*DLR' -A 3 $ sudo cat /greengrass/v2/logs/com.example.CustomDLRImageClassification.log Comproba tam\u00e9n se se recibiu no cliente MQTT da consola AWS IoT o resultado da inferencia no t\u00f3pico ml/custom/image-classification . Se os pasos anteriores non dan os resultados agardados, comproba no log do Greengrass se houbo erros durante a despregadura do compo\u00f1ente. Podes consultar aqu\u00ed os erros m\u00e1is com\u00fans. Verificaci\u00f3n do funcionamento Abre un novo terminal no ambiente Cloud9 e subscr\u00edbite ao t\u00f3pico IPC ml/image . $ sudo /greengrass/v2/bin/greengrass-cli pubsub sub -t=\"ml/image\" Successfully subscribed to topic: ml/image Desde outro terminal diferente publica unha mensaxe no t\u00f3pico ml/image . $ sudo /greengrass/v2/bin/greengrass-cli pubsub pub -m=\"{\\\"image\\\": \\\"cat.jpeg\\\"}\" -t=\"ml/image\" No terminal no que executaches a subscrici\u00f3n aparecer\u00e1 a mensaxe {\"image\": \"cat.jpeg\"} que ten o formato JSON que o compo\u00f1ente agarda recibir. Comproba que tam\u00e9n se recibira no cliente MQTT da consola AWS IoT o resultado da inferencia no t\u00f3pico ml/custom/image-classification . Descarga outra imaxe no directorio de imaxes de proba. $ pwd /home/ubuntu/environment/image_classification $ wget -O cat2.jpg https://www.publicdomainpictures.net/pictures/90000/velka/cat-14022476612Gk.jpg Publica a mensaxe co nome do novo ficheiro e comproba que se reciba no cliente MQTT o resultado da inferencia. $ sudo /greengrass/v2/bin/greengrass-cli pubsub pub -m=\"{\\\"image\\\": \\\"cat2.jpeg\\\"}\" -t=\"ml/image\" Imaxe: mensaxe co resultado da inferencia. Podes facer m\u00e1is probas se queres descargando outras imaxes e publicando o seu nome. Publicaci\u00f3n e despregadura do compo\u00f1ente Crea un bucket S3 para subir os artefactos e receita do compo\u00f1ente. $ EPOCH_TIME=$(date +\"%s\") && S3_BUCKET=ggcv2-workshop-$HOSTNAME-$EPOCH_TIME && aws s3 mb s3://$S3_BUCKET --region $AWS_DEFAULT_REGION Troca o manifesto da receita polo seguinte. Os cambios que se fixeron foron: Engadiuse o obxecto Artifacts . Lembra engadir na URI o nome do teu bucket . No script cambiouse a localizaci\u00f3n do ficheiro inference.py de {artifacts:path} a {artifacts:decompressedPath}/custom . { \"Platform\": { \"os\": \"linux\", \"architecture\": \"amd64\" }, \"Lifecycle\": { \"setEnv\": { \"DLR_IC_MODEL_DIR\": \"{variant.DLR.ImageClassification.ModelStore:artifacts:decompressedPath}/{configuration:/ModelResourceKey/x86_64}\", \"DEFAULT_DLR_IC_IMAGE_DIR\": \"/home/ubuntu/environment/image_classification/\", \"TOPIC\": \"{configuration:/LocalTopic}\" }, \"run\": { \"RequiresPrivilege\": \"true\", \"script\": \"\\n export PATH=\\\"{variant.DLR:configuration:/MLRootPath}/greengrass_ml_dlr_conda/bin:$PATH\\\"\\n eval \\\"$({variant.DLR:configuration:/MLRootPath}/greengrass_ml_dlr_conda/bin/conda shell.bash hook)\\\"\\n conda activate greengrass_ml_dlr_conda\\n python3 {artifacts:decompressedPath}/custom/inference.py\" } }, \"Artifacts\": [ { \"URI\": \"s3://[YOUR BUCKET NAME]/artifacts/com.example.CustomDLRImageClassification/1.0.0/custom.zip\", \"Unarchive\": \"ZIP\" } ] } Comprime os artefactos do compo\u00f1ente e sube o ficheiro comprimido e a receita ao bucket S3. $ cd ~/environment/GreengrassCore $ ARTIFACTS_DIR=\"./artifacts/com.example.CustomDLRImageClassification/1.0.0\" $ zip -j $ARTIFACTS_DIR/custom.zip $ARTIFACTS_DIR/*.py $ aws s3 cp $ARTIFACTS_DIR/custom.zip s3://$S3_BUCKET/artifacts/com.example.CustomDLRImageClassification/1.0.0/ $ aws s3 cp ./recipes/com.example.CustomDLRImageClassification-1.0.0.json s3://$S3_BUCKET/recipes/ Comproba que os contidos do bucket son correctos. $ aws s3 ls --recursive s3://$S3_BUCKET 2024-08-14 08:31:47 6396 artifacts/com.example.CustomDLRImageClassification/1.0.0/custom.zip 2024-08-14 08:32:02 3071 recipes/com.example.CustomDLRImageClassification-1.0.0.json Crea o compo\u00f1ente no AWS IoT Core. $ cd ~/environment/GreengrassCore/recipes $ aws greengrassv2 create-component-version --inline-recipe fileb://com.example.CustomDLRImageClassification-1.0.0.json --region $AWS_DEFAULT_REGION { \"arn\": \"arn:aws:greengrass:us-east-1:009649136346:components:com.example.CustomDLRImageClassification:versions:1.0.0\", \"componentName\": \"com.example.CustomDLRImageClassification\", \"componentVersion\": \"1.0.0\", \"creationTimestamp\": \"2024-08-14T08:37:26.175000+00:00\", \"status\": { \"componentState\": \"REQUESTED\", \"message\": \"NONE\", \"errors\": {}, \"vendorGuidance\": \"ACTIVE\", \"vendorGuidanceMessage\": \"NONE\" } } Comproba que aparece na listaxe de compo\u00f1entes. Compr\u00f3bao tam\u00e9n na consola do AWS IoT. $ aws greengrassv2 list-components --region $AWS_DEFAULT_REGION --query='components[?componentName==`com.example.CustomDLRImageClassification`]' [ { \"arn\": \"arn:aws:greengrass:us-east-1:009649136346:components:com.example.CustomDLRImageClassification\", \"componentName\": \"com.example.CustomDLRImageClassification\", \"latestVersion\": { \"arn\": \"arn:aws:greengrass:us-east-1:009649136346:components:com.example.CustomDLRImageClassification:versions:1.0.0\", \"componentVersion\": \"1.0.0\", \"creationTimestamp\": \"2024-08-14T08:37:26.175000+00:00\", \"description\": \"Custom Image classification inference using DLR and resnet50 default model.\", \"publisher\": \"Xoan C. Pardo\", \"platforms\": [ { \"attributes\": { \"architecture\": \"amd64\", \"os\": \"linux\" } } ] } } ] Elimina o compo\u00f1ente despregado localmente. Aseg\u00farate de que non quede ningunha dependencia do compo\u00f1ente no dispositivo. $ sudo /greengrass/v2/bin/greengrass-cli --ggcRootPath /greengrass/v2 deployment create --remove \"com.example.CustomDLRImageClassification\" Local deployment submitted! Deployment Id: 2a648ca5-6de8-4fd4-954c-50cdb43a6e16 $ sudo /greengrass/v2/bin/greengrass-cli component list | grep -E 'Component Name:.*DLR' -A 3 $ Na consola IoT fai unha nova despregadura no dispositivo Greengrass edgeDevice que incl\u00faa o compo\u00f1ente personalizado com.example.CustomDLRImageClassification . Imaxe: compo\u00f1ente personalizado despregado desde AWS IoT. Verifica o funcionamento correcto do compo\u00f1ente repetindo os pasos da secci\u00f3n de verificaci\u00f3n . Xustificaci\u00f3n da actividade Toma as seguintes capturas para a memoria de xustificaci\u00f3n da pr\u00e1ctica: Consola IoT mostrando a despregadura do compo\u00f1ente com.example.CustomDLRImageClassification no dispositivo edgeDevice (aba Compo\u00f1entes escollida nas propiedades da despregadura). Ambiente Cloud9 no que poidan verse na \u00e1rbore de directorios os artefactos e receita do compo\u00f1ente CustomDLRImageClassification e os contidos do directorio image_classification , e ademais: A sa\u00edda do terminal no que se executou o comando de subscrici\u00f3n ao t\u00f3pico ml/image . A sa\u00edda do terminal desde o que se publicaron as mensaxes no t\u00f3pico. A sa\u00edda da execuci\u00f3n dos comandos: $ aws s3 ls --recursive s3://$S3_BUCKET $ sudo /greengrass/v2/bin/greengrass-cli component list | grep -E 'Component Name:.*DLR' -A 3 $ sudo tail -2 /greengrass/v2/logs/aws.greengrass.DLRImageClassification.log O \u00faltimo comando ten que executarse despois de completar unha inferencia e ten que mostrar as mensaxes do log que indican que se enviaron os resultados da inferencia ao AWS IoT Core. Consola IoT coa mensaxe MQTT recibida no t\u00f3pico ml/custom/image-classification para o ficheiro cat2.jpeg , na que poida verse o payload . Importante As capturas te\u00f1en que asemellarse \u00e1s que se tomaron no curso e nas pr\u00e1cticas anteriores. As capturas tomadas na consola AWS te\u00f1en que inclu\u00edr o men\u00fa superior no que poida verse o nome de usuario da conta.","title":"Actividade 2"},{"location":"practica_4/actividade_2/#actividade-2","text":"COMPO\u00d1ENTES PERSONALIZADOS DE APRENDIZAXE M\u00c1QUINA","title":"Actividade 2"},{"location":"practica_4/actividade_2/#obxectivo","text":"O obxectivo desta actividade \u00e9 crear un compo\u00f1ente personalizado para a execuci\u00f3n de modelos de aprendizaxe m\u00e1quina (ML). A partires do compo\u00f1ente de inferencia da actividade anterior ( aws.greengrass.DLRImageClassification ) vamos crear unha versi\u00f3n modificada que se subscriba a un t\u00f3pico IPC predefinido no que agarde recibir mensaxes JSON co seguinte esquema: { \"image\": \"<ficheiro_jpeg>\" } Cada vez que reciba unha mensaxe o compo\u00f1ente far\u00e1 unha inferencia coa imaxe indicada do directorio predefinido de imaxes e publicar\u00e1 o resultado no t\u00f3pico MQTT predefinido. Nota Podes ver aqu\u00ed a documentaci\u00f3n sobre a implementaci\u00f3n de compo\u00f1entes ML personalizados.","title":"Obxectivo"},{"location":"practica_4/actividade_2/#creacion-do-componente-de-inferencia-ml-personalizado","text":"Para crear o compo\u00f1ente fai o seguinte no ambiente Cloud9: Descarga a receita do compo\u00f1ente no directorio de receitas. $ cd ~/environment/GreengrassCore/recipes $ DLR_INFERENCE_ARN=$(aws greengrassv2 list-components \\ --scope PUBLIC \\ --query 'components[?componentName==`aws.greengrass.DLRImageClassification`]' | jq -r '.[0].arn') $ DLR_INFERENCE_VERSION_ARN=$(aws greengrassv2 list-component-versions \\ --arn $DLR_INFERENCE_ARN \\ --query 'componentVersions[0].arn' \\ --output text) $ aws greengrassv2 get-component \\ --arn $DLR_INFERENCE_VERSION_ARN \\ --recipe-output-format JSON \\ --query recipe \\ --output text | base64 --decode | jq '.' > aws.greengrass.DLRImageClassification-1.0.0.json Descarga a receita modificada que vamos usar para o compo\u00f1ente personalizado. Edita a receita e insire o teu nome no campo ComponentPublisher . $ wget -O com.example.CustomDLRImageClassification-1.0.0.json https://miot-cniot.github.io/practica_4/stuff/CustomDLRImageClassification-1.0.0.json Compara as receitas e comproba os cambios que se fixeron para adaptala ao noso exemplo. Os principais foron: Reduciuse o n\u00famero de plataformas soportadas polo compo\u00f1ente \u00e1 \u00fanica que nos interesa para o exemplo. Engadironse \u00e1 configuraci\u00f3n unha pol\u00edtica de control de acceso para os t\u00f3picos IPC e un par\u00e1metro LocalTopic para configurar o t\u00f3pico IPC a usar. Comproba os artefactos do compo\u00f1ente orixinal. $ sudo ls -l /greengrass/v2/packages/artifacts-unarchived/aws.greengrass.DLRImageClassification/2.1.14/image_classification/ Imaxe: artefactos do compo\u00f1ente DLRImageClassification. Crea o directorio para os artefactos do compo\u00f1ente personalizado. $ mkdir -p ~/environment/GreengrassCore/artifacts/com.example.CustomDLRImageClassification/1.0.0 && cd ~/environment/GreengrassCore/artifacts/com.example.CustomDLRImageClassification/1.0.0 Copia os ficheiros Python ao directorio de artefactos do compo\u00f1ente personalizado e configura os permisos. $ sudo cp /greengrass/v2/packages/artifacts-unarchived/aws.greengrass.DLRImageClassification/2.1.14/image_classification/*.py . $ sudo chown ubuntu:ubuntu *.py $ chmod 664 *.py Descarga o ficheiro inference.py modificado para o compo\u00f1ente personalizado. $ mv inference.py inference.1.py $ wget https://miot-cniot.github.io/practica_4/stuff/inference.py Abre ambos ficheiros inference e comproba os cambios que se fixeron para adaptalo ao noso exemplo. Os principais foron: Engadiuse o c\u00f3digo que realiza a subscrici\u00f3n ao t\u00f3pico IPC. Definiuse un manexador ( InferenceRequestHandler ) para procesar os eventos da subscrici\u00f3n IPC. A parte m\u00e1is relevante do manexador \u00e9 o m\u00e9todo on_stream_event que \u00e9 o que procesa as mensaxes que se reciben no t\u00f3pico e fai unha inferencia se procede. Nota Presta atenci\u00f3n a que o c\u00f3digo engadido en inference.py \u00e9 semellante ao do Subscriber que se viu na secci\u00f3n 5 do curso. Unha vez remates de comprobar as diferenzas, elimina a copia inference.1.py . Crea un directorio para as imaxes e descarga a imaxe de proba. $ mkdir ~/environment/image_classification && cd ~/environment/image_classification $ wget https://raw.githubusercontent.com/awslabs/aws-greengrass-labs-ml-components/main/dlr/aws.greengrass.DLRImageClassification/image_classification/sample_images/cat.jpeg","title":"Creaci\u00f3n do compo\u00f1ente de inferencia ML personalizado"},{"location":"practica_4/actividade_2/#despregadura-do-componente","text":"Na consola IoT fai unha nova despregadura no dispositivo Greengrass edgeDevice que NON incl\u00faa o compo\u00f1ente aws.greengrass.DLRImageClassification . Aseg\u00farate de que non quede ningunha dependencia do compo\u00f1ente no dispositivo. $ sudo /greengrass/v2/bin/greengrass-cli component list | grep -E 'Component Name:.*DLR' -A 3 No cliente MQTT da consola de AWS IoT subscr\u00edbete ao t\u00f3pico ml/custom/image-classification , no que o compo\u00f1ente personalizado publicar\u00e1 os resultados das inferencias. Desprega o compo\u00f1ente personalizado. $ sudo /greengrass/v2/bin/greengrass-cli deployment create \\ --recipeDir ~/environment/GreengrassCore/recipes \\ --artifactDir ~/environment/GreengrassCore/artifacts \\ --merge \"com.example.CustomDLRImageClassification=1.0.0\" Comproba que a despregadura se completou correctamente. $ sudo /greengrass/v2/bin/greengrass-cli component list | grep -E 'Component Name:.*DLR' -A 3 $ sudo cat /greengrass/v2/logs/com.example.CustomDLRImageClassification.log Comproba tam\u00e9n se se recibiu no cliente MQTT da consola AWS IoT o resultado da inferencia no t\u00f3pico ml/custom/image-classification . Se os pasos anteriores non dan os resultados agardados, comproba no log do Greengrass se houbo erros durante a despregadura do compo\u00f1ente. Podes consultar aqu\u00ed os erros m\u00e1is com\u00fans.","title":"Despregadura do compo\u00f1ente"},{"location":"practica_4/actividade_2/#verificacion-do-funcionamento","text":"Abre un novo terminal no ambiente Cloud9 e subscr\u00edbite ao t\u00f3pico IPC ml/image . $ sudo /greengrass/v2/bin/greengrass-cli pubsub sub -t=\"ml/image\" Successfully subscribed to topic: ml/image Desde outro terminal diferente publica unha mensaxe no t\u00f3pico ml/image . $ sudo /greengrass/v2/bin/greengrass-cli pubsub pub -m=\"{\\\"image\\\": \\\"cat.jpeg\\\"}\" -t=\"ml/image\" No terminal no que executaches a subscrici\u00f3n aparecer\u00e1 a mensaxe {\"image\": \"cat.jpeg\"} que ten o formato JSON que o compo\u00f1ente agarda recibir. Comproba que tam\u00e9n se recibira no cliente MQTT da consola AWS IoT o resultado da inferencia no t\u00f3pico ml/custom/image-classification . Descarga outra imaxe no directorio de imaxes de proba. $ pwd /home/ubuntu/environment/image_classification $ wget -O cat2.jpg https://www.publicdomainpictures.net/pictures/90000/velka/cat-14022476612Gk.jpg Publica a mensaxe co nome do novo ficheiro e comproba que se reciba no cliente MQTT o resultado da inferencia. $ sudo /greengrass/v2/bin/greengrass-cli pubsub pub -m=\"{\\\"image\\\": \\\"cat2.jpeg\\\"}\" -t=\"ml/image\" Imaxe: mensaxe co resultado da inferencia. Podes facer m\u00e1is probas se queres descargando outras imaxes e publicando o seu nome.","title":"Verificaci\u00f3n do funcionamento"},{"location":"practica_4/actividade_2/#publicacion-e-despregadura-do-componente","text":"Crea un bucket S3 para subir os artefactos e receita do compo\u00f1ente. $ EPOCH_TIME=$(date +\"%s\") && S3_BUCKET=ggcv2-workshop-$HOSTNAME-$EPOCH_TIME && aws s3 mb s3://$S3_BUCKET --region $AWS_DEFAULT_REGION Troca o manifesto da receita polo seguinte. Os cambios que se fixeron foron: Engadiuse o obxecto Artifacts . Lembra engadir na URI o nome do teu bucket . No script cambiouse a localizaci\u00f3n do ficheiro inference.py de {artifacts:path} a {artifacts:decompressedPath}/custom . { \"Platform\": { \"os\": \"linux\", \"architecture\": \"amd64\" }, \"Lifecycle\": { \"setEnv\": { \"DLR_IC_MODEL_DIR\": \"{variant.DLR.ImageClassification.ModelStore:artifacts:decompressedPath}/{configuration:/ModelResourceKey/x86_64}\", \"DEFAULT_DLR_IC_IMAGE_DIR\": \"/home/ubuntu/environment/image_classification/\", \"TOPIC\": \"{configuration:/LocalTopic}\" }, \"run\": { \"RequiresPrivilege\": \"true\", \"script\": \"\\n export PATH=\\\"{variant.DLR:configuration:/MLRootPath}/greengrass_ml_dlr_conda/bin:$PATH\\\"\\n eval \\\"$({variant.DLR:configuration:/MLRootPath}/greengrass_ml_dlr_conda/bin/conda shell.bash hook)\\\"\\n conda activate greengrass_ml_dlr_conda\\n python3 {artifacts:decompressedPath}/custom/inference.py\" } }, \"Artifacts\": [ { \"URI\": \"s3://[YOUR BUCKET NAME]/artifacts/com.example.CustomDLRImageClassification/1.0.0/custom.zip\", \"Unarchive\": \"ZIP\" } ] } Comprime os artefactos do compo\u00f1ente e sube o ficheiro comprimido e a receita ao bucket S3. $ cd ~/environment/GreengrassCore $ ARTIFACTS_DIR=\"./artifacts/com.example.CustomDLRImageClassification/1.0.0\" $ zip -j $ARTIFACTS_DIR/custom.zip $ARTIFACTS_DIR/*.py $ aws s3 cp $ARTIFACTS_DIR/custom.zip s3://$S3_BUCKET/artifacts/com.example.CustomDLRImageClassification/1.0.0/ $ aws s3 cp ./recipes/com.example.CustomDLRImageClassification-1.0.0.json s3://$S3_BUCKET/recipes/ Comproba que os contidos do bucket son correctos. $ aws s3 ls --recursive s3://$S3_BUCKET 2024-08-14 08:31:47 6396 artifacts/com.example.CustomDLRImageClassification/1.0.0/custom.zip 2024-08-14 08:32:02 3071 recipes/com.example.CustomDLRImageClassification-1.0.0.json Crea o compo\u00f1ente no AWS IoT Core. $ cd ~/environment/GreengrassCore/recipes $ aws greengrassv2 create-component-version --inline-recipe fileb://com.example.CustomDLRImageClassification-1.0.0.json --region $AWS_DEFAULT_REGION { \"arn\": \"arn:aws:greengrass:us-east-1:009649136346:components:com.example.CustomDLRImageClassification:versions:1.0.0\", \"componentName\": \"com.example.CustomDLRImageClassification\", \"componentVersion\": \"1.0.0\", \"creationTimestamp\": \"2024-08-14T08:37:26.175000+00:00\", \"status\": { \"componentState\": \"REQUESTED\", \"message\": \"NONE\", \"errors\": {}, \"vendorGuidance\": \"ACTIVE\", \"vendorGuidanceMessage\": \"NONE\" } } Comproba que aparece na listaxe de compo\u00f1entes. Compr\u00f3bao tam\u00e9n na consola do AWS IoT. $ aws greengrassv2 list-components --region $AWS_DEFAULT_REGION --query='components[?componentName==`com.example.CustomDLRImageClassification`]' [ { \"arn\": \"arn:aws:greengrass:us-east-1:009649136346:components:com.example.CustomDLRImageClassification\", \"componentName\": \"com.example.CustomDLRImageClassification\", \"latestVersion\": { \"arn\": \"arn:aws:greengrass:us-east-1:009649136346:components:com.example.CustomDLRImageClassification:versions:1.0.0\", \"componentVersion\": \"1.0.0\", \"creationTimestamp\": \"2024-08-14T08:37:26.175000+00:00\", \"description\": \"Custom Image classification inference using DLR and resnet50 default model.\", \"publisher\": \"Xoan C. Pardo\", \"platforms\": [ { \"attributes\": { \"architecture\": \"amd64\", \"os\": \"linux\" } } ] } } ] Elimina o compo\u00f1ente despregado localmente. Aseg\u00farate de que non quede ningunha dependencia do compo\u00f1ente no dispositivo. $ sudo /greengrass/v2/bin/greengrass-cli --ggcRootPath /greengrass/v2 deployment create --remove \"com.example.CustomDLRImageClassification\" Local deployment submitted! Deployment Id: 2a648ca5-6de8-4fd4-954c-50cdb43a6e16 $ sudo /greengrass/v2/bin/greengrass-cli component list | grep -E 'Component Name:.*DLR' -A 3 $ Na consola IoT fai unha nova despregadura no dispositivo Greengrass edgeDevice que incl\u00faa o compo\u00f1ente personalizado com.example.CustomDLRImageClassification . Imaxe: compo\u00f1ente personalizado despregado desde AWS IoT. Verifica o funcionamento correcto do compo\u00f1ente repetindo os pasos da secci\u00f3n de verificaci\u00f3n .","title":"Publicaci\u00f3n e despregadura do compo\u00f1ente"},{"location":"practica_4/actividade_2/#xustificacion-da-actividade","text":"Toma as seguintes capturas para a memoria de xustificaci\u00f3n da pr\u00e1ctica: Consola IoT mostrando a despregadura do compo\u00f1ente com.example.CustomDLRImageClassification no dispositivo edgeDevice (aba Compo\u00f1entes escollida nas propiedades da despregadura). Ambiente Cloud9 no que poidan verse na \u00e1rbore de directorios os artefactos e receita do compo\u00f1ente CustomDLRImageClassification e os contidos do directorio image_classification , e ademais: A sa\u00edda do terminal no que se executou o comando de subscrici\u00f3n ao t\u00f3pico ml/image . A sa\u00edda do terminal desde o que se publicaron as mensaxes no t\u00f3pico. A sa\u00edda da execuci\u00f3n dos comandos: $ aws s3 ls --recursive s3://$S3_BUCKET $ sudo /greengrass/v2/bin/greengrass-cli component list | grep -E 'Component Name:.*DLR' -A 3 $ sudo tail -2 /greengrass/v2/logs/aws.greengrass.DLRImageClassification.log O \u00faltimo comando ten que executarse despois de completar unha inferencia e ten que mostrar as mensaxes do log que indican que se enviaron os resultados da inferencia ao AWS IoT Core. Consola IoT coa mensaxe MQTT recibida no t\u00f3pico ml/custom/image-classification para o ficheiro cat2.jpeg , na que poida verse o payload . Importante As capturas te\u00f1en que asemellarse \u00e1s que se tomaron no curso e nas pr\u00e1cticas anteriores. As capturas tomadas na consola AWS te\u00f1en que inclu\u00edr o men\u00fa superior no que poida verse o nome de usuario da conta.","title":"Xustificaci\u00f3n da actividade"},{"location":"practica_5/actividade_1/","text":"Actividade 1 MODELO DE ALARMA DE TRES ESTADOS Obxectivo O obxectivo desta actividade \u00e9 crear o modelo de detector dunha alarma de tres estados a partir dun modelo predefinido do AWS IoT Events e usalo para seguir profundando nas funcionalidades do AWS IoT Events. Para realizar esta actividade vamos usar como base este exemplo do curso AWS IoT Events Workshop dispo\u00f1\u00edbel na plataforma AWS Workshop Studio. O curso s\u00f3 est\u00e1 dispo\u00f1\u00edbel en ingl\u00e9s, pero podes axudarte, p. ex., da traduci\u00f3n autom\u00e1tica integrada no teu navegador se o precisas. Importante Para realizar a pr\u00e1ctica, segue as instruci\u00f3ns do exemplo tendo en conta a medida que avances as indicaci\u00f3ns que se che dan nesta actividade. As capturas que hai que tomar para xustificar a actividade est\u00e1n indicadas ao final de cada apartado, e ao final da actividade, a modo de resume, listanse todas as capturas que hai que inclu\u00edr na memoria de xustificaci\u00f3n da actividade. A continuaci\u00f3n se recollen as indicaci\u00f3ns adicionais que ter\u00e1s que ter en conta en cada secci\u00f3n do exemplo: Create the detector model from the sample Xustificaci\u00f3n do apartado Toma a seguinte captura para a memoria de xustificaci\u00f3n da pr\u00e1ctica: Consola do IoT Events mostrando o resultado de executar a an\u00e1lise con erros. Create SNS topic to send notification triggers to Creaci\u00f3n do t\u00f3pico SNS Paso 3: engade o teu prefixo ao nome do t\u00f3pico SNS e ao nome de visualizaci\u00f3n do t\u00f3pico. Creaci\u00f3n da subscrici\u00f3n ao t\u00f3pico SNS Paso 6: usa como protocolo da subscrici\u00f3n o e-mail. Paso 7: insire o teu enderezo de correo. Pasos 8-11: s\u00e1ltate estes pasos. Pasos 14: non crees o rol IAM, usaremos o rol LabRole predefinido. Paso 15: engade o teu prefixo ao nome do modelo e escolle o rol LabRole predefinido. Xustificaci\u00f3n do apartado Toma as seguintes capturas para a memoria de xustificaci\u00f3n da pr\u00e1ctica: Propiedades da subscrici\u00f3n ao t\u00f3pico MyAlarmTopic confirmada na consola SNS. Consola do IoT Events mostrando o resultado de executar a an\u00e1lise sen erros. Modelo de detector AWS_IoTEvents_Blueprints_Simple_Alarm na consola do IoT Events (opci\u00f3n modelos de detector no men\u00fa esquerdo da consola). Testing the Detector model Realiza unha proba do modelo que o faga pasar polos seguintes estados: Normal, Alarming, Snooze, Alarming, Normal Xustificaci\u00f3n do apartado Toma as seguintes capturas para a memoria de xustificaci\u00f3n da pr\u00e1ctica: Correo recibido ao entrar o modelo no estado Alarming . Propiedades do modelo na consola do IoT Events nas que se vexa no apartado de Detectores que o modelo est\u00e1 no estado Snooze . Xustificaci\u00f3n da actividade Resume das capturas que tes que inclu\u00edr na memoria de xustificaci\u00f3n da pr\u00e1ctica: Create the detector model from the sample Consola do IoT Events mostrando o modelo creado e o resultado de executar a an\u00e1lise. Create SNS topic to send notification triggers to. Propiedades da subscrici\u00f3n ao t\u00f3pico MyAlarmTopic confirmada na consola SNS. Consola do IoT Events mostrando o resultado de executar a an\u00e1lise sen erros. Modelo de detector AWS_IoTEvents_Blueprints_Simple_Alarm na consola do IoT Events. Testing the Detector model Correo recibido ao entrar o modelo no estado Alarming . Propiedades do modelo na consola do IoT Events nas que se vexa no apartado de Detectores que o modelo est\u00e1 no estado Snooze . Importante As capturas te\u00f1en que asemellarse \u00e1s que se tomaron nos laboratorios e nas pr\u00e1cticas anteriores. As capturas tomadas na consola AWS te\u00f1en que inclu\u00edr o men\u00fa superior no que poida verse o nome de usuario da conta. Para saber m\u00e1is AWS IoT Events ten tam\u00e9n un modelo predefinido para alarmas que sigan o est\u00e1ndar ANSI/ISA-18.2-2016 Management of Alarm Systems for the Process Industries que ten 7 estados. Se queres probalo podes crear un modelo de detector a partires do modelo predefinido de alarma ISA 18.2 do IoT Events, igual que se fixo na actividade, e comparalo co diagrama de estados que podes consultar na p\u00e1xina 32 do est\u00e1ndar.","title":"Actividade 1"},{"location":"practica_5/actividade_1/#actividade-1","text":"MODELO DE ALARMA DE TRES ESTADOS","title":"Actividade 1"},{"location":"practica_5/actividade_1/#obxectivo","text":"O obxectivo desta actividade \u00e9 crear o modelo de detector dunha alarma de tres estados a partir dun modelo predefinido do AWS IoT Events e usalo para seguir profundando nas funcionalidades do AWS IoT Events. Para realizar esta actividade vamos usar como base este exemplo do curso AWS IoT Events Workshop dispo\u00f1\u00edbel na plataforma AWS Workshop Studio. O curso s\u00f3 est\u00e1 dispo\u00f1\u00edbel en ingl\u00e9s, pero podes axudarte, p. ex., da traduci\u00f3n autom\u00e1tica integrada no teu navegador se o precisas. Importante Para realizar a pr\u00e1ctica, segue as instruci\u00f3ns do exemplo tendo en conta a medida que avances as indicaci\u00f3ns que se che dan nesta actividade. As capturas que hai que tomar para xustificar a actividade est\u00e1n indicadas ao final de cada apartado, e ao final da actividade, a modo de resume, listanse todas as capturas que hai que inclu\u00edr na memoria de xustificaci\u00f3n da actividade. A continuaci\u00f3n se recollen as indicaci\u00f3ns adicionais que ter\u00e1s que ter en conta en cada secci\u00f3n do exemplo:","title":"Obxectivo"},{"location":"practica_5/actividade_1/#create-the-detector-model-from-the-sample","text":"","title":"Create the detector model from the sample"},{"location":"practica_5/actividade_1/#xustificacion-do-apartado","text":"Toma a seguinte captura para a memoria de xustificaci\u00f3n da pr\u00e1ctica: Consola do IoT Events mostrando o resultado de executar a an\u00e1lise con erros.","title":"Xustificaci\u00f3n do apartado"},{"location":"practica_5/actividade_1/#create-sns-topic-to-send-notification-triggers-to","text":"","title":"Create SNS topic to send notification triggers to"},{"location":"practica_5/actividade_1/#creacion-do-topico-sns","text":"Paso 3: engade o teu prefixo ao nome do t\u00f3pico SNS e ao nome de visualizaci\u00f3n do t\u00f3pico.","title":"Creaci\u00f3n do t\u00f3pico SNS"},{"location":"practica_5/actividade_1/#creacion-da-subscricion-ao-topico-sns","text":"Paso 6: usa como protocolo da subscrici\u00f3n o e-mail. Paso 7: insire o teu enderezo de correo. Pasos 8-11: s\u00e1ltate estes pasos. Pasos 14: non crees o rol IAM, usaremos o rol LabRole predefinido. Paso 15: engade o teu prefixo ao nome do modelo e escolle o rol LabRole predefinido.","title":"Creaci\u00f3n da subscrici\u00f3n ao t\u00f3pico SNS"},{"location":"practica_5/actividade_1/#xustificacion-do-apartado_1","text":"Toma as seguintes capturas para a memoria de xustificaci\u00f3n da pr\u00e1ctica: Propiedades da subscrici\u00f3n ao t\u00f3pico MyAlarmTopic confirmada na consola SNS. Consola do IoT Events mostrando o resultado de executar a an\u00e1lise sen erros. Modelo de detector AWS_IoTEvents_Blueprints_Simple_Alarm na consola do IoT Events (opci\u00f3n modelos de detector no men\u00fa esquerdo da consola).","title":"Xustificaci\u00f3n do apartado"},{"location":"practica_5/actividade_1/#testing-the-detector-model","text":"Realiza unha proba do modelo que o faga pasar polos seguintes estados: Normal, Alarming, Snooze, Alarming, Normal","title":"Testing the Detector model"},{"location":"practica_5/actividade_1/#xustificacion-do-apartado_2","text":"Toma as seguintes capturas para a memoria de xustificaci\u00f3n da pr\u00e1ctica: Correo recibido ao entrar o modelo no estado Alarming . Propiedades do modelo na consola do IoT Events nas que se vexa no apartado de Detectores que o modelo est\u00e1 no estado Snooze .","title":"Xustificaci\u00f3n do apartado"},{"location":"practica_5/actividade_1/#xustificacion-da-actividade","text":"Resume das capturas que tes que inclu\u00edr na memoria de xustificaci\u00f3n da pr\u00e1ctica: Create the detector model from the sample Consola do IoT Events mostrando o modelo creado e o resultado de executar a an\u00e1lise. Create SNS topic to send notification triggers to. Propiedades da subscrici\u00f3n ao t\u00f3pico MyAlarmTopic confirmada na consola SNS. Consola do IoT Events mostrando o resultado de executar a an\u00e1lise sen erros. Modelo de detector AWS_IoTEvents_Blueprints_Simple_Alarm na consola do IoT Events. Testing the Detector model Correo recibido ao entrar o modelo no estado Alarming . Propiedades do modelo na consola do IoT Events nas que se vexa no apartado de Detectores que o modelo est\u00e1 no estado Snooze . Importante As capturas te\u00f1en que asemellarse \u00e1s que se tomaron nos laboratorios e nas pr\u00e1cticas anteriores. As capturas tomadas na consola AWS te\u00f1en que inclu\u00edr o men\u00fa superior no que poida verse o nome de usuario da conta.","title":"Xustificaci\u00f3n da actividade"},{"location":"practica_5/actividade_1/#para-saber-mais","text":"AWS IoT Events ten tam\u00e9n un modelo predefinido para alarmas que sigan o est\u00e1ndar ANSI/ISA-18.2-2016 Management of Alarm Systems for the Process Industries que ten 7 estados. Se queres probalo podes crear un modelo de detector a partires do modelo predefinido de alarma ISA 18.2 do IoT Events, igual que se fixo na actividade, e comparalo co diagrama de estados que podes consultar na p\u00e1xina 32 do est\u00e1ndar.","title":"Para saber m\u00e1is"},{"location":"practica_5/actividade_2/","text":"Actividade 2 STREAMING DE DATOS A REDSHIFT Obxectivo O obxectivo desta actividade \u00e9 configurar o env\u00edo dun stream de datos de telemetr\u00eda a un cluster Redshift usando o Amazon Data Firehose . Para realizar esta actividade vamos usar como base este exemplo do curso AWS IoT Events Workshop dispo\u00f1\u00edbel na plataforma AWS Workshop Studio. O curso s\u00f3 est\u00e1 dispo\u00f1\u00edbel en ingl\u00e9s, pero podes axudarte, p. ex., da traduci\u00f3n autom\u00e1tica integrada no teu navegador se o precisas. Importante Para realizar a pr\u00e1ctica, segue as instruci\u00f3ns do exemplo tendo en conta a medida que avances as indicaci\u00f3ns que se che dan nesta actividade. As capturas que hai que tomar para xustificar a actividade est\u00e1n indicadas ao final de cada paso, e ao final da actividade, a modo de resume, listanse todas as capturas que hai que inclu\u00edr na memoria de xustificaci\u00f3n da actividade. A continuaci\u00f3n se recollen as indicaci\u00f3ns adicionais que ter\u00e1s que ter en conta en cada secci\u00f3n do exemplo: Step 1 - Setup a Redshift cluster Para crear o cluster, na consola de RedShift escolle a opci\u00f3n clusters no men\u00fa lateral, preme no bot\u00f3n Crear cluster e indica as propiedades seguintes: Identificador do cluster: iot-cluster . Engade o teu prefixo ao nome. Tipo de n\u00f3: dc2.large N\u00famero de n\u00f3s: 2 Se\u00f1a do administrador: configura unha se\u00f1a manualmente. Funci\u00f3ns do IAM asociadas: asocia o rol IAM predefinido LabRole . Nas configuraci\u00f3ns adicionais: No apartado de Rede e Seguranza activa a opci\u00f3n Activar recurso publicamente acces\u00edbel . No apartado de Configuraci\u00f3ns da Base de datos , configura o nome da base de datos: iotredshift . Engade o teu prefixo ao nome. MOI IMPORTANTE !!!!!! O cluster Redshift \u00e9 un recurso \u201cmoi caro\u201d para o cr\u00e9dito do que dispo\u00f1emos nos laboratorios da AWS Academy. Aseg\u00farate de mantelo parado escollendo a opci\u00f3n Pausar do men\u00fa de acci\u00f3ns do cluster antes de pechar unha sesi\u00f3n no laboratorio ou durante as sesi\u00f3ns nas que non o vaias a usar. Deixalo funcionando entre sesi\u00f3ns pode deixarte sen cr\u00e9dito en cuesti\u00f3n dun par de d\u00edas. Unha vez remates a actividade elimina o cluster para evitar que poida deixarte sen cr\u00e9dito. Xustificaci\u00f3n do paso Toma a seguinte captura para a memoria de xustificaci\u00f3n da pr\u00e1ctica: Propiedades do cluster Redshift (chega con que se vexa o apartado de informaci\u00f3ns xerais ). Imaxe: Exemplo de captura das propiedades do cluster Redshift. Step 2 - Redshift cluster security Vamos a conectarnos ao cluster desde a instancia Cloud9, polo que teremos que configurar regras nos grupos de seguranza da instancia e do cluster para permitir a conexi\u00f3n. Ademais tam\u00e9n temos que engadir unha regra no grupo de seguranza do cluster para permitir o tr\u00e1fico desde Firehose. Para modificar as regras do grupo de seguranza do cluster fai o seguinte: Preme no nome do cluster para abrir as s\u00faas propiedades. Na aba Propiedades procura o apartado Configuraci\u00f3ns de rede e seguranza e preme no nome do grupo de seguranza. Abrirase nunha nova xanela. Presta atenci\u00f3n a cal \u00e9 o grupo , por defecto o cluster usa o grupo default . Edita as regras de entrada do grupo do cluster. Engade as seguintes: Todo o tr\u00e1fico desde a IP de Firehose: 52.70.63.192/27 (us-east-1) Todo o tr\u00e1fico desde o grupo de seguranza da instancia Cloud9 (o nome do grupo comeza por aws-cloud9-<prefixo>-VirtualDevice ) Imaxe: regras de entrada do grupo default. Edita as regras de entrada do grupo de seguranza da instancia Cloud9. Engade a seguinte: Todo o tr\u00e1fico desde o grupo default (o grupo que est\u00e1 a usar o cluster) Imaxe: regras de entrada do grupo de seguranza da instancia Cloud9. Nota Para \u201cafinar\u201d a\u00ednda m\u00e1is a seguranza poderiamos ter configurado un grupo espec\u00edfico para o cluster Redshift no canto de usar o grupo default . Xustificaci\u00f3n do paso Toma as seguintes capturas para a memoria de xustificaci\u00f3n da pr\u00e1ctica: Regras de entrada do grupo de seguranza default (o do cluster). Regras de entrada do grupo de seguranza da instancia Cloud9. Step 3 - Create table definition Para crear a t\u00e1boa fai o seguinte: Instala o SQLWorkbench/J na instancia Cloud9. Ten en conta o seguinte: A instancia xa ten unha versi\u00f3n de Java v\u00e1lida (podes vela executando java --version ) Descarga o paquete executando wget <URL> . A URL da ligaz\u00f3n de descarga podes obtela aqu\u00ed . Instala o driver JBDC do Redshift. Descarga o driver executando wget <URL> . A ligaz\u00f3n de descarga podes obtela aqu\u00ed . Podes copialo onde queiras (p.ex. nun directorio JBDC dentro do directorio do SQLWorkbench) Crea un ficheiro create-table.sql para o script do lab que crea a t\u00e1boa. O ficheiro ten que crearse nun directorio scripts dentro do directorio no que descomprimiras o SQLWorkbench. Crea un perfil de conexi\u00f3n a Redshift. Inicia a consola do SQLWorkbench executando o script sqlworkbench.sh Executa o seguinte comando na consola do SQLWorkbench: Nota Ten en conta que a versi\u00f3n do ficheiro .jar do driver JDBC pode ser diferente no teu caso WbCreateProfile -name=\"Redshift\" -profileGroup=IOT -savePassword=true -username=awsuser -password=<A_T\u00daA_SE\u00d1A> -url=jdbc:redshift://<A_URL_JDBC_DO_CLUSTER> -driver=com.amazon.redshift.jbdc42.Driver -driverJar=<RUTA_DO_DRIVER_JBDC>/redshift-jdbc42-2.1.0.30.jar -autocommit=true; Imaxe: execuci\u00f3n do comando WbCreateProfile. Crea a t\u00e1boa. Con\u00e9ctate con WbConnect Redshift; executa o script con WbRun scripts/create-table.sql; e comproba o resultado con WbList; Imaxe: creaci\u00f3n da t\u00e1boa no WbCreateProfile. Xustificaci\u00f3n do paso Toma a seguinte captura para a memoria de xustificaci\u00f3n da pr\u00e1ctica: Ambiente Cloud9 cos arquivos do SQLWorkbench na \u00e1rbore de directorios e o contido do script create-table.sql nun terminal e a sa\u00edda da creaci\u00f3n da t\u00e1boa (punto 5) noutro. Step 4 - Create S3 Firehose bucket Non fagas este paso. Crearemos o bucket S3 durante a configuraci\u00f3n do fluxo do Firehose. Step 5 - Setup Kinesis Firehose Non fagas os pasos do lab. No seu lugar fai o seguinte: Accede \u00e1 consola do Amazon Data Firehose (servizo que substit\u00fae ao de Kinesis), preme no bot\u00f3n Crear fluxo do Firehose e indica as propiedades seguintes: Orixe: Direct PUT Destino: Amazon Redshift Nome: iotstream . Engade o teu prefixo ao nome. Tipo de destino do Amazon Redshift: Cluster aprovisionado . Cluster: escolle o cluster iot-cluster . Base de datos: iotredshift (co teu prefixo diante). Autenticaci\u00f3n: usar nome de usuario e se\u00f1a. Nome de usuario: awsuser . Se\u00f1a: insire a se\u00f1a que configuraches ao crear o cluster Redshift. T\u00e1boa: thingtest . Bucket S3 intermediario: crea o bucket iotfirehose . Engade o teu prefixo ao nome. Opci\u00f3ns do comando COPY: FORMAT AS JSON 'auto' Nas configuraci\u00f3ns avanzadas, en Acceso ao Servizo escolle o rol predefinido LabRole . Xustificaci\u00f3n do paso Toma a seguinte captura para a memoria de xustificaci\u00f3n da pr\u00e1ctica: Propiedades nas que se vexan os detalles do fluxo e a configuraci\u00f3n do destino. Imaxe: exemplo de captura das propiedades do cluster Redshift. Step 6 - Update our AWS IoT rule Non fagas os pasos do lab. No seu lugar crea no IoT Core unha regra coas seguintes propiedades: Nome: thingrule . Engade o teu prefixo ao nome. Usa o subli\u00f1ado que non acepta gui\u00f3n. Descrici\u00f3n: insire unha descrici\u00f3n. Instruci\u00f3n SQL: SELECT * FROM 'iot' Acci\u00f3ns da regra: engade unha regra de tipo Data Firehose Stream coas seguintes propiedades: Fluxo do Amazon Data Firehose: escolle iotstream . Funci\u00f3n do IAM: escolle o rol IAM predefinido LabRole . Xustificaci\u00f3n do paso Toma a seguinte captura para a memoria de xustificaci\u00f3n da pr\u00e1ctica: Propiedades da regra thingrule coa aba Acci\u00f3ns escollida. Step 7 - Check your roles! Neste paso non tes que facer nada. Step 8 - Test your code Non executes o ratchet.py do lab 2 como se indica no lab porque o formato de mensaxe non coincide co da t\u00e1boa thingtest . No seu lugar fai o seguinte: Crea un novo script Python co c\u00f3digo que se fornece no lab e configura a conexi\u00f3n MQTT como nos labs anteriores. Nota Hai un erro de sintaxe no c\u00f3digo do lab, nas instruci\u00f3ns print faltan os par\u00e9nteses. Executa o script . A carga de datos efectiva no Redshift pode demorar varios minutos, mentres podes comprobar: Nas propiedades do fluxo Firehose, se aparece algunha mensaxe de erro nos logs de erros do destino . No bucket S3 iotfirehose , se se crearon os ficheiros temporais que se copiar\u00e1n a RedShift. Para comprobar o resultado: Desde o SQLWorkbench na instancia Cloud9. Con\u00e9ctate con WbConnect Redshift; e consulta a t\u00e1boa con SELECT * FROM thingtest; Desde o editor de consultas do Redshift. Na consola do Redshift escolle o cluster iot-cluster e a opci\u00f3n Consultar no editor de consultas v2 no men\u00fa Consultar datos . Abrirase o editor nunha nova xanela. No editor preme no nome do cluster e configura unha conexi\u00f3n coas propiedades seguintes: Forma de conexi\u00f3n: escolle a opci\u00f3n Temporary credentials using a database user name Database: iotredshift co teu prefixo diante. User name: awsuser Imaxe: configuraci\u00f3n da conexi\u00f3n no editor de consultas do Redshift. Crea unha consulta escollendo a opci\u00f3n Select table no men\u00fa de contexto da t\u00e1boa thingtest e exec\u00fataa premendo en Run . Imaxe: execuci\u00f3n dunha consulta no editor de consultas Redshift. Xustificaci\u00f3n do paso Toma a seguinte captura para a memoria de xustificaci\u00f3n da pr\u00e1ctica: Editor de consultas do Redshift no que se vexa a t\u00e1boa thingtest na vista en \u00e1rbore do cluster, o esquema da t\u00e1boa, a consulta SQL e o resultado. Imaxe: exemplo de captura do editor de consultas Redshift. Eliminaci\u00f3n de recursos MOI IMPORTANTE!!!!!! Elimina o cluster unha vez remates a actividade para evitar que poida deixarte sen cr\u00e9dito. Cando xa non os vaias usar m\u00e1is elimina os recursos que se crearon nesta actividade: No Redshift elimina o cluster iot-cluster . No S3 elimina o bucket iotfirehose . No Firehose elimina o fluxo iotstream . No IoT Core elimina a regra thingrule . Xustificaci\u00f3n da actividade Resume das capturas que tes que inclu\u00edr na memoria de xustificaci\u00f3n da pr\u00e1ctica: Step 1 - Setup a Redshift cluster Propiedades do cluster Redshift. Step 2 - Redshift cluster security Regras de entrada do grupo de seguranza default (o do cluster). Regras de entrada do grupo de seguranza da instancia Cloud9 Step 3 - Create table definition Ambiente Cloud9 cos arquivos do SQLWorkbench na \u00e1rbore de directorios e o script create-table.sql nun terminal e a creaci\u00f3n da t\u00e1boa noutro. Step 5 - Setup Kinesis Firehose Propiedades nas que se vexan os detalles do fluxo e a configuraci\u00f3n do destino. Step 6 - Update our AWS IoT rule Propiedades da regra thingrule coa aba Acci\u00f3ns escollida. Step 8 - Test your code Editor de consultas do Redshift no que se vexa a t\u00e1boa thingtest na vista en \u00e1rbore do cluster, o esquema da t\u00e1boa, a consulta SQL e o resultado. Importante As capturas te\u00f1en que asemellarse \u00e1s que se tomaron nos laboratorios e nas pr\u00e1cticas anteriores. As capturas tomadas na consola AWS te\u00f1en que inclu\u00edr o men\u00fa superior no que poida verse o nome de usuario da conta.","title":"Actividade 2"},{"location":"practica_5/actividade_2/#actividade-2","text":"STREAMING DE DATOS A REDSHIFT","title":"Actividade 2"},{"location":"practica_5/actividade_2/#obxectivo","text":"O obxectivo desta actividade \u00e9 configurar o env\u00edo dun stream de datos de telemetr\u00eda a un cluster Redshift usando o Amazon Data Firehose . Para realizar esta actividade vamos usar como base este exemplo do curso AWS IoT Events Workshop dispo\u00f1\u00edbel na plataforma AWS Workshop Studio. O curso s\u00f3 est\u00e1 dispo\u00f1\u00edbel en ingl\u00e9s, pero podes axudarte, p. ex., da traduci\u00f3n autom\u00e1tica integrada no teu navegador se o precisas. Importante Para realizar a pr\u00e1ctica, segue as instruci\u00f3ns do exemplo tendo en conta a medida que avances as indicaci\u00f3ns que se che dan nesta actividade. As capturas que hai que tomar para xustificar a actividade est\u00e1n indicadas ao final de cada paso, e ao final da actividade, a modo de resume, listanse todas as capturas que hai que inclu\u00edr na memoria de xustificaci\u00f3n da actividade. A continuaci\u00f3n se recollen as indicaci\u00f3ns adicionais que ter\u00e1s que ter en conta en cada secci\u00f3n do exemplo:","title":"Obxectivo"},{"location":"practica_5/actividade_2/#step-1-setup-a-redshift-cluster","text":"Para crear o cluster, na consola de RedShift escolle a opci\u00f3n clusters no men\u00fa lateral, preme no bot\u00f3n Crear cluster e indica as propiedades seguintes: Identificador do cluster: iot-cluster . Engade o teu prefixo ao nome. Tipo de n\u00f3: dc2.large N\u00famero de n\u00f3s: 2 Se\u00f1a do administrador: configura unha se\u00f1a manualmente. Funci\u00f3ns do IAM asociadas: asocia o rol IAM predefinido LabRole . Nas configuraci\u00f3ns adicionais: No apartado de Rede e Seguranza activa a opci\u00f3n Activar recurso publicamente acces\u00edbel . No apartado de Configuraci\u00f3ns da Base de datos , configura o nome da base de datos: iotredshift . Engade o teu prefixo ao nome. MOI IMPORTANTE !!!!!! O cluster Redshift \u00e9 un recurso \u201cmoi caro\u201d para o cr\u00e9dito do que dispo\u00f1emos nos laboratorios da AWS Academy. Aseg\u00farate de mantelo parado escollendo a opci\u00f3n Pausar do men\u00fa de acci\u00f3ns do cluster antes de pechar unha sesi\u00f3n no laboratorio ou durante as sesi\u00f3ns nas que non o vaias a usar. Deixalo funcionando entre sesi\u00f3ns pode deixarte sen cr\u00e9dito en cuesti\u00f3n dun par de d\u00edas. Unha vez remates a actividade elimina o cluster para evitar que poida deixarte sen cr\u00e9dito.","title":"Step 1 - Setup a Redshift cluster"},{"location":"practica_5/actividade_2/#xustificacion-do-paso","text":"Toma a seguinte captura para a memoria de xustificaci\u00f3n da pr\u00e1ctica: Propiedades do cluster Redshift (chega con que se vexa o apartado de informaci\u00f3ns xerais ). Imaxe: Exemplo de captura das propiedades do cluster Redshift.","title":"Xustificaci\u00f3n do paso"},{"location":"practica_5/actividade_2/#step-2-redshift-cluster-security","text":"Vamos a conectarnos ao cluster desde a instancia Cloud9, polo que teremos que configurar regras nos grupos de seguranza da instancia e do cluster para permitir a conexi\u00f3n. Ademais tam\u00e9n temos que engadir unha regra no grupo de seguranza do cluster para permitir o tr\u00e1fico desde Firehose. Para modificar as regras do grupo de seguranza do cluster fai o seguinte: Preme no nome do cluster para abrir as s\u00faas propiedades. Na aba Propiedades procura o apartado Configuraci\u00f3ns de rede e seguranza e preme no nome do grupo de seguranza. Abrirase nunha nova xanela. Presta atenci\u00f3n a cal \u00e9 o grupo , por defecto o cluster usa o grupo default . Edita as regras de entrada do grupo do cluster. Engade as seguintes: Todo o tr\u00e1fico desde a IP de Firehose: 52.70.63.192/27 (us-east-1) Todo o tr\u00e1fico desde o grupo de seguranza da instancia Cloud9 (o nome do grupo comeza por aws-cloud9-<prefixo>-VirtualDevice ) Imaxe: regras de entrada do grupo default. Edita as regras de entrada do grupo de seguranza da instancia Cloud9. Engade a seguinte: Todo o tr\u00e1fico desde o grupo default (o grupo que est\u00e1 a usar o cluster) Imaxe: regras de entrada do grupo de seguranza da instancia Cloud9. Nota Para \u201cafinar\u201d a\u00ednda m\u00e1is a seguranza poderiamos ter configurado un grupo espec\u00edfico para o cluster Redshift no canto de usar o grupo default .","title":"Step 2 - Redshift cluster security"},{"location":"practica_5/actividade_2/#xustificacion-do-paso_1","text":"Toma as seguintes capturas para a memoria de xustificaci\u00f3n da pr\u00e1ctica: Regras de entrada do grupo de seguranza default (o do cluster). Regras de entrada do grupo de seguranza da instancia Cloud9.","title":"Xustificaci\u00f3n do paso"},{"location":"practica_5/actividade_2/#step-3-create-table-definition","text":"Para crear a t\u00e1boa fai o seguinte: Instala o SQLWorkbench/J na instancia Cloud9. Ten en conta o seguinte: A instancia xa ten unha versi\u00f3n de Java v\u00e1lida (podes vela executando java --version ) Descarga o paquete executando wget <URL> . A URL da ligaz\u00f3n de descarga podes obtela aqu\u00ed . Instala o driver JBDC do Redshift. Descarga o driver executando wget <URL> . A ligaz\u00f3n de descarga podes obtela aqu\u00ed . Podes copialo onde queiras (p.ex. nun directorio JBDC dentro do directorio do SQLWorkbench) Crea un ficheiro create-table.sql para o script do lab que crea a t\u00e1boa. O ficheiro ten que crearse nun directorio scripts dentro do directorio no que descomprimiras o SQLWorkbench. Crea un perfil de conexi\u00f3n a Redshift. Inicia a consola do SQLWorkbench executando o script sqlworkbench.sh Executa o seguinte comando na consola do SQLWorkbench: Nota Ten en conta que a versi\u00f3n do ficheiro .jar do driver JDBC pode ser diferente no teu caso WbCreateProfile -name=\"Redshift\" -profileGroup=IOT -savePassword=true -username=awsuser -password=<A_T\u00daA_SE\u00d1A> -url=jdbc:redshift://<A_URL_JDBC_DO_CLUSTER> -driver=com.amazon.redshift.jbdc42.Driver -driverJar=<RUTA_DO_DRIVER_JBDC>/redshift-jdbc42-2.1.0.30.jar -autocommit=true; Imaxe: execuci\u00f3n do comando WbCreateProfile. Crea a t\u00e1boa. Con\u00e9ctate con WbConnect Redshift; executa o script con WbRun scripts/create-table.sql; e comproba o resultado con WbList; Imaxe: creaci\u00f3n da t\u00e1boa no WbCreateProfile.","title":"Step 3 - Create table definition"},{"location":"practica_5/actividade_2/#xustificacion-do-paso_2","text":"Toma a seguinte captura para a memoria de xustificaci\u00f3n da pr\u00e1ctica: Ambiente Cloud9 cos arquivos do SQLWorkbench na \u00e1rbore de directorios e o contido do script create-table.sql nun terminal e a sa\u00edda da creaci\u00f3n da t\u00e1boa (punto 5) noutro.","title":"Xustificaci\u00f3n do paso"},{"location":"practica_5/actividade_2/#step-4-create-s3-firehose-bucket","text":"Non fagas este paso. Crearemos o bucket S3 durante a configuraci\u00f3n do fluxo do Firehose.","title":"Step 4 - Create S3 Firehose bucket"},{"location":"practica_5/actividade_2/#step-5-setup-kinesis-firehose","text":"Non fagas os pasos do lab. No seu lugar fai o seguinte: Accede \u00e1 consola do Amazon Data Firehose (servizo que substit\u00fae ao de Kinesis), preme no bot\u00f3n Crear fluxo do Firehose e indica as propiedades seguintes: Orixe: Direct PUT Destino: Amazon Redshift Nome: iotstream . Engade o teu prefixo ao nome. Tipo de destino do Amazon Redshift: Cluster aprovisionado . Cluster: escolle o cluster iot-cluster . Base de datos: iotredshift (co teu prefixo diante). Autenticaci\u00f3n: usar nome de usuario e se\u00f1a. Nome de usuario: awsuser . Se\u00f1a: insire a se\u00f1a que configuraches ao crear o cluster Redshift. T\u00e1boa: thingtest . Bucket S3 intermediario: crea o bucket iotfirehose . Engade o teu prefixo ao nome. Opci\u00f3ns do comando COPY: FORMAT AS JSON 'auto' Nas configuraci\u00f3ns avanzadas, en Acceso ao Servizo escolle o rol predefinido LabRole .","title":"Step 5 - Setup Kinesis Firehose"},{"location":"practica_5/actividade_2/#xustificacion-do-paso_3","text":"Toma a seguinte captura para a memoria de xustificaci\u00f3n da pr\u00e1ctica: Propiedades nas que se vexan os detalles do fluxo e a configuraci\u00f3n do destino. Imaxe: exemplo de captura das propiedades do cluster Redshift.","title":"Xustificaci\u00f3n do paso"},{"location":"practica_5/actividade_2/#step-6-update-our-aws-iot-rule","text":"Non fagas os pasos do lab. No seu lugar crea no IoT Core unha regra coas seguintes propiedades: Nome: thingrule . Engade o teu prefixo ao nome. Usa o subli\u00f1ado que non acepta gui\u00f3n. Descrici\u00f3n: insire unha descrici\u00f3n. Instruci\u00f3n SQL: SELECT * FROM 'iot' Acci\u00f3ns da regra: engade unha regra de tipo Data Firehose Stream coas seguintes propiedades: Fluxo do Amazon Data Firehose: escolle iotstream . Funci\u00f3n do IAM: escolle o rol IAM predefinido LabRole .","title":"Step 6 - Update our AWS IoT rule"},{"location":"practica_5/actividade_2/#xustificacion-do-paso_4","text":"Toma a seguinte captura para a memoria de xustificaci\u00f3n da pr\u00e1ctica: Propiedades da regra thingrule coa aba Acci\u00f3ns escollida.","title":"Xustificaci\u00f3n do paso"},{"location":"practica_5/actividade_2/#step-7-check-your-roles","text":"Neste paso non tes que facer nada.","title":"Step 7 - Check your roles!"},{"location":"practica_5/actividade_2/#step-8-test-your-code","text":"Non executes o ratchet.py do lab 2 como se indica no lab porque o formato de mensaxe non coincide co da t\u00e1boa thingtest . No seu lugar fai o seguinte: Crea un novo script Python co c\u00f3digo que se fornece no lab e configura a conexi\u00f3n MQTT como nos labs anteriores. Nota Hai un erro de sintaxe no c\u00f3digo do lab, nas instruci\u00f3ns print faltan os par\u00e9nteses. Executa o script . A carga de datos efectiva no Redshift pode demorar varios minutos, mentres podes comprobar: Nas propiedades do fluxo Firehose, se aparece algunha mensaxe de erro nos logs de erros do destino . No bucket S3 iotfirehose , se se crearon os ficheiros temporais que se copiar\u00e1n a RedShift. Para comprobar o resultado: Desde o SQLWorkbench na instancia Cloud9. Con\u00e9ctate con WbConnect Redshift; e consulta a t\u00e1boa con SELECT * FROM thingtest; Desde o editor de consultas do Redshift. Na consola do Redshift escolle o cluster iot-cluster e a opci\u00f3n Consultar no editor de consultas v2 no men\u00fa Consultar datos . Abrirase o editor nunha nova xanela. No editor preme no nome do cluster e configura unha conexi\u00f3n coas propiedades seguintes: Forma de conexi\u00f3n: escolle a opci\u00f3n Temporary credentials using a database user name Database: iotredshift co teu prefixo diante. User name: awsuser Imaxe: configuraci\u00f3n da conexi\u00f3n no editor de consultas do Redshift. Crea unha consulta escollendo a opci\u00f3n Select table no men\u00fa de contexto da t\u00e1boa thingtest e exec\u00fataa premendo en Run . Imaxe: execuci\u00f3n dunha consulta no editor de consultas Redshift.","title":"Step 8 - Test your code"},{"location":"practica_5/actividade_2/#xustificacion-do-paso_5","text":"Toma a seguinte captura para a memoria de xustificaci\u00f3n da pr\u00e1ctica: Editor de consultas do Redshift no que se vexa a t\u00e1boa thingtest na vista en \u00e1rbore do cluster, o esquema da t\u00e1boa, a consulta SQL e o resultado. Imaxe: exemplo de captura do editor de consultas Redshift.","title":"Xustificaci\u00f3n do paso"},{"location":"practica_5/actividade_2/#eliminacion-de-recursos","text":"MOI IMPORTANTE!!!!!! Elimina o cluster unha vez remates a actividade para evitar que poida deixarte sen cr\u00e9dito. Cando xa non os vaias usar m\u00e1is elimina os recursos que se crearon nesta actividade: No Redshift elimina o cluster iot-cluster . No S3 elimina o bucket iotfirehose . No Firehose elimina o fluxo iotstream . No IoT Core elimina a regra thingrule .","title":"Eliminaci\u00f3n de recursos"},{"location":"practica_5/actividade_2/#xustificacion-da-actividade","text":"Resume das capturas que tes que inclu\u00edr na memoria de xustificaci\u00f3n da pr\u00e1ctica: Step 1 - Setup a Redshift cluster Propiedades do cluster Redshift. Step 2 - Redshift cluster security Regras de entrada do grupo de seguranza default (o do cluster). Regras de entrada do grupo de seguranza da instancia Cloud9 Step 3 - Create table definition Ambiente Cloud9 cos arquivos do SQLWorkbench na \u00e1rbore de directorios e o script create-table.sql nun terminal e a creaci\u00f3n da t\u00e1boa noutro. Step 5 - Setup Kinesis Firehose Propiedades nas que se vexan os detalles do fluxo e a configuraci\u00f3n do destino. Step 6 - Update our AWS IoT rule Propiedades da regra thingrule coa aba Acci\u00f3ns escollida. Step 8 - Test your code Editor de consultas do Redshift no que se vexa a t\u00e1boa thingtest na vista en \u00e1rbore do cluster, o esquema da t\u00e1boa, a consulta SQL e o resultado. Importante As capturas te\u00f1en que asemellarse \u00e1s que se tomaron nos laboratorios e nas pr\u00e1cticas anteriores. As capturas tomadas na consola AWS te\u00f1en que inclu\u00edr o men\u00fa superior no que poida verse o nome de usuario da conta.","title":"Xustificaci\u00f3n da actividade"}]}